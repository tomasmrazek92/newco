"use strict";
(() => {
  var __defProp = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // bin/live-reload.js
  new EventSource(`${"http://localhost:3000"}/esbuild`).addEventListener("change", () => location.reload());

  // src/utils/gsapAnimate.js
  function gsapAnimate(element, isMobile) {
    const $el = $(element);
    const tl = gsap.timeline();
    if (isMobile)
      return;
    if ($el.is('[data-animation="heading"]')) {
      const type = $el.attr("data-split-type") || "word";
      const typeSplit = new SplitType($el, {
        types: "words, chars",
        tagName: "span"
      });
      tl.from($el.find(`.${type}`), {
        y: "2rem",
        opacity: 0,
        duration: 1,
        ease: "power3.out",
        stagger: 0.1
      });
      tl.to(
        [$el, $el.find(`.${type}`)],
        {
          visibility: "visible"
        },
        "<"
      );
    }
    if ($el.is('[data-animation="item"]')) {
      const stagger = $el.attr("data-stagger") || 0.2;
      tl.fromTo(
        $el,
        { y: "2rem", opacity: 0 },
        { y: "0rem", opacity: 1, visibility: "visible", stagger }
      );
    }
    if ($el.is('[data-animation="stagger"]')) {
      const staggerItems = $el.find('[data-animation="stagger-item"]');
      const stagger = $el.attr("data-stagger") || 0.1;
      gsap.set([$el, staggerItems], {
        visibility: "visible",
        immediateRender: true
      });
      tl.from(staggerItems, {
        y: "1rem",
        opacity: 0,
        stagger,
        clearProps: "visibility",
        overwrite: "auto",
        force3D: true
      });
    }
    if ($el.is('[data-animation="writer"]')) {
      const scoreText = $el.text();
      $el.text("");
      tl.to($elt, {
        duration: 2,
        text: scoreText,
        ease: "none"
      });
    }
    return tl;
  }

  // src/Animations.js
  var Sections = class {
    currentLink;
    isMobile;
    $content;
    intObs;
    constructor() {
      this.$content = $(".page-main");
      this.intObs = new IntersectionObserver(this.onIntersection.bind(this), { threshold: 0.2 });
    }
    init() {
      $("[data-animation]").each((i, elm) => {
        const $el = $(elm);
        const isHero = $el.closest(".section.cc-hero").length;
        if (!isHero) {
          this.intObs.observe(elm);
        }
      });
    }
    onIntersection(entries, observer) {
      entries.forEach((entry) => {
        const elm = entry.target;
        if (entry.isIntersecting && !elm.hasAttribute("animated")) {
          elm.setAttribute("animated", "");
          observer.unobserve(elm);
          gsapAnimate(elm, this.isMobile);
        }
      });
    }
  };

  // src/utils/globalFunctions.js
  var windowWidth = window.innerWidth;
  var uniqueIdCounters = {};
  var createResponsiveSwiper = (componentSelector, swiperSelector, classSelector, options, mode) => {
    let elements = $(componentSelector).add(swiperSelector);
    if (elements.length < 2)
      return;
    uniqueIdCounters[classSelector] = 0;
    uniqueIdCounters[classSelector] = uniqueIdCounters[classSelector] || 0;
    elements.each(function() {
      let uniqueKey = `${classSelector}_${uniqueIdCounters[classSelector]}`;
      addUniqueClassesToElements(this, swiperSelector, uniqueKey, [
        ".swiper-arrow",
        ".swiper-nav",
        ".swiper-drag-wrapper"
      ]);
      let swiperOptions = getMergedSwiperOptions(options, uniqueKey);
      manageSwiperInstance(this, swiperSelector, uniqueKey, classSelector, swiperOptions, mode);
      uniqueIdCounters[classSelector]++;
    });
  };
  var addUniqueClassesToElements = (context, swiperSelector, uniqueKey, controlSelectors) => {
    controlSelectors.forEach((selector) => {
      $(context).find(selector).addClass(uniqueKey);
    });
    $(context).find(swiperSelector).addClass(uniqueKey);
  };
  var getMergedSwiperOptions = (options, uniqueKey) => {
    const defaultPagination = {
      el: `.swiper-nav.${uniqueKey}`,
      type: "bullets",
      bulletActiveClass: "cc-active",
      bulletClass: "swiper-dot",
      clickable: true
    };
    const paginationConfig = options.pagination ? { ...defaultPagination, ...options.pagination } : defaultPagination;
    return {
      speed: 1e3,
      navigation: {
        prevEl: `.swiper-arrow.prev.${uniqueKey}`,
        nextEl: `.swiper-arrow.next.${uniqueKey}`
      },
      pagination: paginationConfig,
      ...options
    };
  };
  var manageSwiperInstance = (context, swiperSelector, uniqueKey, classSelector, swiperOptions, mode) => {
    swipers[classSelector] = swipers[classSelector] || {};
    swipers[classSelector][uniqueKey] = swipers[classSelector][uniqueKey] || {};
    let existingInstance = swipers[classSelector][uniqueKey];
    let existingSwiper = existingInstance.swiperInstance;
    let shouldInitDesktop = mode === "desktop" && window.matchMedia("(min-width: 992px)").matches;
    let shouldInitMobile = mode === "mobile" && window.matchMedia("(min-width: 0px) and (max-width: 991px)").matches;
    let shouldInitAll = mode === "all";
    const destroySwiper = () => {
      if (existingInstance.observer) {
        existingInstance.observer.disconnect();
        delete existingInstance.observer;
      }
      if (existingSwiper) {
        existingSwiper.destroy(true, true);
        delete swipers[classSelector][uniqueKey];
        console.log("Swiper destroyed for", swiperSelector, "with uniqueKey", uniqueKey);
      }
    };
    const reInitObserver = () => {
      if (existingInstance.observer) {
        existingInstance.observer.disconnect();
      }
      const swiperElement = $(`${swiperSelector}.${uniqueKey}`)[0];
      if (!swiperElement)
        return;
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting && (shouldInitDesktop || shouldInitMobile || shouldInitAll)) {
            if (!existingSwiper) {
              let swiper = new Swiper(`${swiperSelector}.${uniqueKey}`, swiperOptions);
              swipers[classSelector][uniqueKey] = {
                swiperInstance: swiper,
                mode: shouldInitDesktop ? "desktop" : shouldInitMobile ? "mobile" : "all",
                initialized: true
              };
              observer.disconnect();
              console.log("Swiper initialized for", swiperSelector, "with uniqueKey", uniqueKey);
            }
          }
        });
      }, {});
      swipers[classSelector][uniqueKey].observer = observer;
      observer.observe(swiperElement);
    };
    if (!shouldInitDesktop && mode === "desktop")
      destroySwiper();
    else if (!shouldInitMobile && mode === "mobile")
      destroySwiper();
    else if (!shouldInitAll && mode === "all")
      destroySwiper();
    else if ((shouldInitDesktop || shouldInitMobile || shouldInitAll) && !existingSwiper) {
      reInitObserver();
    }
  };
  var runSwipers = (swiperInstances) => {
    swiperInstances.forEach((instance) => {
      createResponsiveSwiper(...instance);
    });
  };
  var initSwipers = (swiperInstances, swipersState) => {
    runSwipers(swiperInstances);
    window.addEventListener("resize", function() {
      if (window.innerWidth !== windowWidth) {
        windowWidth = window.innerWidth;
        runSwipers(swiperInstances);
      }
    });
  };

  // src/Carousels.js
  var Carousels = class {
    constructor() {
      const swiperInstances = [
        [
          ".section.cc-about",
          ".about-wrap",
          "about-slider",
          {
            slidesPerView: "auto",
            spaceBetween: 32
          },
          "mobile"
        ],
        [
          ".section.cc-team",
          ".team-list-wrap",
          "team-slider",
          {
            slidesPerView: "auto",
            spaceBetween: 16
          },
          "mobile"
        ],
        [
          ".section.cc-exp",
          ".experience_slider",
          "exp-slider",
          {
            slidesPerView: "auto",
            spaceBetween: 32
          },
          "mobile"
        ],
        [
          ".section.cc-exp-cards",
          ".exp-cards_wrap",
          "exp-cards-slider",
          {
            slidesPerView: "auto",
            spaceBetween: 32
          },
          "mobile"
        ],
        [
          ".section.cc-ceo",
          ".ceo_slider",
          "ceo-slider",
          {
            slidesPerView: "auto",
            spaceBetween: 16
          },
          "mobile"
        ]
      ];
      initSwipers(swiperInstances);
    }
  };

  // src/homepage-waves.svg
  var homepage_waves_default = '<svg preserveAspectRatio="xMidYMid slice" viewBox="0 0 1440 900" fill="none" xmlns="http://www.w3.org/2000/svg">\n<g clip-path="url(#clip0_1289_6687)">\n<path d="M1998.02 -169.178C1998.02 -147.233 1994.68 -124.716 1988.04 -102.276C1976.27 -62.6451 1954.28 -24.6115 1926.13 4.8267C1887.01 45.7511 1813.54 90.1374 1724.68 92.0391C1652.28 93.5984 1584.09 65.7571 1527.47 11.5969C1416.43 -94.6319 1346.37 -216.834 1278.62 -335.006C1232.06 -416.208 1188.13 -492.885 1134.42 -556.934C1074.22 -628.704 1010.13 -674.649 932.64 -701.539C859.643 -726.869 756.827 -689.329 698.54 -616.076C664.268 -573.021 647.251 -520.764 649.358 -464.892C651.823 -398.865 680.171 -328.958 733.567 -257.15C795.392 -173.97 925.602 -113.23 1063.49 -48.8766C1199.54 14.6019 1340.25 80.248 1413.32 170.388C1451.29 217.17 1473.64 271.064 1477.97 326.175C1482.15 379.156 1469.62 429.513 1441.75 471.655C1415.35 511.59 1376.39 541.599 1329.04 558.41C1276.51 577.047 1216 579.367 1149.13 565.333C1074.66 549.663 1013.59 515.241 962.459 460.13C916.856 410.991 883.101 350.175 850.459 291.374C817.658 232.346 783.783 171.264 737.742 121.553C686.135 65.7957 624.509 30.6144 549.285 14.0316C446.548 -8.63661 354.346 -6.08839 275.147 21.5622C189.188 51.5709 122.632 110.257 77.3462 195.909C30.8283 283.843 20.9683 389.807 49.6742 494.248C75.8356 589.561 131.499 675.554 202.389 730.209C237.138 756.985 276.181 779.388 317.491 803.121C428.259 866.713 542.804 932.473 578.467 1088.72C581.33 1101.34 586.141 1119.52 592.264 1142.57C635.561 1306.31 736.907 1689.73 619.26 1855.78C588.487 1899.22 544.315 1924.89 487.897 1932.04L487.699 1930.6C543.639 1923.49 587.494 1898.04 617.989 1854.99C735.238 1689.46 633.971 1306.46 590.753 1142.95C584.67 1119.9 579.86 1101.69 576.957 1089.02C541.452 933.425 427.186 867.816 316.696 804.375C275.307 780.604 236.224 758.164 201.395 731.35C130.266 676.505 74.4047 590.207 48.1638 494.627C19.3784 389.844 29.2783 283.501 75.9552 195.225C121.439 109.23 188.274 50.3154 274.63 20.1545C354.108 -7.61024 446.627 -10.1585 549.642 12.5477C718.021 49.6688 786.049 172.176 851.81 290.652C884.412 349.376 918.128 410.117 963.612 459.104C1014.54 513.987 1075.33 548.255 1149.49 563.849C1216.08 577.845 1276.32 575.564 1328.56 557.003C1375.59 540.307 1414.32 510.487 1440.52 470.818C1468.19 428.943 1480.64 378.928 1476.5 326.213C1472.21 271.368 1449.94 217.779 1412.17 171.225C1339.29 81.3509 1198.75 15.7803 1062.85 -47.6222C924.808 -112.052 794.399 -172.867 732.335 -256.352C678.74 -328.426 650.352 -398.599 647.847 -464.93C645.74 -521.106 662.836 -573.745 697.307 -617.066C755.952 -690.813 859.563 -728.581 933.156 -703.023C1010.92 -676.019 1075.26 -629.92 1135.61 -557.922C1189.4 -493.759 1233.42 -417.007 1279.97 -335.767C1347.64 -217.71 1417.66 -95.6209 1528.55 10.4937C1584.84 64.3497 1652.63 92.0385 1724.6 90.4791C1812.98 88.6154 1886.02 44.4579 1924.94 3.76164C1952.93 -25.5245 1974.8 -63.3302 1986.49 -102.733C1999.25 -145.788 1999.73 -189.108 1987.8 -228.055C1971.1 -282.671 1921.8 -355.316 1781.81 -391.067C1721.93 -406.357 1672.59 -412.177 1629.02 -417.35C1582.5 -422.865 1544.89 -427.276 1513.72 -441.653C1550.89 -412.367 1606.99 -369.426 1666.43 -331.278C1758.71 -272.06 1827.45 -244.676 1870.75 -249.848L1870.95 -248.402C1827.29 -243.192 1758.19 -270.653 1665.6 -330.062C1603.13 -370.15 1544.37 -415.486 1507.35 -444.772C1495.94 -450.743 1485.41 -458.198 1475.63 -467.783C1468.35 -474.933 1468.47 -475.046 1469.11 -475.693C1469.64 -476.251 1476.38 -471.358 1489.34 -461.013C1494.71 -456.715 1501.03 -451.656 1508.15 -446.027C1540.28 -429.292 1579.64 -424.652 1629.18 -418.795C1672.79 -413.66 1722.21 -407.803 1782.17 -392.475C1922.87 -356.533 1972.41 -283.432 1989.23 -228.473C1995 -209.57 1997.9 -189.641 1997.9 -169.254L1998.02 -169.178ZM1475.15 -470.407C1475.67 -469.912 1476.22 -469.342 1476.82 -468.733C1484.06 -461.621 1491.73 -455.726 1499.88 -450.705C1495.71 -454.014 1491.89 -457.095 1488.43 -459.833C1483.06 -464.131 1478.45 -467.82 1475.11 -470.407L1475.15 -470.407Z" fill="url(#paint0_linear_1289_6687)" style=""/>\n<path d="M2009.23 -153.66C2009.23 -131.715 2005.89 -109.198 1999.25 -86.7584C1987.48 -47.127 1965.5 -9.09347 1937.35 20.3448C1898.23 61.2692 1824.75 105.655 1735.89 107.556C1663.49 109.078 1595.3 81.2752 1538.73 27.1149C1427.68 -79.1137 1357.62 -201.317 1289.88 -319.488C1243.32 -400.691 1199.38 -477.367 1145.67 -541.416C1085.47 -613.186 1021.38 -659.131 943.893 -686.021C870.896 -711.351 768.079 -673.813 709.792 -600.559C675.52 -557.505 658.504 -505.169 660.611 -449.374C663.076 -383.347 691.424 -313.441 744.82 -241.633C806.645 -158.453 936.856 -97.7128 1074.74 -33.3975C1210.79 30.081 1351.5 95.7281 1424.62 185.868C1462.59 232.65 1484.93 286.544 1489.27 341.655C1493.44 394.712 1480.92 444.993 1453.04 487.135C1426.64 527.07 1387.68 557.079 1340.33 573.89C1287.81 592.527 1227.29 594.885 1160.42 580.813C1085.95 565.143 1024.88 530.76 973.752 475.61C928.149 426.471 894.393 365.655 861.751 306.854C828.95 247.826 795.076 186.743 749.035 137.033C697.428 81.2749 635.801 46.0935 560.577 29.5107C457.84 6.84251 365.64 9.39073 286.44 37.0414C200.481 67.0881 133.925 125.737 88.6394 211.389C42.1215 299.323 32.2615 405.286 60.9674 509.727C87.1288 605.04 142.791 691.034 213.681 745.689C248.43 772.465 287.434 794.867 328.784 818.6C439.552 882.192 554.097 947.953 589.761 1104.2C592.424 1115.87 596.599 1132.08 601.927 1152.61C622.403 1231.8 656.675 1364.31 671.505 1499.48C689.516 1663.75 672.936 1783.14 622.204 1854.38C590.715 1898.57 545.548 1924.7 487.938 1932.04L487.74 1930.6C544.873 1923.33 589.681 1897.43 620.932 1853.58C671.466 1782.65 687.925 1663.6 669.954 1499.67C655.124 1364.61 620.892 1232.14 600.416 1152.99C595.088 1132.46 590.913 1116.22 588.249 1104.54C552.745 948.943 438.478 883.334 327.988 819.893C286.599 796.122 247.516 773.682 212.727 746.868C141.598 692.024 85.7367 605.725 59.4959 510.146C30.7104 405.324 40.6103 299.019 87.2873 210.743C132.771 124.748 199.607 65.8335 285.963 35.6726C365.441 7.90794 457.96 5.3596 560.975 28.0659C729.354 65.187 797.382 187.694 863.143 306.169C895.745 364.894 929.46 425.634 974.944 474.622C1025.88 529.504 1086.67 563.773 1160.82 579.367C1227.41 593.363 1287.65 591.081 1339.89 572.521C1386.93 555.824 1425.65 526.006 1451.85 486.336C1479.53 444.461 1491.97 394.446 1487.83 341.769C1483.54 286.924 1461.28 233.335 1423.5 186.781C1350.63 96.907 1210.08 31.3365 1074.18 -32.066C936.14 -96.4574 805.731 -157.311 743.707 -240.796C690.112 -312.87 661.724 -383.043 659.219 -449.374C657.112 -505.55 674.208 -558.152 708.679 -601.51C767.323 -675.258 870.935 -713.024 944.529 -687.465C1022.3 -660.461 1086.63 -614.365 1146.98 -542.367C1200.77 -478.203 1244.79 -401.451 1291.35 -320.211C1359.02 -202.154 1429.03 -80.0646 1539.92 26.0499C1596.22 79.9059 1664.01 107.557 1735.97 106.035C1824.35 104.172 1897.39 60.0141 1936.31 19.3178C1964.3 -9.96835 1986.17 -47.774 1997.86 -87.1771C2010.62 -130.232 2011.1 -173.552 1999.17 -212.499C1982.47 -267.115 1933.17 -339.76 1793.18 -375.512C1733.31 -390.802 1683.96 -396.621 1640.39 -401.793C1596.26 -407.004 1560.12 -411.264 1529.94 -423.967C1612.96 -360.945 1782.21 -239.237 1870.91 -249.81L1871.11 -248.364C1779.98 -237.449 1605.2 -364.711 1524.01 -426.63C1510.58 -432.981 1498.33 -441.197 1487.08 -452.226C1479.52 -459.643 1479.72 -459.833 1480.36 -460.479C1481.19 -461.354 1481.27 -461.43 1503.26 -444.467C1509.34 -439.751 1516.62 -434.161 1524.81 -427.923C1555.98 -413.28 1593.75 -408.792 1640.63 -403.277C1684.24 -398.143 1733.66 -392.285 1793.62 -376.957C1934.33 -341.015 1983.87 -267.914 2000.68 -212.955C2006.45 -194.053 2009.35 -174.123 2009.35 -153.736L2009.23 -153.66ZM1484.53 -456.714C1485.45 -455.801 1486.6 -454.66 1488.07 -453.215C1497.14 -444.315 1506.92 -437.241 1517.46 -431.536C1511.81 -435.872 1506.68 -439.827 1502.19 -443.288C1494.59 -449.145 1488.35 -453.976 1484.57 -456.714L1484.53 -456.714Z" fill="url(#paint1_linear_1289_6687)" style=""/>\n<path d="M2020.48 -138.102C2020.48 -116.157 2017.14 -93.6412 2010.5 -71.2011C1998.74 -31.5699 1976.75 6.46464 1948.6 35.9029C1909.48 76.8273 1836 121.213 1747.14 123.114C1674.74 124.636 1606.55 96.8323 1549.94 42.6721C1438.89 -63.5566 1368.84 -185.759 1301.09 -303.93C1254.53 -385.133 1210.59 -461.809 1156.88 -525.858C1096.69 -597.628 1032.59 -643.573 955.104 -670.463C882.107 -695.794 779.291 -658.254 721.004 -585C686.732 -541.946 669.715 -489.649 671.822 -433.816C674.287 -367.789 702.636 -297.883 756.032 -226.037C817.857 -142.857 948.067 -82.1167 1085.95 -17.7634C1222.01 45.7152 1362.71 111.361 1435.83 201.502C1473.8 248.283 1496.14 302.178 1500.48 357.289C1504.65 410.27 1492.13 460.627 1464.26 502.769C1437.86 542.704 1398.89 572.712 1351.54 589.524C1299.02 608.16 1238.51 610.519 1171.63 596.446C1097.16 580.776 1036.09 546.356 984.963 491.244C939.36 442.105 905.605 381.288 872.963 322.488C840.162 263.459 806.287 202.377 760.246 152.667C708.639 96.909 647.013 61.7276 571.789 45.1449C469.052 22.4767 376.851 25.0249 297.652 52.6755C211.693 82.6843 145.137 141.371 99.8513 227.023C53.3334 314.958 43.4734 420.92 72.1793 525.399C98.3407 620.712 154.003 706.707 224.893 761.361C259.642 788.137 298.645 810.539 339.995 834.272C450.763 897.865 565.309 963.626 600.972 1119.87C603.398 1130.52 606.976 1144.67 611.508 1162.62C630.99 1239.56 663.553 1368.38 677.11 1501.46C693.65 1663.52 676.196 1781.81 625.185 1852.97C592.941 1898 546.741 1924.63 487.898 1932.12L487.7 1930.68C546.105 1923.26 591.947 1896.82 623.914 1852.17C674.686 1781.28 692.06 1663.37 675.56 1501.61C662.002 1368.61 629.44 1239.87 609.998 1162.96C605.465 1145.01 601.886 1130.82 599.461 1120.17C563.956 964.576 449.69 898.968 339.2 835.527C297.811 811.756 258.728 789.315 223.939 762.502C152.81 707.657 96.9486 621.358 70.7078 525.741C41.9223 420.957 51.8223 314.615 98.4992 226.338C143.983 140.343 210.818 81.4287 297.174 51.3059C376.652 23.5411 469.172 20.9929 572.187 43.6991C740.566 80.8202 808.593 203.328 874.355 321.803C906.957 380.528 940.672 441.268 986.156 490.256C1037.09 545.139 1097.88 579.407 1172.03 595.001C1238.63 608.998 1298.86 606.715 1351.1 588.155C1398.14 571.458 1436.86 541.639 1463.06 501.969C1490.74 460.094 1503.22 410.079 1499.05 357.403C1494.75 302.558 1472.49 248.968 1434.72 202.414C1361.84 112.54 1221.29 46.9707 1085.39 -16.4318C947.351 -80.8232 816.943 -141.678 754.879 -225.162C701.284 -297.236 672.896 -367.408 670.391 -433.74C668.244 -489.916 685.38 -542.516 719.851 -585.875C778.495 -659.623 882.107 -697.391 955.701 -671.832C1033.47 -644.828 1097.8 -598.731 1158.15 -526.733C1211.95 -462.57 1255.96 -385.817 1302.52 -304.577C1370.19 -186.519 1440.2 -64.4305 1551.09 41.6841C1607.39 95.5401 1675.18 123.228 1747.14 121.669C1835.53 119.805 1908.56 75.6482 1947.49 34.9519C1975.48 5.66593 1997.34 -32.1397 2009.03 -71.5429C2021.8 -114.597 2022.27 -157.919 2010.35 -196.865C1993.65 -251.482 1944.35 -324.126 1804.35 -359.878C1744.48 -375.168 1695.14 -380.987 1651.56 -386.16C1610.05 -391.066 1575.62 -395.135 1546.56 -406.165C1630.17 -345.235 1784.79 -239.463 1870.83 -249.732L1871.03 -248.287C1782.77 -237.714 1623.49 -348.012 1540.95 -408.409C1525.21 -415.065 1511.05 -424.003 1498.21 -436.592C1490.38 -444.275 1490.66 -444.579 1491.25 -445.226C1492.17 -446.215 1492.92 -445.796 1516.74 -428.111C1523.89 -422.786 1532.28 -416.587 1541.67 -409.703C1571.69 -397.076 1607.71 -392.815 1651.72 -387.605C1695.34 -382.432 1744.76 -376.613 1804.71 -361.286C1945.42 -325.344 1994.96 -252.242 2011.78 -197.283C2017.54 -178.38 2020.44 -158.45 2020.44 -138.064L2020.48 -138.102ZM1494.47 -442.526C1495.47 -441.461 1497.02 -439.901 1499.28 -437.657C1510.22 -426.932 1522.11 -418.907 1535.19 -412.669C1528.03 -417.918 1521.51 -422.749 1515.78 -427.008C1506.4 -433.969 1498.45 -439.863 1494.47 -442.526Z" fill="url(#paint2_linear_1289_6687)" style=""/>\n<path d="M2031.74 -122.546C2031.74 -100.601 2028.4 -78.0843 2021.76 -55.6443C2009.99 -16.013 1988 22.0205 1959.85 51.4589C1920.73 92.3833 1847.25 136.77 1758.39 138.671C1685.99 140.193 1617.81 112.389 1561.19 58.2291C1450.14 -47.9997 1380.09 -170.202 1312.34 -288.374C1265.78 -369.576 1221.85 -446.252 1168.13 -510.301C1107.94 -582.071 1043.85 -628.016 966.356 -654.906C893.359 -680.236 790.543 -642.698 732.256 -569.445C697.984 -526.39 681.007 -474.094 683.074 -418.26C685.539 -352.233 713.887 -282.326 767.283 -210.518C829.108 -127.338 959.319 -66.5978 1097.2 -2.24455C1233.26 61.2341 1373.96 126.88 1447.08 217.021C1485.05 263.802 1507.4 317.696 1511.73 372.807C1515.9 425.826 1503.38 476.145 1475.51 518.287C1449.11 558.222 1410.14 588.232 1362.79 605.042C1310.27 623.679 1249.76 626.037 1182.88 611.965C1108.41 596.295 1047.35 561.874 996.215 506.763C950.612 457.623 916.857 396.807 884.215 338.007C851.414 278.978 817.539 217.895 771.498 168.185C719.891 112.427 658.265 77.2466 583.041 60.6638C480.304 37.9956 388.103 40.5437 308.904 68.1944C222.945 98.2031 156.389 156.889 111.103 242.541C64.5854 330.476 54.7244 436.439 83.4303 540.88C109.592 636.193 165.255 722.187 236.145 776.841C270.894 803.617 309.897 826.02 351.247 849.753C462.015 913.346 576.56 979.106 612.224 1135.35C614.371 1144.82 617.512 1157.52 621.169 1172.24C655.879 1312.55 748.08 1685.21 628.446 1851.38C595.406 1897.28 548.132 1924.44 487.937 1932.08L487.739 1930.64C547.457 1923.03 594.372 1896.1 627.173 1850.54C746.41 1684.9 654.329 1312.7 619.659 1172.58C616.001 1157.87 612.86 1145.16 610.713 1135.69C575.209 980.095 460.942 914.486 350.452 851.046C309.063 827.274 269.98 804.834 235.191 778.021C164.062 723.176 108.201 636.877 81.9597 541.298C53.1743 436.514 63.0742 330.172 109.751 241.895C155.235 155.9 222.07 96.9856 308.426 66.8248C387.904 39.06 480.423 36.5117 583.438 59.218C751.817 96.3391 819.845 218.847 885.606 337.322C918.208 396.047 951.924 456.786 997.408 505.774C1048.34 560.657 1109.13 594.925 1183.28 610.519C1249.88 624.516 1310.11 622.233 1362.36 603.673C1409.39 586.976 1448.11 557.158 1474.32 517.488C1501.99 475.613 1514.43 425.598 1510.3 372.921C1506 318.077 1483.74 264.487 1445.97 217.933C1373.09 128.059 1232.54 62.4886 1096.65 -0.913863C958.603 -65.3052 828.194 -126.159 766.17 -209.643C712.575 -281.718 684.187 -351.891 681.682 -418.222C679.575 -474.398 696.672 -527.036 731.143 -570.356C789.787 -644.104 893.398 -681.872 966.992 -656.313C1044.76 -629.309 1109.09 -583.213 1169.45 -511.214C1223.24 -447.051 1267.25 -370.299 1313.81 -289.059C1381.48 -171.002 1451.49 -48.9125 1562.38 57.202C1618.68 111.058 1686.47 138.709 1758.43 137.187C1846.82 135.324 1919.85 91.1662 1958.78 50.4699C1986.77 21.1839 2008.64 -16.6219 2020.33 -56.025C2033.09 -99.0794 2033.56 -142.4 2021.64 -181.347C2004.94 -235.963 1955.64 -308.608 1815.65 -344.359C1755.77 -359.649 1706.43 -365.469 1662.85 -370.641C1624.29 -375.205 1591.88 -379.046 1564.17 -388.403C1645.16 -332.227 1788.49 -239.957 1870.87 -249.807L1871.07 -248.362C1786.58 -238.245 1639.08 -334.395 1558.84 -390.305C1540.4 -397.189 1524.09 -406.774 1509.5 -421.112C1501.39 -429.061 1501.71 -429.441 1502.31 -430.126C1503.3 -431.191 1504.41 -430.62 1530.34 -412.212C1538.53 -406.393 1548.39 -399.395 1559.52 -391.636C1588.19 -380.987 1622.14 -376.954 1663.01 -372.124C1706.63 -366.951 1756.05 -361.133 1816 -345.805C1956.71 -309.863 2006.25 -236.761 2023.07 -181.802C2028.83 -162.899 2031.74 -142.971 2031.74 -122.584L2031.74 -122.546ZM1504.73 -428.072C1505.73 -426.969 1507.44 -425.144 1510.54 -422.139C1523.42 -409.512 1537.65 -400.574 1553.52 -393.994C1544.41 -400.345 1536.3 -406.127 1529.38 -411.071C1518.05 -419.134 1508.67 -425.79 1504.73 -428.11L1504.73 -428.072Z" fill="url(#paint3_linear_1289_6687)" style=""/>\n<path d="M2042.95 -107.03C2042.95 -85.0839 2039.61 -62.5676 2032.97 -40.1276C2021.2 -0.496301 1999.21 37.5373 1971.06 66.9755C1931.94 107.9 1858.47 152.285 1769.61 154.187C1697.21 155.708 1629.02 127.906 1572.4 73.7457C1461.36 -32.483 1391.3 -154.686 1323.55 -272.858C1276.99 -354.06 1233.06 -430.737 1179.35 -494.786C1119.15 -566.556 1055.06 -612.501 977.57 -639.391C904.572 -664.721 801.756 -627.181 743.469 -553.928C709.197 -510.835 692.22 -458.539 694.288 -402.743C696.753 -336.716 725.101 -266.81 778.497 -194.964C840.322 -111.784 970.532 -51.044 1108.42 13.3093C1244.47 76.7879 1385.18 142.435 1458.29 232.575C1496.26 279.357 1518.61 333.251 1522.94 388.362C1527.12 441.381 1514.59 491.7 1486.72 533.842C1460.32 573.777 1421.36 603.786 1374.01 620.597C1321.48 639.234 1260.97 641.553 1194.1 627.519C1119.63 611.849 1058.56 577.467 1007.43 522.317C961.825 473.178 928.069 412.362 895.427 353.561C862.626 294.533 828.752 233.45 782.711 183.739C731.104 127.982 669.478 92.8004 594.254 76.2176C491.517 53.5494 399.316 56.0975 320.116 83.7483C234.158 113.757 167.601 172.444 122.316 258.096C75.7981 346.03 65.938 451.993 94.6439 556.472C120.805 651.785 176.467 737.779 247.357 792.434C282.107 819.21 321.111 841.612 362.46 865.345C473.229 928.938 587.773 994.698 623.437 1150.94C625.306 1159.16 627.851 1169.58 630.753 1181.71C663.992 1318.9 752.256 1683.3 631.787 1849.78C597.873 1896.63 549.485 1924.32 487.899 1932.16L487.701 1930.71C548.81 1922.95 596.878 1895.42 630.514 1848.94C750.586 1683 662.441 1319.05 629.242 1182.05C626.3 1169.96 623.795 1159.5 621.887 1151.28C586.382 995.688 472.114 930.079 361.625 866.638C320.236 842.867 281.153 820.427 246.364 793.614C175.235 738.769 119.374 652.47 93.1336 556.852C64.3481 452.069 74.248 345.726 120.925 257.45C166.409 171.455 233.244 112.54 319.6 82.4176C399.078 54.6528 491.597 52.1046 594.612 74.8108C762.991 111.932 831.018 234.439 896.78 352.914C929.382 411.639 963.098 472.379 1008.58 521.366C1059.51 576.249 1120.3 610.518 1194.45 626.112C1261.05 640.108 1321.28 637.826 1373.53 619.266C1420.56 602.569 1459.29 572.751 1485.49 533.081C1513.16 491.206 1525.61 441.153 1521.47 388.514C1517.18 333.669 1494.91 280.08 1457.14 233.526C1384.26 143.652 1243.72 78.0815 1107.82 14.6789C969.777 -49.7124 839.367 -110.567 777.304 -194.052C723.709 -266.126 695.321 -336.298 692.816 -402.629C690.749 -458.881 707.806 -511.445 742.277 -554.765C800.921 -628.513 904.532 -666.279 978.126 -640.72C1055.89 -613.716 1120.22 -567.62 1180.58 -495.622C1234.37 -431.458 1278.39 -354.706 1324.94 -273.466C1392.61 -155.409 1462.63 -33.3198 1573.52 72.7949C1629.81 126.651 1697.6 154.34 1769.57 152.78C1857.95 150.917 1930.99 106.759 1969.91 66.0628C1997.9 36.7766 2019.77 -1.02902 2031.46 -40.4322C2044.22 -83.4865 2044.7 -126.807 2032.77 -165.754C2016.07 -220.37 1966.77 -293.015 1826.78 -328.767C1766.9 -344.057 1717.56 -349.876 1673.99 -355.048C1638.76 -359.194 1608.66 -362.77 1582.62 -370.491C1662.85 -317.699 1791.75 -240.262 1870.79 -249.733L1870.99 -248.288C1790 -238.589 1657.57 -319.182 1577.53 -372.087C1555.98 -379.086 1537.22 -389.279 1520.68 -405.52C1512.6 -413.43 1512.57 -414.229 1513.24 -414.99C1514.35 -416.245 1517.22 -414.496 1543.82 -396.506C1553.6 -389.888 1565.21 -382.053 1578.21 -373.457C1605.28 -364.709 1636.85 -360.982 1674.22 -356.57C1717.84 -351.398 1767.26 -345.578 1827.22 -330.25C1967.92 -294.308 2017.46 -221.208 2034.28 -166.249C2040.05 -147.346 2042.95 -127.416 2042.95 -107.03ZM1515.23 -413.431C1516.06 -412.366 1517.89 -410.388 1521.79 -406.585C1536.74 -391.903 1553.56 -382.243 1572.68 -375.397C1561.55 -382.775 1551.57 -389.545 1542.98 -395.365C1529.78 -404.303 1518.97 -411.605 1515.27 -413.469L1515.23 -413.431Z" fill="url(#paint4_linear_1289_6687)" style=""/>\n<path d="M2054.2 -91.4716C2054.2 -69.5261 2050.86 -47.0106 2044.22 -24.5706C2032.45 15.0607 2010.47 53.0951 1982.32 82.5334C1943.19 123.458 1869.72 167.843 1780.86 169.745C1708.46 171.266 1640.27 143.463 1583.65 89.3027C1472.61 -16.9261 1402.55 -139.128 1334.8 -257.3C1288.24 -338.502 1244.31 -415.179 1190.6 -479.228C1130.4 -550.998 1066.31 -596.942 988.82 -623.832C915.823 -649.163 813.007 -611.624 754.72 -538.371C720.448 -495.316 703.471 -442.981 705.538 -387.185C708.003 -321.158 736.352 -251.252 789.748 -179.445C851.573 -96.2643 981.784 -35.5242 1119.67 28.8292C1255.72 92.3077 1396.43 157.954 1469.55 248.094C1507.52 294.876 1529.86 348.771 1534.19 403.882C1538.37 456.939 1525.84 507.22 1497.97 549.361C1471.57 589.297 1432.61 619.305 1385.26 636.116C1332.74 654.753 1272.22 657.111 1205.35 643.039C1130.88 627.368 1069.81 592.948 1018.68 537.837C973.076 488.697 939.321 427.881 906.679 369.08C873.878 310.052 840.004 248.97 793.963 199.259C742.356 143.502 680.729 108.32 605.505 91.7374C502.768 69.0692 410.567 71.6174 331.368 99.2681C245.409 129.277 178.853 187.963 133.567 273.616C87.0493 361.55 77.1892 467.512 105.895 571.953C132.057 667.266 187.719 753.261 258.609 807.916C293.358 834.692 332.361 857.093 373.711 880.827C484.479 944.419 599.025 1010.18 634.688 1166.42C636.239 1173.19 638.187 1181.33 640.413 1190.76C655.919 1256.07 684.784 1377.59 694.883 1504.89C707.288 1661.13 687.289 1776.56 635.404 1847.91C600.615 1895.76 550.995 1924.06 487.938 1932.08L487.74 1930.64C550.36 1922.69 599.621 1894.58 634.131 1847.08C685.818 1775.99 705.738 1660.9 693.333 1505C683.234 1377.82 654.409 1256.37 638.903 1191.11C636.677 1181.67 634.728 1173.54 633.177 1166.77C597.672 1011.17 483.406 945.561 372.916 882.12C331.527 858.349 292.444 835.908 257.655 809.094C186.526 754.249 130.664 667.95 104.424 572.371C75.6382 467.588 85.5381 361.245 132.215 272.969C177.699 186.974 244.534 128.059 330.89 97.8984C410.368 70.1337 502.888 67.5853 605.903 90.2916C774.282 127.413 842.309 249.92 908.071 368.396C940.673 427.12 974.388 487.86 1019.87 536.848C1070.8 591.731 1131.59 626 1205.75 641.594C1272.34 655.59 1332.58 653.308 1384.82 634.747C1431.85 618.05 1470.58 588.231 1496.78 548.562C1524.45 506.687 1536.9 456.672 1532.76 403.995C1528.47 349.15 1506.2 295.56 1468.43 249.007C1395.55 159.133 1255.01 93.5632 1119.11 30.1607C981.067 -34.2306 850.659 -95.0854 788.635 -178.57C735.04 -250.644 706.652 -320.816 704.147 -387.147C702.04 -443.323 719.136 -495.924 753.607 -539.283C812.251 -613.03 915.863 -650.798 989.457 -625.24C1067.23 -598.236 1131.55 -552.139 1191.91 -480.141C1245.7 -415.978 1289.72 -339.225 1336.27 -257.984C1403.94 -139.927 1473.96 -17.838 1584.85 88.2765C1641.15 142.133 1708.93 169.782 1780.9 168.261C1869.28 166.397 1942.32 122.241 1981.24 81.5445C2009.23 52.2583 2031.1 14.4527 2042.79 -24.9504C2055.55 -68.0048 2056.03 -111.326 2044.14 -150.273C2027.44 -204.889 1978.14 -277.534 1838.15 -313.286C1778.27 -328.575 1728.93 -334.395 1685.36 -339.568C1654.03 -343.257 1626.71 -346.49 1602.74 -352.613C1679.47 -305.337 1796.44 -240.907 1870.91 -249.807L1871.11 -248.361C1794.77 -239.233 1674.58 -306.401 1597.77 -353.944C1572.4 -360.98 1550.81 -371.591 1532.01 -390.038C1523.74 -398.139 1523.62 -399.204 1524.29 -400.003C1525.57 -401.448 1530.46 -398.52 1557.41 -381.214C1568.74 -373.95 1582.62 -365.05 1598.36 -355.275C1623.41 -348.353 1652.16 -344.968 1685.52 -341.013C1729.13 -335.84 1778.55 -330.021 1838.51 -314.693C1979.22 -278.751 2028.75 -205.65 2045.57 -150.691C2051.34 -131.788 2054.24 -111.858 2054.24 -91.4716L2054.2 -91.4716ZM1525.88 -398.71C1526.52 -397.759 1528.31 -395.667 1533.04 -391.065C1550.34 -374.102 1570.1 -363.794 1593.04 -356.834C1579.12 -365.506 1566.76 -373.455 1556.5 -379.997C1541.47 -389.62 1529.3 -397.416 1525.88 -398.71Z" fill="url(#paint5_linear_1289_6687)" style=""/>\n<path d="M2065.45 -75.9178C2065.45 -53.9723 2062.11 -31.4559 2055.47 -9.01583C2043.7 30.6154 2021.72 68.649 1993.57 98.0872C1954.44 139.012 1880.97 183.397 1792.11 185.299C1719.71 186.82 1651.52 159.018 1594.91 104.857C1483.86 -1.37128 1413.8 -123.574 1346.05 -241.707C1299.5 -322.909 1255.56 -399.586 1201.85 -463.635C1141.65 -535.405 1077.56 -581.349 1000.07 -608.239C927.074 -633.57 824.258 -596.031 765.972 -522.778C731.7 -479.724 714.682 -427.503 716.79 -371.593C719.255 -305.566 747.603 -235.66 800.999 -163.814C862.824 -80.6335 993.035 -19.8933 1130.92 44.46C1266.97 107.939 1407.68 173.585 1480.8 263.725C1518.77 310.507 1541.11 364.401 1545.44 419.512C1549.62 472.531 1537.1 522.85 1509.22 564.991C1482.82 604.927 1443.86 634.936 1396.51 651.747C1343.99 670.383 1283.47 672.704 1216.6 658.669C1142.13 642.999 1081.06 608.578 1029.93 553.467C984.327 504.327 950.572 443.512 917.93 384.711C885.129 325.682 851.254 264.6 805.213 214.889C753.606 159.132 691.981 123.95 616.757 107.367C514.02 84.6992 421.819 87.2483 342.619 114.899C256.661 144.908 190.144 203.593 144.819 289.246C98.301 377.18 88.44 483.142 117.146 587.583C143.307 682.896 198.97 768.891 269.86 823.546C304.61 850.322 343.653 872.724 384.962 896.457C495.73 960.05 610.275 1025.81 645.939 1182.05C647.092 1187.15 648.484 1193.05 649.995 1199.63C677.627 1318.02 761.638 1678.28 639.18 1846.05C603.477 1894.96 552.585 1923.94 487.898 1932.16L487.7 1930.71C551.91 1922.54 602.444 1893.78 637.909 1845.21C759.969 1678.02 676.037 1318.18 648.484 1199.97C646.934 1193.39 645.582 1187.49 644.429 1182.4C608.924 1026.8 494.657 961.19 384.167 897.75C342.778 873.979 303.695 851.539 268.866 824.725C197.738 769.88 141.876 683.581 115.636 587.964C86.8501 483.181 96.75 376.838 143.427 288.561C188.911 202.567 255.746 143.652 342.102 113.529C421.58 85.7645 514.099 83.2163 617.114 105.922C785.493 143.044 853.52 265.55 919.281 384.026C951.884 442.75 985.6 503.49 1031.08 552.478C1082.02 607.361 1142.81 641.63 1216.96 657.224C1283.55 671.22 1343.79 668.938 1396.03 650.377C1443.07 633.68 1481.79 603.862 1507.99 564.193C1535.66 522.318 1548.11 472.265 1543.97 419.626C1539.68 364.781 1517.41 311.191 1479.64 264.638C1406.77 174.764 1266.22 109.193 1130.32 45.7907C992.279 -18.6007 861.87 -79.4545 799.807 -162.939C746.212 -235.013 717.784 -305.186 715.319 -371.517C713.252 -427.693 730.308 -480.294 764.779 -523.653C823.423 -597.4 927.035 -635.168 1000.63 -609.61C1078.4 -582.606 1142.73 -536.508 1203.08 -464.51C1256.87 -400.347 1300.89 -323.595 1347.45 -242.354C1415.12 -124.297 1485.13 -2.20807 1596.02 103.907C1652.32 157.763 1720.11 185.451 1792.07 183.892C1880.45 182.028 1953.49 137.871 1992.41 97.1745C2020.4 67.8883 2042.27 30.0827 2053.96 -9.3204C2066.72 -52.3748 2067.2 -95.6953 2055.27 -134.642C2038.57 -189.259 1989.27 -261.904 1849.28 -297.656C1789.41 -312.945 1740.06 -318.764 1696.49 -323.937C1669.61 -327.132 1645.68 -329.946 1624.29 -334.548C1698.28 -292.255 1800.82 -241.327 1870.79 -249.694L1870.99 -248.25C1799.27 -239.654 1693.82 -292.825 1619.4 -335.613C1589.42 -342.574 1564.49 -353.451 1543.14 -374.37C1534.59 -382.737 1534.43 -384.03 1535.19 -384.905C1536.62 -386.579 1542.3 -383.346 1570.85 -366.117C1584.61 -357.825 1601.31 -347.746 1619.99 -336.982C1642.5 -331.771 1667.9 -328.767 1696.69 -325.382C1740.3 -320.209 1789.72 -314.39 1849.68 -299.062C1990.39 -263.12 2039.93 -190.02 2056.74 -135.061C2062.51 -116.158 2065.41 -96.2279 2065.41 -75.8416L2065.45 -75.9178ZM1536.62 -383.916C1537.06 -383.117 1538.65 -380.988 1544.25 -375.511C1564.17 -356 1587.31 -345.312 1614.86 -338.352C1597.93 -348.164 1582.7 -357.331 1570.02 -364.975C1553.16 -375.13 1539.68 -383.27 1536.58 -383.916L1536.62 -383.916Z" fill="url(#paint6_linear_1289_6687)" style=""/>\n<path d="M2076.66 -60.3999C2076.66 -38.4543 2073.32 -15.938 2066.68 6.50211C2054.92 46.1335 2032.93 84.167 2004.78 113.605C1965.66 154.53 1892.18 198.915 1803.32 200.817C1730.92 202.376 1662.73 174.536 1606.12 120.375C1495.07 14.1467 1425.02 -108.057 1357.27 -226.19C1310.71 -307.392 1266.78 -384.068 1213.06 -448.117C1152.87 -519.887 1088.78 -565.833 1011.29 -592.723C938.288 -618.054 835.471 -580.513 777.184 -507.26C742.912 -464.206 725.936 -411.909 728.003 -356.075C730.468 -290.048 758.816 -220.143 812.212 -148.335C874.037 -65.1545 1004.25 -4.41435 1142.13 59.939C1278.19 123.418 1418.89 189.065 1492.01 279.205C1529.98 325.987 1552.32 379.881 1556.66 434.992C1560.83 488.011 1548.31 538.33 1520.44 580.471C1494.04 620.407 1455.07 650.416 1407.72 667.227C1355.2 685.863 1294.69 688.183 1227.81 674.148C1153.34 658.478 1092.27 624.096 1041.14 568.947C995.541 519.807 961.786 458.991 929.144 400.19C896.343 341.162 862.468 280.079 816.427 230.369C764.82 174.611 703.194 139.43 627.97 122.847C525.233 100.179 433.031 102.727 353.832 130.378C267.873 160.387 201.356 219.073 156.031 304.726C109.513 392.66 99.6533 498.622 128.359 603.063C154.521 698.376 210.184 784.371 281.074 839.026C315.823 865.802 354.866 888.203 396.176 911.936C506.944 975.529 621.489 1041.29 657.152 1197.53C657.868 1200.69 658.664 1204.15 659.538 1207.92C672.42 1263.86 699.178 1380.32 707.408 1504.24C717.547 1657.63 695.997 1771.88 643.277 1843.88C606.579 1894.01 554.296 1923.68 487.939 1932.12L487.74 1930.67C553.661 1922.31 605.585 1892.79 642.044 1843.04C694.526 1771.35 716.035 1657.4 705.897 1504.35C697.707 1380.55 670.949 1264.21 658.067 1208.26C657.192 1204.53 656.398 1201.07 655.682 1197.88C620.177 1042.28 505.909 976.67 395.419 913.23C354.03 889.459 314.947 867.019 280.158 840.205C209.03 785.36 153.169 699.061 126.928 603.482C98.143 498.699 108.043 392.356 154.72 304.079C200.204 218.085 267.039 159.17 353.395 129.009C432.873 101.244 525.392 98.6961 628.407 121.402C796.786 158.524 864.813 281.03 930.574 399.506C963.177 458.23 996.893 518.97 1042.38 567.958C1093.31 622.841 1154.1 657.11 1228.25 672.704C1294.85 686.7 1355.08 684.418 1407.32 665.857C1454.36 649.16 1493.08 619.342 1519.28 579.673C1546.96 537.797 1559.4 487.783 1555.27 435.068C1550.97 380.223 1528.71 326.633 1490.94 280.08C1418.06 190.206 1277.51 124.635 1141.62 61.2325C1003.57 -3.15885 873.162 -64.0136 811.099 -147.498C757.504 -219.572 729.116 -289.744 726.611 -356.075C724.504 -412.251 741.601 -464.89 776.072 -508.211C834.716 -581.959 938.327 -619.727 1011.92 -594.168C1089.69 -567.164 1154.02 -521.066 1214.37 -449.068C1268.17 -384.905 1312.18 -308.153 1358.74 -226.912C1426.41 -108.855 1496.42 13.2338 1607.31 119.348C1663.61 173.204 1731.4 200.893 1803.36 199.334C1891.75 197.47 1964.78 153.313 2003.71 112.616C2031.7 83.3302 2053.56 45.5246 2065.25 6.12137C2078.02 -36.9329 2078.49 -80.2534 2066.57 -119.2C2049.87 -173.817 2000.57 -246.462 1860.57 -282.214C1800.7 -297.503 1751.36 -303.322 1707.78 -308.495C1686.31 -311.043 1666.75 -313.364 1648.82 -316.52C1717.52 -280.959 1807.06 -242.164 1870.87 -249.809L1871.07 -248.363C1805.51 -240.528 1713.31 -281.187 1643.89 -317.433C1607.99 -324.241 1578.84 -335.004 1554.47 -358.928C1545.52 -367.676 1545.45 -369.159 1546.2 -370.072C1547.75 -371.973 1554.83 -368.284 1584.49 -351.587C1600.71 -342.46 1621.31 -330.897 1644.45 -318.802C1663.57 -315.189 1684.68 -312.679 1708.02 -309.941C1751.64 -304.806 1801.06 -298.948 1861.01 -283.621C2001.72 -247.679 2051.26 -174.578 2068.08 -119.619C2073.84 -100.716 2076.74 -80.786 2076.74 -60.3999L2076.66 -60.3999ZM1547.43 -369.121C1547.63 -368.436 1548.94 -366.345 1555.5 -359.955C1578.49 -337.401 1605.84 -326.637 1639.24 -319.829C1617.85 -331.087 1598.8 -341.813 1583.61 -350.37C1565.68 -360.449 1550.14 -369.197 1547.43 -369.121Z" fill="url(#paint7_linear_1289_6687)" style=""/>\n<path d="M2087.91 -44.8438C2087.91 -22.8983 2084.57 -0.382898 2077.93 22.0572C2066.17 61.6885 2044.18 99.7229 2016.03 129.161C1976.91 170.086 1903.43 214.471 1814.57 216.373C1742.17 217.894 1673.98 190.091 1617.37 135.93C1506.32 29.7017 1436.27 -92.5007 1368.52 -210.672C1321.96 -291.874 1278.03 -368.551 1224.31 -432.6C1164.12 -504.37 1100.03 -550.315 1022.53 -577.205C949.538 -602.536 846.721 -564.995 788.434 -491.742C754.162 -448.688 737.185 -396.467 739.253 -340.557C741.718 -274.531 770.066 -204.625 823.462 -132.779C885.287 -49.5985 1015.5 11.1417 1153.38 75.495C1289.44 138.974 1430.14 204.62 1503.26 294.76C1541.23 341.542 1563.57 395.437 1567.91 450.548C1572.08 503.567 1559.56 553.886 1531.69 596.027C1505.29 635.963 1466.32 665.971 1418.97 682.782C1366.45 701.419 1305.94 703.739 1239.06 689.704C1164.59 674.034 1103.52 639.614 1052.39 584.503C1006.79 535.363 973.035 474.546 940.393 415.746C907.591 356.717 873.717 295.635 827.677 245.925C776.07 190.167 714.443 154.986 639.219 138.403C536.482 115.735 444.281 118.283 365.082 145.934C279.123 175.981 212.606 234.629 167.281 320.282C120.763 408.216 110.903 514.178 139.609 618.619C165.77 713.932 221.432 799.927 292.323 854.582C327.072 881.358 366.115 903.759 407.424 927.492C518.193 991.085 632.739 1056.85 668.402 1213.09L668.998 1215.75C680.21 1264.85 706.451 1379.79 713.886 1502.3C723.15 1654.81 700.885 1768.95 647.648 1841.52C609.917 1892.98 556.162 1923.45 487.896 1932.16L487.698 1930.71C555.527 1922.08 608.923 1891.8 646.376 1840.72C699.414 1768.46 721.6 1654.62 712.336 1502.45C704.901 1380.1 678.66 1265.19 667.488 1216.13L666.891 1213.47C631.386 1057.87 517.119 992.265 406.629 928.824C365.24 905.053 326.157 882.612 291.368 855.798C220.24 800.953 164.378 714.654 138.137 619.075C109.352 514.292 119.252 407.949 165.929 319.672C211.413 233.678 278.248 174.763 364.604 144.602C444.082 116.838 536.602 114.289 639.617 136.996C807.996 174.117 876.023 296.624 941.784 415.1C974.387 473.824 1008.1 534.564 1053.59 583.552C1104.52 638.435 1165.31 672.703 1239.46 688.297C1306.05 702.293 1366.29 700.012 1418.53 681.451C1465.57 664.754 1504.29 634.935 1530.49 595.266C1558.17 553.391 1570.61 503.414 1566.48 450.661C1562.18 395.816 1539.92 342.226 1502.15 295.673C1429.27 205.799 1288.72 140.229 1152.82 76.8266C1014.78 12.4351 884.372 -48.4196 822.309 -131.904C768.714 -203.978 740.326 -274.151 737.821 -340.482C735.674 -396.658 752.81 -449.296 787.281 -492.617C845.925 -566.365 949.537 -604.133 1023.13 -578.574C1100.9 -551.57 1165.23 -505.473 1225.58 -433.475C1279.38 -369.312 1323.39 -292.559 1369.95 -211.318C1437.62 -93.261 1507.63 28.827 1618.52 134.941C1674.82 188.798 1742.61 216.448 1814.57 214.927C1902.96 213.063 1975.99 168.907 2014.92 128.21C2042.91 98.9242 2064.77 61.1186 2076.46 21.7155C2089.23 -21.339 2089.7 -64.6602 2077.78 -103.607C2061.08 -158.224 2011.78 -230.868 1871.78 -266.62C1811.91 -281.909 1762.57 -287.729 1718.99 -292.902C1704.24 -294.651 1690.37 -296.286 1677.32 -298.15C1693.15 -290.961 1709.73 -283.849 1726.62 -277.384C1785.91 -254.677 1834.41 -245.359 1870.87 -249.733L1871.07 -248.288C1834.37 -243.914 1785.59 -253.232 1726.07 -276.014C1707.5 -283.126 1689.29 -291 1672.08 -298.949C1628.22 -305.643 1593.79 -315.76 1565.68 -343.335C1557.21 -351.626 1556.14 -353.946 1557.09 -355.201C1558.92 -357.521 1569.06 -352.425 1598.08 -337.363C1617.73 -327.17 1643.69 -313.706 1672.55 -300.356C1687.03 -298.15 1702.53 -296.324 1719.23 -294.347C1762.85 -289.174 1812.27 -283.355 1872.22 -268.027C2012.93 -232.086 2062.47 -158.984 2079.29 -104.025C2085.05 -85.122 2087.95 -65.193 2087.95 -44.8067L2087.91 -44.8438ZM1558.25 -354.326C1558.25 -354.06 1558.64 -352.348 1566.75 -344.399C1593.47 -318.193 1626.07 -307.925 1667.23 -301.231C1640.19 -313.858 1615.94 -326.447 1597.33 -336.108C1577.45 -346.415 1560.27 -355.353 1558.25 -354.326Z" fill="url(#paint8_linear_1289_6687)" style=""/>\n<path d="M2099.17 -29.2872C2099.17 -7.34164 2095.83 15.1748 2089.19 37.6148C2077.42 77.2461 2055.43 115.28 2027.28 144.718C1988.16 185.642 1914.69 230.028 1825.82 231.929C1753.42 233.489 1685.24 205.648 1628.62 151.488C1517.57 45.2595 1447.52 -76.9431 1379.77 -195.114C1333.21 -276.317 1289.28 -352.993 1235.56 -417.043C1175.37 -488.813 1111.28 -534.757 1033.79 -561.647C960.791 -586.977 857.975 -549.439 799.688 -476.186C765.416 -433.093 748.438 -380.796 750.506 -325.001C752.971 -258.974 781.32 -189.067 834.716 -117.259C896.541 -34.0789 1026.75 26.6612 1164.64 91.0146C1300.69 154.493 1441.4 220.139 1514.51 310.28C1552.48 357.061 1574.83 410.955 1579.16 466.066C1583.3 519.086 1570.81 569.404 1542.94 611.546C1516.54 651.482 1477.58 681.491 1430.22 698.302C1377.7 716.938 1317.19 719.258 1250.31 705.224C1175.85 689.554 1114.78 655.171 1063.65 600.022C1018.04 550.882 984.289 490.066 951.647 431.266C918.846 372.237 884.971 311.154 838.93 261.444C787.323 205.686 725.697 170.505 650.473 153.922C547.736 131.254 455.535 133.803 376.336 161.453C290.377 191.462 223.821 250.148 178.535 335.8C132.017 423.735 122.157 529.697 150.863 634.138C177.025 729.451 232.687 815.446 303.577 870.1C338.326 896.876 377.369 919.279 418.679 943.012C529.447 1006.6 643.993 1072.36 679.656 1228.61C744.901 1514.62 735.478 1725.63 652.461 1838.82C613.617 1891.77 558.272 1923.15 487.938 1932.08L487.74 1930.64C557.636 1921.78 612.622 1890.59 651.228 1837.99C734.006 1725.18 743.31 1514.55 678.185 1228.95C642.68 1073.35 528.413 1007.75 417.923 944.305C376.534 920.533 337.451 898.094 302.662 871.28C231.534 816.435 175.672 730.136 149.431 634.557C120.646 529.735 130.546 423.431 177.223 335.154C222.707 249.159 289.542 190.245 375.898 160.084C455.376 132.319 547.895 129.771 650.91 152.477C819.289 189.598 887.316 312.106 953.077 430.581C985.68 489.306 1019.4 550.045 1064.88 599.033C1115.81 653.916 1176.6 688.184 1250.75 703.778C1317.35 717.775 1377.58 715.492 1429.83 696.932C1476.86 680.235 1515.59 650.417 1541.79 610.747C1569.46 568.872 1581.9 518.857 1577.77 466.143C1573.48 411.298 1551.21 357.708 1513.44 311.154C1440.56 221.28 1300.01 155.71 1164.12 92.3071C1026.08 27.8778 895.666 -32.938 833.603 -116.422C780.008 -188.497 751.62 -258.67 749.115 -325.001C747.008 -381.177 764.104 -433.816 798.575 -477.136C857.219 -550.884 960.831 -588.652 1034.42 -563.093C1112.19 -536.089 1176.52 -489.992 1236.88 -417.993C1290.67 -353.83 1334.68 -277.078 1381.24 -195.838C1448.91 -77.7806 1518.93 44.3084 1629.81 150.423C1686.11 204.279 1753.9 231.968 1825.86 230.408C1914.25 228.545 1987.29 184.387 2026.21 143.691C2054.2 114.405 2076.07 76.5992 2087.76 37.196C2100.52 -5.85836 2101 -49.1788 2089.07 -88.1256C2072.37 -142.742 2023.07 -215.387 1883.08 -251.139C1823.2 -266.429 1773.86 -272.248 1730.29 -277.42C1724.56 -278.105 1718.99 -278.752 1713.55 -279.436C1766.07 -259.697 1823.96 -244.217 1870.91 -249.808L1871.11 -248.362C1822.21 -242.505 1761.58 -259.392 1707.42 -280.197C1651.8 -287.157 1610.05 -295.449 1576.97 -327.891C1568.15 -336.525 1567.03 -339.187 1568.07 -340.556C1570.14 -343.294 1582.26 -337.704 1611.88 -323.707C1637.01 -311.841 1670.92 -295.828 1707.82 -281.642C1715.14 -280.729 1722.69 -279.816 1730.52 -278.903C1774.14 -273.769 1823.56 -267.912 1883.52 -252.584C2024.22 -216.642 2073.76 -143.54 2090.58 -88.5814C2096.34 -69.6786 2099.25 -49.7495 2099.25 -29.3634L2099.17 -29.2872ZM1569.14 -339.454C1569.14 -338.883 1569.94 -336.715 1577.97 -328.842C1609.54 -297.921 1649.26 -289.135 1701.66 -282.365C1666.83 -296.019 1634.98 -311.043 1611.09 -322.338C1590.25 -332.151 1570.57 -341.469 1569.18 -339.605C1569.18 -339.605 1569.14 -339.53 1569.14 -339.454Z" fill="url(#paint9_linear_1289_6687)" style=""/>\n<path d="M2110.38 -13.7716C2110.38 8.17399 2107.04 30.6894 2100.4 53.1294C2088.63 92.7608 2066.64 130.795 2038.49 160.233C1999.37 201.158 1925.9 245.543 1837.04 247.445C1764.63 248.966 1696.45 221.164 1639.83 167.004C1528.79 60.775 1458.73 -61.4284 1390.98 -179.6C1344.42 -260.802 1300.49 -337.478 1246.78 -401.527C1186.58 -473.297 1122.49 -519.243 1045 -546.133C972.002 -571.463 869.185 -533.923 810.898 -460.67C776.626 -417.616 759.649 -365.395 761.717 -309.485C764.182 -243.458 792.53 -173.553 845.926 -101.706C907.751 -18.5263 1037.96 42.2138 1175.85 106.529C1311.9 170.008 1452.61 235.655 1525.72 325.795C1563.69 372.577 1586.04 426.471 1590.37 481.582C1594.55 534.601 1582.02 584.92 1554.15 627.062C1527.75 666.997 1488.79 697.006 1441.43 713.817C1388.91 732.454 1328.4 734.773 1261.53 720.739C1187.06 705.069 1125.99 670.648 1074.86 615.537C1029.25 566.397 995.5 505.581 962.858 446.78C930.056 387.752 896.181 326.67 850.141 276.959C798.534 221.202 736.908 186.02 661.684 169.437C558.947 146.769 466.745 149.317 387.546 176.968C301.587 207.015 235.031 265.663 189.745 351.316C143.227 439.25 133.367 545.212 162.073 649.654C188.234 744.966 243.898 830.961 314.788 885.616C349.537 912.392 388.58 934.794 429.889 958.527C540.658 1022.12 655.203 1087.88 690.866 1244.12C712.336 1338.14 725.258 1431.14 728.32 1512.95C733.648 1655.95 709.832 1764.66 657.509 1835.93C617.472 1890.47 560.417 1922.8 487.937 1932.04L487.739 1930.6C559.822 1921.43 616.517 1889.33 656.276 1835.13C708.4 1764.12 732.136 1655.76 726.809 1513.02C723.747 1431.29 710.826 1338.41 689.396 1244.47C653.891 1088.87 539.624 1023.26 429.134 959.82C387.745 936.049 348.662 913.609 313.873 886.795C242.745 831.95 186.883 745.651 160.642 650.072C131.857 545.289 141.757 438.946 188.434 350.67C233.918 264.675 300.753 205.76 387.109 175.599C466.587 147.835 559.105 145.286 662.121 167.993C830.5 205.114 898.527 327.62 964.288 446.096C996.891 504.82 1030.61 565.561 1076.09 614.548C1127.02 669.431 1187.81 703.7 1261.96 719.294C1328.56 733.29 1388.79 731.008 1441.04 712.447C1488.07 695.751 1526.8 665.932 1553 626.263C1580.67 584.388 1593.12 534.373 1588.98 481.658C1584.69 426.813 1562.42 373.223 1524.65 326.67C1451.77 236.796 1311.22 171.225 1175.33 107.823C1037.29 43.4312 906.876 -17.4234 844.852 -100.908C791.257 -172.982 762.87 -243.154 760.365 -309.485C758.218 -365.699 775.355 -418.3 809.826 -461.621C868.47 -535.368 972.081 -573.137 1045.67 -547.578C1123.44 -520.574 1187.77 -474.476 1248.13 -402.478C1301.92 -338.315 1345.93 -261.563 1392.49 -180.322C1460.16 -62.265 1530.18 59.824 1641.06 165.939C1697.36 219.795 1765.15 247.445 1837.12 245.924C1925.5 244.06 1998.54 199.903 2037.46 159.206C2065.45 129.92 2087.32 92.1147 2099.01 52.7116C2111.77 9.65714 2112.25 -33.6633 2100.32 -72.6099C2083.62 -127.227 2034.32 -199.872 1894.33 -235.624C1876.2 -240.264 1859.02 -244.029 1842.68 -247.148C1817.79 -247.795 1791.19 -252.396 1764.91 -259.09C1756.92 -260.079 1749.17 -260.992 1741.53 -261.905C1674.26 -269.854 1625.68 -275.597 1588.18 -312.338C1578.36 -321.96 1577.89 -324.547 1578.88 -325.916C1581.19 -329.111 1594.11 -323.824 1625.76 -310.474C1660.15 -295.945 1712.11 -274.038 1765.15 -260.536C1789.01 -257.569 1814.69 -254.032 1842.84 -248.631C1852.5 -248.403 1861.89 -248.745 1870.91 -249.848L1871.11 -248.402C1864.47 -247.604 1857.63 -247.186 1850.63 -247.148C1864.71 -244.334 1879.38 -241.024 1894.73 -237.107C2035.43 -201.165 2084.97 -128.064 2101.79 -73.1049C2107.56 -54.202 2110.46 -34.2721 2110.46 -13.8858L2110.38 -13.7716ZM1778.19 -257.341C1796.36 -253.233 1814.53 -250.267 1832.03 -249.088C1813.02 -252.511 1795.17 -255.135 1778.19 -257.341ZM1579.99 -324.699C1579.99 -323.824 1581.15 -321.2 1589.22 -313.289C1626.31 -276.928 1674.7 -271.185 1741.65 -263.274C1745.87 -262.78 1750.12 -262.285 1754.46 -261.753C1704.92 -275.368 1657.29 -295.451 1625.08 -309.029C1601.86 -318.842 1581.78 -327.285 1580.07 -324.965C1580.03 -324.889 1579.99 -324.813 1579.99 -324.661L1579.99 -324.699Z" fill="url(#paint10_linear_1289_6687)" style=""/>\n<path d="M2121.63 1.78519C2121.63 23.7307 2118.29 46.2471 2111.65 68.687C2099.88 108.318 2077.9 146.352 2049.75 175.79C2010.62 216.715 1937.15 261.101 1848.29 263.003C1775.89 264.524 1707.7 236.721 1651.12 182.56C1540.08 76.3317 1470.02 -45.8708 1402.27 -164.042C1355.72 -245.244 1311.78 -321.921 1258.07 -385.97C1197.87 -457.74 1133.78 -503.684 1056.29 -530.574C983.294 -555.905 880.477 -518.366 822.19 -445.113C787.918 -402.059 770.941 -349.8 773.009 -293.928C775.474 -227.902 803.822 -157.995 857.218 -86.1487C919.043 -2.96854 1049.25 57.7716 1187.14 122.125C1323.19 185.604 1463.9 251.25 1537.02 341.39C1574.99 388.172 1597.33 442.066 1601.66 497.177C1605.84 550.158 1593.31 600.515 1565.44 642.656C1539.04 682.592 1500.08 712.601 1452.73 729.412C1400.21 748.049 1339.69 750.369 1272.82 736.334C1198.35 720.664 1137.28 686.282 1086.15 631.133C1040.55 581.993 1006.79 521.176 974.149 462.376C941.348 403.347 907.474 342.265 861.433 292.555C809.826 236.797 748.199 201.616 672.975 185.033C570.238 162.365 478.037 164.913 398.838 192.564C312.879 222.573 246.323 281.258 201.037 366.911C154.519 454.845 144.659 560.808 173.365 665.249C199.526 760.562 255.189 846.557 326.079 901.212C360.828 927.988 399.831 950.389 441.181 974.122C551.949 1037.72 666.495 1103.48 702.158 1259.72C713.649 1310.04 733.29 1410.79 735.834 1519.99C739.055 1657.4 714.523 1762.76 662.916 1833.04C621.646 1889.26 562.803 1922.61 487.977 1932.12L487.779 1930.68C562.168 1921.2 620.693 1888.08 661.684 1832.2C781.637 1668.7 721.878 1352.94 700.687 1260.06C665.182 1104.46 550.915 1038.86 440.425 975.416C399.036 951.645 359.953 929.204 325.164 902.39C254.036 847.545 198.174 761.246 171.933 665.629C143.148 560.846 153.048 454.503 199.725 366.226C245.209 280.232 312.044 221.317 398.4 191.194C477.878 163.429 570.397 160.881 673.413 183.587C841.792 220.708 909.819 343.216 975.58 461.692C1008.18 520.416 1041.9 581.156 1087.38 630.144C1138.31 685.027 1199.1 719.295 1273.25 734.889C1339.85 748.885 1400.09 746.604 1452.33 728.043C1499.36 711.346 1538.09 681.527 1564.29 641.858C1591.96 599.982 1604.41 549.93 1600.27 497.291C1595.98 442.446 1573.71 388.856 1535.94 342.303C1463.06 252.429 1322.52 186.859 1186.62 123.456C1048.58 59.0651 918.168 -1.78958 856.105 -85.274C802.51 -157.348 774.122 -227.521 771.617 -293.852C769.47 -350.028 786.606 -402.629 821.077 -445.988C879.721 -519.736 983.333 -557.504 1056.93 -531.945C1134.7 -504.941 1199.02 -458.843 1259.38 -386.845C1313.17 -322.682 1357.19 -245.929 1403.74 -164.688C1471.41 -46.6312 1541.43 75.4568 1652.32 181.571C1708.62 235.427 1776.4 263.116 1848.37 261.557C1936.75 259.693 2009.79 215.536 2048.71 174.839C2076.7 145.553 2098.57 107.748 2110.26 68.3445C2123.02 25.2901 2123.5 -18.0304 2111.57 -56.977C2094.87 -111.594 2045.57 -184.238 1905.58 -219.99C1845.7 -235.279 1796.36 -241.099 1752.79 -246.272C1685.52 -254.221 1636.93 -259.964 1599.44 -296.705C1589.02 -306.898 1588.7 -309.826 1589.74 -311.309C1592.32 -315.075 1606.99 -309.865 1639.95 -297.732C1697.92 -276.395 1794.93 -240.642 1870.87 -249.732L1871.07 -248.288C1794.73 -239.159 1697.48 -274.987 1639.39 -296.362C1614.51 -305.528 1593.04 -313.439 1591.01 -310.511C1590.49 -309.75 1591.01 -307.05 1600.51 -297.732C1637.61 -261.371 1685.99 -255.628 1752.95 -247.717C1796.56 -242.582 1845.98 -236.725 1905.94 -221.398C2046.65 -185.455 2096.18 -112.354 2113 -57.3949C2118.77 -38.492 2121.67 -18.563 2121.67 1.82316L2121.63 1.78519Z" fill="url(#paint11_linear_1289_6687)" style=""/>\n<path d="M2132.88 17.3009C2132.88 39.2465 2129.54 61.7629 2122.91 84.2029C2111.14 123.834 2089.15 161.868 2061 191.306C2021.88 232.231 1948.4 276.616 1859.54 278.518C1787.14 280.039 1718.95 252.237 1662.34 198.076C1551.29 91.8475 1481.24 -30.355 1413.49 -148.526C1366.93 -229.729 1323 -306.405 1269.28 -370.454C1209.09 -442.224 1144.99 -488.168 1067.5 -515.059C994.507 -540.389 891.691 -502.851 833.405 -429.597C799.133 -386.543 782.155 -334.246 784.223 -278.413C786.688 -212.386 815.036 -142.479 868.433 -70.6711C930.258 12.5091 1060.47 73.2494 1198.35 137.603C1334.41 201.081 1475.11 266.727 1548.23 356.868C1586.2 403.649 1608.54 457.543 1612.88 512.654C1617.05 565.674 1604.53 615.993 1576.66 658.134C1550.26 698.07 1511.29 728.079 1463.94 744.89C1411.42 763.526 1350.91 765.885 1284.03 751.812C1209.56 736.142 1148.49 701.721 1097.36 646.61C1051.76 597.47 1018.01 536.654 985.363 477.854C952.562 418.825 918.687 357.742 872.646 308.032C821.039 252.274 759.413 217.093 684.19 200.51C581.453 177.842 489.252 180.391 410.052 208.042C324.093 238.05 257.537 296.736 212.252 382.388C165.734 470.323 155.874 576.285 184.58 680.726C210.741 776.039 266.403 862.034 337.293 916.689C372.043 943.464 411.046 965.867 452.395 989.6C563.163 1053.19 677.709 1118.95 713.373 1275.2C727.726 1338.07 792.97 1660.29 668.604 1829.81C626.062 1887.81 565.27 1922.23 487.939 1932.04L487.741 1930.6C564.595 1920.82 625.028 1886.63 667.332 1828.97C791.3 1659.99 726.175 1338.29 711.862 1275.5C676.357 1119.9 562.09 1054.3 451.6 990.855C410.211 967.083 371.128 944.644 336.339 917.83C265.21 862.985 209.349 776.686 183.108 681.069C154.323 576.247 164.223 469.943 210.9 381.666C256.384 295.671 323.218 236.757 409.575 206.596C489.053 178.831 581.572 176.283 684.588 198.989C852.966 236.11 920.994 358.618 986.755 477.093C1019.36 535.818 1053.07 596.557 1098.56 645.545C1149.49 700.428 1210.28 734.696 1284.43 750.29C1351.03 764.287 1411.26 762.004 1463.5 743.444C1510.54 726.747 1549.26 696.929 1575.46 657.259C1603.14 615.384 1615.58 565.369 1611.45 512.693C1607.15 457.848 1584.89 404.258 1547.12 357.704C1474.24 267.83 1333.69 202.26 1197.79 138.857C1059.75 74.4658 929.343 13.612 867.319 -69.8725C813.724 -141.947 785.336 -212.12 782.832 -278.451C780.685 -334.627 797.82 -387.266 832.291 -430.586C890.936 -504.334 994.548 -542.101 1068.14 -516.542C1145.91 -489.538 1210.24 -443.442 1270.59 -371.443C1324.39 -307.28 1368.4 -230.528 1414.96 -149.288C1482.63 -31.2305 1552.64 90.8585 1663.53 196.973C1719.83 250.829 1787.62 278.48 1859.58 276.958C1947.97 275.095 2021 230.937 2059.93 190.241C2087.92 160.955 2109.78 123.149 2121.47 83.746C2134.24 40.6917 2134.71 -2.62875 2122.79 -41.5755C2106.09 -96.1922 2056.79 -168.837 1916.79 -204.588C1856.92 -219.878 1807.58 -225.698 1764 -230.87C1696.73 -238.819 1648.1 -244.563 1610.65 -281.303C1601.94 -289.861 1598.92 -294.577 1600.55 -297.125C1603.45 -301.575 1620.15 -296.631 1654.59 -285.943C1708.38 -269.208 1798.43 -241.253 1870.91 -249.925L1871.11 -248.48C1798.27 -239.77 1708.06 -267.801 1654.11 -284.574C1626.24 -293.245 1604.25 -300.054 1601.86 -296.403C1601.07 -295.186 1602.18 -291.801 1611.76 -282.406C1648.86 -246.046 1697.25 -240.302 1764.2 -232.391C1807.82 -227.219 1857.24 -221.4 1917.19 -206.072C2057.9 -170.13 2107.44 -97.0285 2124.26 -42.0695C2130.02 -23.1666 2132.92 -3.23751 2132.92 17.1486L2132.88 17.3009Z" fill="url(#paint12_linear_1289_6687)" style=""/>\n<path d="M2144.09 32.8586C2144.09 54.8041 2140.76 77.3195 2134.12 99.7596C2122.35 139.391 2100.36 177.425 2072.21 206.864C2033.09 247.788 1959.61 292.173 1870.75 294.075C1798.35 295.596 1730.17 267.794 1673.55 213.634C1562.5 107.405 1492.45 -14.7983 1424.7 -132.97C1378.14 -214.172 1334.21 -290.848 1280.49 -354.897C1220.3 -426.667 1156.21 -472.612 1078.72 -499.502C1005.72 -524.832 902.902 -487.293 844.616 -414.04C810.383 -370.985 793.366 -318.765 795.433 -262.855C797.899 -196.828 826.246 -126.922 879.643 -55.0762C941.468 28.1038 1071.68 88.8441 1209.56 153.197C1345.62 216.676 1486.32 282.323 1559.44 372.463C1597.41 419.245 1619.75 473.139 1624.09 528.25C1628.26 581.307 1615.74 631.588 1587.87 673.73C1561.47 713.665 1522.5 743.674 1475.15 760.485C1422.63 779.122 1362.12 781.441 1295.24 767.407C1220.77 751.737 1159.7 717.316 1108.57 662.205C1062.97 613.066 1029.22 552.249 996.574 493.448C963.773 434.42 929.898 373.338 883.857 323.628C832.25 267.87 770.624 232.688 695.4 216.106C592.664 193.437 500.462 195.986 421.262 223.636C335.303 253.645 268.747 312.332 223.462 397.984C176.944 485.918 167.084 591.881 195.79 696.36C221.951 791.673 277.614 877.667 348.504 932.322C383.253 959.098 422.257 981.5 463.606 1005.23C574.374 1068.83 688.919 1134.59 724.583 1290.83C730.944 1318.78 751.62 1418.81 751.063 1533.75C750.347 1659.91 724.624 1758.42 674.647 1826.57C630.713 1886.48 567.893 1921.96 487.938 1932.16L487.74 1930.71C567.258 1920.59 629.719 1885.3 673.374 1825.74C723.192 1757.85 748.796 1659.61 749.512 1533.75C750.188 1419 729.434 1319.05 723.073 1291.13C687.568 1135.54 573.301 1069.93 462.811 1006.49C421.422 982.717 382.339 960.277 347.55 933.463C276.421 878.618 220.56 792.32 194.319 696.74C165.534 591.957 175.434 485.613 222.111 397.337C267.595 311.342 334.429 252.428 420.786 222.306C500.264 194.541 592.782 191.993 695.798 214.699C864.176 251.82 932.204 374.327 997.965 492.802C1030.57 551.527 1064.28 612.267 1109.77 661.254C1160.7 716.137 1221.49 750.406 1295.64 766C1362.24 779.996 1422.47 777.714 1474.71 759.154C1521.75 742.457 1560.47 712.638 1586.68 672.969C1614.35 631.094 1626.79 581.041 1622.66 528.402C1618.36 473.557 1596.1 419.968 1558.33 373.414C1485.45 283.54 1344.9 217.97 1209.01 154.567C1070.96 90.1756 940.553 29.3209 878.489 -54.1635C824.894 -126.238 796.507 -196.41 794.002 -262.741C791.855 -318.917 808.992 -371.518 843.463 -414.876C902.107 -488.624 1005.72 -526.392 1079.31 -500.833C1157.08 -473.829 1221.41 -427.732 1281.76 -355.734C1335.56 -291.571 1379.57 -214.818 1426.13 -133.578C1493.8 -15.5206 1563.81 106.568 1674.7 212.683C1731 266.539 1798.79 294.228 1870.75 292.668C1959.14 290.805 2032.17 246.647 2071.1 205.951C2099.09 176.665 2120.96 138.859 2132.64 99.4558C2145.41 56.4015 2145.88 13.0811 2133.96 -25.8656C2117.26 -80.4823 2067.96 -153.128 1927.97 -188.879C1868.09 -204.169 1818.75 -209.988 1775.17 -215.16C1707.9 -223.109 1659.32 -228.853 1621.82 -265.593C1612.72 -274.531 1609.42 -279.818 1611.25 -282.785C1614.63 -288.376 1635.38 -283.165 1669.73 -274.608C1722.49 -261.448 1802.25 -241.518 1870.79 -249.733L1870.99 -248.289C1802.13 -240.035 1722.21 -260.002 1669.33 -273.2C1639.16 -280.731 1615.34 -286.664 1612.56 -282.062C1611.21 -279.856 1614.71 -274.683 1622.9 -266.62C1659.99 -230.26 1708.38 -224.517 1775.33 -216.606C1818.95 -211.433 1868.37 -205.615 1928.32 -190.287C2069.03 -154.345 2118.57 -81.2434 2135.39 -26.2844C2141.15 -7.38156 2144.05 12.5485 2144.05 32.9346L2144.09 32.8586Z" fill="url(#paint13_linear_1289_6687)" style=""/>\n<path d="M2155.35 48.4156C2155.35 70.3611 2152.01 92.8775 2145.37 115.318C2133.6 154.949 2111.61 192.982 2083.46 222.421C2044.34 263.345 1970.86 307.731 1882 309.633C1809.6 311.154 1741.42 283.351 1684.8 229.191C1573.75 122.962 1503.7 0.759708 1435.95 -117.412C1389.39 -198.614 1345.46 -275.291 1291.74 -339.34C1231.55 -411.11 1167.46 -457.055 1089.97 -483.945C1016.97 -509.275 914.152 -471.736 855.865 -398.483C821.593 -355.39 804.617 -303.094 806.684 -247.298C809.149 -181.271 837.497 -111.364 890.893 -39.5563C952.718 43.6237 1082.93 104.364 1220.81 168.717C1356.87 232.196 1497.57 297.842 1570.69 387.982C1608.66 434.764 1631 488.658 1635.34 543.769C1639.51 596.826 1626.99 647.107 1599.12 689.249C1572.72 729.184 1533.75 759.193 1486.4 776.004C1433.88 794.641 1373.37 796.999 1306.49 782.927C1232.02 767.257 1170.96 732.836 1119.83 677.725C1074.22 628.585 1040.47 567.769 1007.82 508.968C975.023 449.94 941.149 388.858 895.108 339.147C843.501 283.39 781.874 248.208 706.65 231.625C603.913 208.957 511.713 211.505 432.513 239.156C346.554 269.165 279.998 327.851 234.712 413.503C188.194 501.437 178.334 607.4 207.04 711.842C233.202 807.154 288.864 893.149 359.754 947.804C394.503 974.58 433.507 996.981 474.857 1020.71C585.625 1084.31 700.17 1150.07 735.834 1306.31C741.837 1332.63 761.24 1427.33 758.894 1540.49C756.389 1660.98 730.188 1756.02 681.086 1822.96C635.681 1884.84 570.715 1921.55 487.937 1932.08L487.739 1930.64C570.079 1920.18 634.687 1883.67 679.813 1822.13C728.756 1755.42 754.838 1660.63 757.343 1540.45C759.211 1450.65 746.688 1360.78 734.323 1306.62C698.819 1151.02 584.551 1085.41 474.061 1021.97C432.672 998.199 393.589 975.758 358.8 948.944C287.671 894.099 231.81 807.8 205.569 712.221C176.783 607.438 186.684 501.095 233.361 412.819C278.845 326.824 345.68 267.909 432.036 237.749C511.514 209.984 604.033 207.435 707.048 230.142C875.427 267.263 943.455 389.77 1009.22 508.246C1041.82 566.97 1075.53 627.711 1121.02 676.698C1171.95 731.581 1232.74 765.85 1306.89 781.444C1373.49 795.44 1433.72 793.158 1485.96 774.597C1533 757.9 1571.72 728.081 1597.93 688.412C1625.6 646.537 1638.04 596.522 1633.91 543.807C1629.61 488.962 1607.35 435.372 1569.58 388.819C1496.7 298.945 1356.15 233.375 1220.26 169.973C1082.21 105.581 951.804 44.7267 889.78 -38.7577C836.185 -110.832 807.797 -181.005 805.292 -247.336C803.185 -303.512 820.281 -356.113 854.752 -399.471C913.396 -473.219 1017.01 -510.987 1090.6 -485.429C1168.37 -458.424 1232.7 -412.327 1293.05 -340.329C1346.85 -276.166 1390.86 -199.412 1437.42 -118.172C1505.09 -0.114926 1575.1 121.973 1685.99 228.088C1742.29 281.944 1810.08 309.594 1882.04 308.073C1970.43 306.209 2043.46 262.053 2082.39 221.356C2110.38 192.07 2132.24 154.265 2143.93 114.862C2156.7 71.8072 2157.17 28.4859 2145.25 -10.4608C2128.55 -65.0775 2079.25 -137.722 1939.26 -173.473C1879.38 -188.763 1830.04 -194.583 1786.46 -199.756C1719.19 -207.705 1670.56 -213.448 1633.11 -250.189C1623.45 -259.659 1620.03 -265.478 1622.02 -268.977C1625.84 -275.709 1649.73 -271.296 1685.95 -264.565C1736.96 -255.132 1806.82 -242.163 1870.87 -249.846L1871.07 -248.4C1806.78 -240.717 1736.8 -253.687 1685.67 -263.158C1652.67 -269.281 1626.63 -274.111 1623.37 -268.292C1621.82 -265.515 1625.48 -259.772 1634.19 -251.215C1671.28 -214.854 1719.67 -209.111 1786.62 -201.201C1830.24 -196.028 1879.66 -190.209 1939.61 -174.881C2080.32 -138.939 2129.86 -65.8376 2146.68 -10.8786C2152.44 8.02421 2155.35 27.9541 2155.35 48.3404L2155.35 48.4156Z" fill="url(#paint14_linear_1289_6687)" style=""/>\n<path d="M2166.6 63.9328C2166.6 85.8783 2163.26 108.395 2156.62 130.835C2144.85 170.466 2122.86 208.5 2094.71 237.938C2055.59 278.862 1982.12 323.248 1893.25 325.149C1820.85 326.671 1752.67 298.868 1696.05 244.708C1585 138.479 1514.95 16.2759 1447.2 -101.857C1400.64 -183.06 1356.71 -259.735 1302.99 -323.784C1242.8 -395.554 1178.71 -441.5 1101.22 -468.389C1028.22 -493.72 925.403 -456.181 867.117 -382.927C832.844 -339.835 815.827 -287.538 817.934 -231.743C820.399 -165.716 848.748 -95.809 902.144 -23.963C963.969 59.2171 1094.18 119.957 1232.06 184.311C1368.12 247.789 1508.83 313.435 1581.94 403.576C1619.91 450.357 1642.26 504.251 1646.59 559.362C1650.72 612.382 1638.24 662.7 1610.37 704.842C1583.97 744.778 1545.01 774.786 1497.65 791.597C1445.13 810.234 1384.62 812.554 1317.74 798.52C1243.28 782.85 1182.21 748.429 1131.08 693.318C1085.47 644.178 1051.72 583.362 1019.07 524.562C986.274 465.533 952.399 404.45 906.358 354.74C854.751 298.982 793.125 263.801 717.901 247.218C615.164 224.55 522.964 227.098 443.764 254.749C357.805 284.757 291.249 343.444 245.964 429.096C199.446 517.031 189.586 622.993 218.292 727.472C244.453 822.785 300.115 908.78 371.005 963.434C405.754 990.21 444.797 1012.61 486.107 1036.35C596.875 1099.94 711.421 1165.7 747.085 1321.94C758.774 1373.1 770.065 1459.21 766.885 1547.33C762.71 1662.12 736.151 1753.63 687.963 1819.31C641.008 1883.28 573.735 1921.28 487.936 1932.16L487.738 1930.71C573.06 1919.87 640.013 1882.11 686.69 1818.47C734.679 1753.02 761.159 1661.81 765.334 1547.29C768.554 1459.28 757.223 1373.36 745.573 1322.28C710.069 1166.69 595.802 1101.08 485.312 1037.64C443.923 1013.87 404.84 991.428 370.051 964.614C298.922 909.769 243.061 823.47 216.82 727.891C188.035 623.107 197.935 516.765 244.611 428.488C290.096 342.493 356.93 283.579 443.287 253.456C522.765 225.691 615.284 223.143 718.299 245.849C886.678 282.97 954.706 405.477 1020.47 523.953C1053.07 582.677 1086.78 643.417 1132.27 692.405C1183.2 747.288 1243.99 781.556 1318.14 797.15C1384.74 811.147 1444.97 808.865 1497.22 790.304C1544.25 773.607 1582.98 743.789 1609.18 704.12C1636.85 662.244 1649.29 612.23 1645.16 559.553C1640.86 504.708 1618.6 451.118 1580.83 404.565C1507.95 314.69 1367.4 249.12 1231.51 185.717C1093.46 121.326 963.055 60.4723 900.991 -23.0121C847.396 -95.0863 818.969 -165.259 816.504 -231.59C814.436 -287.766 831.492 -340.367 865.963 -383.726C924.608 -457.474 1028.22 -495.242 1101.81 -469.683C1179.58 -442.679 1243.91 -396.581 1304.27 -324.583C1358.06 -260.42 1402.07 -183.668 1448.63 -102.427C1516.3 15.6298 1586.32 137.719 1697.2 243.833C1753.5 297.689 1821.29 325.378 1893.25 323.819C1981.64 321.955 2054.67 277.797 2093.6 237.101C2121.59 207.815 2143.46 170.009 2155.15 130.606C2167.91 87.5519 2168.39 44.2315 2156.46 5.28483C2139.76 -49.3319 2090.46 -121.977 1950.47 -157.729C1890.59 -173.019 1841.25 -178.837 1797.67 -184.01C1730.4 -191.959 1681.82 -197.702 1644.32 -234.443C1634.22 -244.37 1630.53 -250.911 1632.67 -255.095C1636.97 -263.348 1663.45 -260.23 1703.56 -255.476C1749.41 -250.075 1812.15 -242.62 1870.83 -249.657L1871.03 -248.212C1812.15 -241.175 1749.29 -248.591 1703.37 -254.03C1665.32 -258.518 1637.8 -261.789 1634.03 -254.449C1632.24 -250.95 1635.93 -244.75 1645.4 -235.47C1682.49 -199.109 1730.88 -193.367 1797.83 -185.456C1841.45 -180.283 1890.87 -174.463 1950.82 -159.136C2091.53 -123.194 2141.07 -50.093 2157.89 4.866C2163.65 23.7688 2166.56 43.6989 2166.56 64.085L2166.6 63.9328Z" fill="url(#paint15_linear_1289_6687)" style=""/>\n<path d="M2177.81 79.4893C2177.81 101.435 2174.47 123.95 2167.83 146.39C2156.06 186.022 2134.08 224.056 2105.93 253.494C2066.81 294.419 1993.33 338.804 1904.47 340.706C1832.07 342.265 1763.88 314.425 1707.27 260.265C1596.22 154.036 1526.16 31.8325 1458.41 -86.3007C1411.86 -167.503 1367.92 -244.179 1314.21 -308.228C1254.01 -379.998 1189.92 -425.943 1112.43 -452.833C1039.43 -478.163 936.619 -440.624 878.332 -367.371C844.1 -324.316 827.083 -272.096 829.15 -216.186C831.615 -150.159 859.963 -80.2534 913.359 -8.44547C975.184 74.7347 1105.39 135.475 1243.28 199.828C1379.33 263.307 1520.04 328.954 1593.16 419.094C1631.13 465.876 1653.47 519.77 1657.8 574.881C1661.94 627.9 1649.46 678.219 1621.58 720.36C1595.18 760.296 1556.22 790.305 1508.87 807.116C1456.35 825.753 1395.83 828.072 1328.96 814.038C1254.49 798.368 1193.42 763.985 1142.29 708.836C1096.69 659.696 1062.93 598.88 1030.29 540.079C997.49 481.051 963.615 419.969 917.574 370.258C865.967 314.501 804.341 279.319 729.117 262.736C626.38 240.068 534.179 242.616 454.98 270.267C369.021 300.276 302.504 358.962 257.179 444.615C210.661 532.549 200.8 638.511 229.506 742.952C255.668 838.265 311.331 924.26 382.221 978.915C416.97 1005.69 456.013 1028.09 497.323 1051.83C608.091 1115.42 722.636 1181.18 758.299 1337.42C781.877 1440.84 799.053 1673.79 695.282 1815.28C646.697 1881.5 576.959 1920.79 487.939 1932.12L487.741 1930.68C576.284 1919.42 645.703 1880.32 694.01 1814.44C797.502 1673.38 780.326 1440.95 756.789 1337.76C721.284 1182.17 607.018 1116.56 496.528 1053.12C455.139 1029.35 416.056 1006.91 381.227 980.094C310.098 925.249 254.237 838.95 227.996 743.371C199.21 638.588 209.11 532.244 255.787 443.968C301.271 357.973 368.106 299.059 454.462 268.898C533.94 241.134 626.459 238.585 729.474 261.292C897.853 298.413 965.881 420.919 1031.64 539.395C1064.24 598.119 1097.96 658.86 1143.44 707.847C1194.38 762.73 1255.17 796.999 1329.32 812.593C1395.91 826.589 1456.15 824.307 1508.39 805.746C1555.43 789.05 1594.15 759.231 1620.35 719.562C1648.02 677.687 1660.47 627.672 1656.33 574.995C1652.04 520.15 1629.78 466.56 1592 420.007C1519.13 330.133 1378.58 264.562 1242.68 201.16C1104.64 136.768 974.231 75.9137 912.207 -7.57071C858.612 -79.645 830.224 -149.817 827.719 -216.148C825.612 -272.324 842.708 -324.925 877.179 -368.284C935.823 -442.031 1039.44 -479.799 1113.03 -454.241C1190.8 -427.237 1255.13 -381.14 1315.48 -309.142C1369.27 -244.979 1413.29 -168.225 1459.85 -86.9852C1527.52 31.0721 1597.53 153.161 1708.42 259.276C1764.72 313.132 1832.51 340.82 1904.47 339.261C1992.85 337.397 2065.89 293.24 2104.81 252.543C2132.8 223.257 2154.67 185.452 2166.36 146.049C2179.12 102.994 2179.6 59.6739 2167.71 20.7271C2151.01 -33.8896 2101.71 -106.535 1961.72 -142.286C1901.85 -157.576 1852.5 -163.395 1808.93 -168.568C1741.66 -176.517 1693.03 -182.26 1655.58 -219.001C1644.8 -229.536 1640.91 -236.801 1643.29 -241.821C1648.14 -252.09 1678.16 -250.569 1723.61 -248.287C1765.99 -246.158 1818.75 -243.495 1870.83 -249.732L1871.03 -248.287C1818.79 -242.05 1765.99 -244.712 1723.53 -246.842C1680.31 -249.01 1649.1 -250.569 1644.68 -241.251C1642.62 -236.915 1646.55 -229.954 1656.65 -220.028C1693.75 -183.667 1742.13 -177.924 1809.09 -170.013C1852.7 -164.879 1902.12 -159.022 1962.08 -143.694C2102.79 -107.752 2152.33 -34.6506 2169.14 20.3084C2174.91 39.2112 2177.81 59.1411 2177.81 79.5274L2177.81 79.4893Z" fill="url(#paint16_linear_1289_6687)" style=""/>\n<path d="M2189.06 95.0458C2189.06 116.991 2185.72 139.508 2179.08 161.948C2167.31 201.579 2145.33 239.613 2117.18 269.051C2078.06 309.975 2004.58 354.361 1915.72 356.263C1843.32 357.785 1775.13 329.981 1718.52 275.821C1607.47 169.592 1537.41 47.3898 1469.67 -70.7814C1423.11 -151.984 1379.17 -228.66 1325.46 -292.71C1265.27 -364.48 1201.17 -410.425 1123.68 -437.314C1050.69 -462.645 947.869 -425.106 889.583 -351.852C855.311 -308.798 838.334 -256.577 840.401 -200.668C842.866 -134.641 871.214 -64.734 924.611 7.11191C986.436 90.2921 1116.65 151.032 1254.53 215.386C1390.58 278.864 1531.29 344.51 1604.41 434.651C1642.38 481.432 1664.72 535.326 1669.06 590.437C1673.19 643.456 1660.71 693.775 1632.84 735.917C1606.44 775.852 1567.47 805.862 1520.12 822.672C1467.6 841.309 1407.08 843.629 1340.21 829.595C1265.74 813.925 1204.67 779.543 1153.54 724.394C1107.94 675.254 1074.18 614.437 1041.54 555.637C1008.74 496.608 974.866 435.526 928.825 385.816C877.218 330.058 815.591 294.877 740.367 278.294C637.63 255.626 545.43 258.174 466.23 285.824C380.271 315.871 313.755 374.519 268.43 460.171C221.912 548.106 212.052 654.069 240.758 758.51C266.919 853.823 322.581 939.817 393.471 994.471C428.22 1021.25 467.264 1043.65 508.574 1067.38C619.342 1130.98 733.887 1196.74 769.551 1352.98C779.968 1398.62 789.033 1477.12 783.307 1560.57C776.31 1662.5 748.558 1749.1 703.114 1811.06C652.819 1879.63 580.418 1920.33 487.938 1932.08L487.74 1930.64C579.782 1918.92 651.785 1878.42 701.841 1810.22C747.127 1748.49 774.76 1662.12 781.757 1560.45C787.482 1477.12 778.418 1398.81 768.041 1353.28C732.536 1197.69 618.268 1132.08 507.778 1068.64C466.389 1044.87 427.306 1022.43 392.517 995.613C321.388 940.768 265.528 854.469 239.287 758.89C210.541 654.106 220.401 547.764 267.078 459.487C312.563 373.492 379.397 314.578 465.753 284.417C545.232 256.652 637.75 254.104 740.765 276.81C909.144 313.931 977.172 436.439 1042.93 554.914C1075.54 613.639 1109.25 674.379 1154.74 723.367C1205.67 778.249 1266.46 812.517 1340.61 828.111C1407.2 842.107 1467.44 839.826 1519.68 821.266C1566.72 804.569 1605.44 774.75 1631.64 735.08C1659.32 693.205 1671.76 643.19 1667.63 590.513C1663.33 535.669 1641.07 482.079 1603.29 435.525C1530.42 345.651 1389.87 280.081 1253.97 216.678C1115.93 152.287 985.521 91.433 923.457 7.94858C869.862 -64.1256 841.475 -134.299 838.97 -200.63C836.862 -256.806 853.959 -309.445 888.43 -352.765C947.074 -426.513 1050.69 -464.28 1124.28 -438.721C1202.05 -411.717 1266.38 -365.62 1326.73 -293.622C1380.53 -229.459 1424.54 -152.706 1471.1 -71.4658C1538.77 46.5915 1608.78 168.68 1719.67 274.794C1775.97 328.65 1843.76 356.301 1915.72 354.779C2004.1 352.916 2077.14 308.758 2116.07 268.062C2144.06 238.776 2165.92 200.97 2177.61 161.567C2190.37 118.513 2190.85 75.1922 2178.92 36.2455C2162.23 -18.3712 2112.92 -91.0153 1972.93 -126.767C1913.06 -142.057 1863.72 -147.877 1820.14 -153.049C1752.87 -160.998 1704.28 -166.742 1666.79 -203.482C1655.46 -214.588 1651.2 -222.879 1653.79 -228.888C1659.39 -241.896 1696.49 -242.505 1747.86 -243.304C1783.24 -243.874 1827.26 -244.558 1870.79 -249.769L1870.99 -248.323C1827.34 -243.113 1783.28 -242.39 1747.86 -241.858C1698.99 -241.097 1660.39 -240.488 1655.18 -228.356C1652.87 -222.955 1657.01 -215.159 1667.82 -204.547C1704.92 -168.187 1753.31 -162.443 1820.26 -154.532C1863.87 -149.359 1913.29 -143.541 1973.25 -128.213C2113.96 -92.271 2163.5 -19.1694 2180.32 35.7896C2186.08 54.6924 2188.98 74.6215 2188.98 95.0077L2189.06 95.0458Z" fill="url(#paint17_linear_1289_6687)" style=""/>\n<path d="M2200.31 110.564C2200.31 132.509 2196.97 155.026 2190.33 177.466C2178.56 217.097 2156.58 255.131 2128.43 284.569C2089.31 325.493 2015.83 369.879 1926.97 371.78C1854.57 373.34 1786.38 345.499 1729.77 291.339C1618.72 185.11 1548.66 62.9068 1480.91 -55.2645C1434.36 -136.467 1390.42 -213.143 1336.71 -277.192C1276.51 -348.962 1212.42 -394.907 1134.93 -421.797C1061.94 -447.127 959.119 -409.588 900.833 -336.335C866.56 -293.28 849.583 -241.022 851.65 -185.15C854.115 -119.123 882.464 -49.2162 935.86 22.5918C997.686 105.772 1127.9 166.512 1265.78 230.865C1401.83 294.344 1542.54 359.99 1615.66 450.13C1653.63 496.912 1675.97 550.806 1680.31 605.917C1684.44 658.936 1671.96 709.255 1644.09 751.397C1617.69 791.332 1578.72 821.341 1531.37 838.152C1478.85 856.789 1418.33 859.109 1351.46 845.075C1276.99 829.405 1215.92 795.022 1164.79 739.873C1119.19 690.733 1085.43 629.917 1052.79 571.117C1019.99 512.088 986.116 451.005 940.075 401.295C888.468 345.537 826.841 310.356 751.617 293.773C648.88 271.104 556.68 273.653 477.48 301.303C391.521 331.312 325.005 389.999 279.68 475.651C233.162 563.585 223.302 669.548 252.008 773.989C278.169 869.302 333.831 955.297 404.721 1009.95C439.47 1036.73 478.513 1059.13 519.823 1082.86C630.591 1146.46 745.137 1212.22 780.801 1368.46C790.621 1411.59 798.692 1486.4 791.774 1567.07C783.544 1663.34 755.793 1746.14 711.462 1806.57C659.338 1877.62 584.113 1919.84 487.936 1932.08L487.738 1930.64C583.478 1918.47 658.344 1876.44 710.229 1805.73C754.401 1745.53 782.073 1662.99 790.263 1566.96C797.141 1486.44 789.11 1411.78 779.29 1368.8C743.785 1213.2 629.518 1147.6 519.028 1084.16C477.639 1060.38 438.556 1037.94 403.767 1011.13C332.638 956.286 276.777 869.987 250.536 774.408C221.79 669.624 231.651 563.281 278.327 475.005C323.812 389.01 390.646 330.096 477.002 299.935C556.481 272.17 649 269.622 752.015 292.328C920.394 329.449 988.422 451.956 1054.18 570.431C1086.79 629.156 1120.5 689.896 1165.98 738.884C1216.92 793.766 1277.71 828.035 1351.86 843.629C1418.45 857.626 1478.69 855.343 1530.93 836.783C1577.97 820.086 1616.69 790.268 1642.89 750.598C1670.56 708.723 1683.01 658.708 1678.87 605.993C1674.58 551.148 1652.32 497.559 1614.54 451.005C1541.67 361.131 1401.12 295.56 1265.22 232.158C1127.18 167.729 996.771 106.913 934.707 23.4284C881.112 -48.6459 852.724 -118.819 850.22 -185.15C848.073 -241.326 865.209 -293.927 899.679 -337.285C958.324 -411.033 1061.94 -448.801 1135.53 -423.242C1213.3 -396.238 1277.63 -350.141 1337.98 -278.143C1391.78 -213.979 1435.79 -137.227 1482.35 -55.9869C1550.02 62.0704 1620.03 184.159 1730.92 290.274C1787.22 344.13 1855.01 371.819 1926.97 370.259C2015.35 368.396 2088.39 324.238 2127.31 283.542C2155.31 254.256 2177.17 216.45 2188.86 177.047C2201.62 133.992 2202.1 90.672 2190.17 51.7254C2173.48 -2.89132 2124.17 -75.5365 1984.18 -111.288C1924.31 -126.578 1874.97 -132.397 1831.39 -137.569C1764.12 -145.519 1715.49 -151.262 1678.04 -188.003C1665.91 -199.869 1661.42 -209.187 1664.28 -216.452C1671 -233.529 1716.96 -236.951 1780.58 -241.668C1808.05 -243.722 1839.14 -246.042 1870.87 -249.807L1871.07 -248.362C1839.34 -244.558 1808.21 -242.239 1780.74 -240.185C1720.06 -235.659 1672.12 -232.084 1665.75 -215.92C1663.13 -209.264 1667.5 -200.44 1679.19 -188.991C1716.29 -152.631 1764.67 -146.887 1831.63 -138.976C1875.24 -133.842 1924.66 -127.985 1984.62 -112.657C2125.33 -76.715 2174.87 -3.61434 2191.68 51.3446C2197.45 70.2475 2200.35 90.1775 2200.35 110.564L2200.31 110.564Z" fill="url(#paint18_linear_1289_6687)" style=""/>\n<path d="M2211.53 126.119C2211.53 148.065 2208.19 170.58 2201.55 193.02C2189.78 232.651 2167.79 270.686 2139.64 300.124C2100.52 341.049 2027.05 385.434 1938.18 387.335C1865.78 388.857 1797.6 361.054 1740.98 306.894C1629.93 200.666 1559.88 78.4622 1492.13 -39.7092C1445.57 -120.911 1401.64 -197.587 1347.92 -261.636C1287.73 -333.406 1223.64 -379.351 1146.15 -406.241C1073.15 -431.572 970.334 -394.033 912.048 -320.779C877.775 -277.725 860.798 -225.504 862.865 -169.595C865.33 -103.568 893.678 -33.6618 947.074 38.1843C1008.9 121.364 1139.11 182.105 1276.99 246.458C1413.05 309.936 1553.76 375.583 1626.87 465.724C1664.84 512.506 1687.19 566.399 1691.52 621.51C1695.7 674.53 1683.17 724.849 1655.3 766.99C1628.9 806.926 1589.94 836.934 1542.58 853.745C1490.06 872.381 1429.55 874.702 1362.67 860.667C1288.21 844.997 1227.14 810.615 1176.01 755.466C1130.4 706.326 1096.65 645.509 1064.01 586.709C1031.2 527.68 997.33 466.598 951.289 416.888C899.682 361.13 838.056 325.949 762.832 309.366C660.095 286.698 567.895 289.246 488.695 316.897C402.736 346.943 336.18 405.592 290.895 491.245C244.377 579.179 234.516 685.141 263.222 789.582C289.383 884.895 345.046 970.89 415.936 1025.54C450.685 1052.32 489.728 1074.72 531.038 1098.46C641.806 1162.05 756.351 1227.81 792.015 1384.05C801.318 1424.79 808.396 1495.99 800.444 1573.61C791.18 1664.21 763.469 1743.17 720.41 1801.89C666.378 1875.56 588.131 1919.38 487.939 1932.12L487.741 1930.68C587.496 1918.01 665.384 1874.38 719.177 1801.06C823.306 1659.11 806.01 1452.13 790.544 1384.39C755.04 1228.8 640.773 1163.19 530.283 1099.75C488.894 1075.98 449.811 1053.54 415.022 1026.72C343.893 971.879 288.032 885.58 261.791 790.001C233.005 685.179 242.905 578.874 289.582 490.597C335.066 404.603 401.901 345.689 488.257 315.528C567.735 287.763 660.254 285.215 763.269 307.921C931.648 345.042 999.676 467.549 1065.44 586.025C1098.04 644.749 1131.76 705.489 1177.24 754.477C1228.17 809.36 1288.96 843.628 1363.11 859.222C1429.71 873.219 1489.94 870.937 1542.19 852.376C1589.22 835.679 1627.95 805.861 1654.15 766.192C1681.82 724.316 1694.26 674.302 1690.13 621.587C1685.84 566.742 1663.57 513.152 1625.8 466.599C1552.92 376.724 1412.37 311.154 1276.48 247.751C1138.43 183.36 1008.03 122.505 946.002 39.0208C892.407 -33.0534 864.019 -103.225 861.514 -169.556C859.367 -225.771 876.503 -278.371 910.974 -321.692C969.618 -395.44 1073.23 -433.208 1146.82 -407.649C1224.59 -380.645 1288.92 -334.548 1349.28 -262.55C1403.07 -198.387 1447.08 -121.634 1493.64 -40.3935C1561.31 77.6638 1631.33 199.753 1742.21 305.867C1798.51 359.723 1866.3 387.374 1938.26 385.853C2026.65 383.989 2099.69 339.831 2138.61 299.135C2166.6 269.849 2188.47 232.043 2200.16 192.64C2212.92 149.586 2213.4 106.265 2201.47 67.3188C2184.77 12.7021 2135.47 -59.9431 1995.48 -95.6949C1935.6 -110.985 1886.26 -116.803 1842.68 -121.976C1775.41 -129.925 1726.83 -135.668 1689.33 -172.409C1676.25 -185.226 1671.48 -195.8 1674.74 -204.624C1683.49 -228.281 1749.77 -235.849 1833.7 -245.472C1845.78 -246.841 1858.23 -248.287 1870.91 -249.808L1871.11 -248.363C1858.43 -246.841 1845.98 -245.434 1833.9 -244.027C1750.52 -234.481 1684.64 -226.95 1676.21 -204.168C1673.15 -195.876 1677.84 -185.835 1690.45 -173.474C1727.54 -137.114 1775.93 -131.371 1842.88 -123.46C1886.5 -118.287 1935.92 -112.467 1995.87 -97.1397C2136.58 -61.1977 2186.12 11.9029 2202.94 66.8619C2208.7 85.7647 2211.61 105.695 2211.61 126.081L2211.53 126.119Z" fill="url(#paint19_linear_1289_6687)" style=""/>\n<path d="M2222.78 141.675C2222.78 163.621 2219.44 186.137 2212.8 208.577C2201.03 248.208 2179.04 286.242 2150.89 315.68C2111.77 356.605 2038.3 400.991 1949.44 402.893C1877.04 404.414 1808.85 376.611 1752.23 322.45C1641.19 216.222 1571.13 94.0191 1503.38 -24.1522C1456.82 -105.355 1412.89 -182.031 1359.18 -246.08C1298.98 -317.85 1234.89 -363.795 1157.4 -390.685C1084.4 -416.016 981.585 -378.477 923.299 -305.223C889.027 -262.131 872.01 -209.834 874.118 -154.039C876.583 -88.0116 904.93 -18.1049 958.327 53.7031C1020.15 136.883 1150.36 197.623 1288.25 261.977C1424.3 325.455 1565.01 391.102 1638.12 481.242C1676.09 528.023 1698.44 581.917 1702.77 637.029C1706.95 690.048 1694.42 740.367 1666.55 782.508C1640.15 822.444 1601.19 852.453 1553.84 869.264C1501.31 887.9 1440.8 890.259 1373.93 876.186C1299.46 860.516 1238.39 826.096 1187.26 770.985C1141.66 721.845 1107.9 661.028 1075.26 602.228C1042.46 543.199 1008.58 482.117 962.541 432.407C910.934 376.649 849.308 341.468 774.085 324.885C671.348 302.217 579.146 304.765 499.946 332.416C413.988 362.424 347.431 421.11 302.146 506.762C255.628 594.697 245.768 700.66 274.474 805.101C300.635 900.414 356.298 986.408 427.188 1041.06C461.938 1067.84 500.941 1090.24 542.29 1113.97C653.058 1177.57 767.603 1243.33 803.267 1399.57C807.521 1418.24 820.562 1486.48 809.39 1580C799.252 1664.93 771.778 1739.94 730.031 1796.87C673.971 1873.32 592.505 1918.81 487.979 1932.08L487.781 1930.64C591.87 1917.4 672.977 1872.1 728.799 1796.04C770.426 1739.29 797.78 1664.51 807.919 1579.85C810.741 1556.27 818.654 1473.55 801.836 1399.91C766.332 1244.32 652.064 1178.71 541.574 1115.27C500.185 1091.5 461.102 1069.06 426.313 1042.24C355.184 987.397 299.324 901.098 273.083 805.481C244.297 700.698 254.197 594.355 300.874 506.078C346.358 420.083 413.193 361.169 499.549 331.046C579.027 303.281 671.546 300.733 774.561 323.439C942.94 360.56 1010.97 483.068 1076.73 601.544C1109.33 660.268 1143.05 721.008 1188.53 769.996C1239.46 824.879 1300.25 859.147 1374.4 874.74C1441 888.737 1501.23 886.456 1553.48 867.895C1600.51 851.198 1639.24 821.379 1665.44 781.71C1693.11 739.834 1705.56 689.82 1701.42 637.105C1697.13 582.26 1674.86 528.67 1637.09 482.117C1564.21 392.242 1423.67 326.672 1287.77 263.269C1149.73 198.84 1019.32 138.024 957.253 54.5398C903.658 -17.5345 875.27 -87.7074 872.765 -154.039C870.658 -210.215 887.754 -262.815 922.225 -306.174C980.87 -379.922 1084.48 -417.689 1158.08 -392.13C1235.84 -365.126 1300.17 -319.029 1360.53 -247.031C1414.32 -182.868 1458.33 -106.115 1504.89 -24.8746C1572.56 93.1826 1642.58 215.271 1753.46 321.385C1809.76 375.241 1877.55 402.93 1949.52 401.371C2037.9 399.507 2110.94 355.349 2149.86 314.653C2177.85 285.367 2199.72 247.561 2211.41 208.158C2224.17 165.104 2224.65 121.783 2212.72 82.8367C2196.02 28.22 2146.72 -44.4243 2006.73 -80.1761C1946.85 -95.4658 1897.51 -101.285 1853.94 -106.458C1786.66 -114.407 1738.08 -120.15 1700.59 -156.891C1686.23 -170.964 1681.18 -183.135 1685.2 -194.05C1696.49 -224.896 1781.14 -239.082 1870.91 -249.846L1871.11 -248.4C1781.81 -237.712 1697.64 -223.678 1686.63 -193.593C1682.85 -183.248 1687.78 -171.61 1701.66 -157.956C1738.75 -121.596 1787.14 -115.852 1854.09 -107.941C1897.71 -102.768 1947.13 -96.9495 2007.09 -81.6219C2147.79 -45.6798 2197.33 27.4218 2214.15 82.3808C2219.92 101.284 2222.82 121.213 2222.82 141.599L2222.78 141.675Z" fill="url(#paint20_linear_1289_6687)" style=""/>\n<path d="M2233.99 157.192C2233.99 179.137 2230.65 201.653 2224.01 224.094C2212.24 263.725 2190.25 301.758 2162.11 331.197C2122.98 372.121 2049.51 416.506 1960.65 418.408C1888.25 419.929 1820.06 392.127 1763.44 337.967C1652.4 231.738 1582.34 109.535 1514.59 -8.63665C1468.04 -89.839 1424.1 -166.515 1370.39 -230.564C1310.19 -302.334 1246.1 -348.279 1168.61 -375.169C1095.61 -400.499 992.797 -362.96 934.51 -289.707C900.238 -246.652 883.222 -194.318 885.329 -138.522C887.794 -72.4951 916.142 -2.58841 969.538 69.2196C1031.36 152.4 1161.57 213.14 1299.46 277.455C1435.51 340.934 1576.22 406.58 1649.34 496.72C1687.31 543.502 1709.65 597.396 1713.98 652.507C1718.16 705.526 1705.63 755.845 1677.76 797.987C1651.36 837.922 1612.4 867.931 1565.05 884.742C1512.53 903.379 1452.01 905.699 1385.14 891.665C1310.67 875.995 1249.6 841.611 1198.47 786.462C1152.87 737.322 1119.11 676.507 1086.47 617.706C1053.67 558.678 1019.79 497.595 973.753 447.884C922.146 392.127 860.519 356.945 785.295 340.363C682.558 317.694 590.357 320.243 511.158 347.893C425.199 377.902 358.643 436.589 313.357 522.241C266.839 610.175 256.979 716.138 285.685 820.579C311.847 915.892 367.509 1001.89 438.399 1056.54C473.148 1083.32 512.151 1105.72 553.501 1129.45C664.269 1193.05 778.815 1258.81 814.478 1415.05C833.722 1499.48 829.826 1669.42 740.209 1791.55C682.002 1870.85 597.116 1918.12 487.898 1932.01L487.7 1930.56C596.481 1916.72 681.048 1869.67 738.976 1790.71C828.315 1668.96 832.171 1499.52 812.967 1415.35C777.462 1259.76 663.195 1194.15 552.706 1130.71C511.317 1106.94 472.234 1084.5 437.445 1057.68C366.316 1002.84 310.455 916.538 284.214 820.921C255.428 716.138 265.328 609.795 312.005 521.518C357.489 435.524 424.325 376.609 510.681 346.448C590.159 318.684 682.678 316.135 785.693 338.842C954.072 375.963 1022.1 498.47 1087.86 616.946C1120.46 675.67 1154.18 736.41 1199.66 785.397C1250.59 840.28 1311.38 874.549 1385.53 890.143C1452.13 904.139 1512.37 901.857 1564.61 883.296C1611.64 866.6 1650.37 836.781 1676.57 797.112C1704.24 755.237 1716.69 705.222 1712.55 652.545C1708.26 597.7 1685.99 544.11 1648.22 497.557C1575.34 407.683 1434.8 342.112 1298.9 278.71C1160.86 214.318 1030.45 153.465 968.425 69.9801C914.83 -2.09414 886.442 -72.267 883.937 -138.598C881.83 -194.774 898.926 -247.413 933.397 -290.734C992.041 -364.481 1095.65 -402.249 1169.25 -376.69C1247.02 -349.686 1311.34 -303.589 1371.7 -231.591C1425.49 -167.428 1469.51 -90.6756 1516.06 -9.43524C1583.73 108.622 1653.75 230.711 1764.64 336.826C1820.93 390.682 1888.72 418.332 1960.69 416.811C2049.07 414.947 2122.11 370.79 2161.03 330.094C2189.02 300.807 2210.89 263.002 2222.58 223.599C2235.34 180.544 2235.82 137.224 2223.89 98.277C2207.19 43.6603 2157.89 -28.9848 2017.9 -64.7366C1958.02 -80.0263 1908.68 -85.8452 1865.11 -91.0178C1797.83 -98.9669 1749.21 -104.71 1711.76 -141.451C1696.09 -156.816 1690.64 -171.383 1695.53 -184.771C1706.43 -214.552 1768.69 -237.677 1870.83 -249.885L1871.03 -248.44C1769.49 -236.307 1707.66 -213.525 1696.97 -184.277C1692.27 -171.421 1697.6 -157.349 1712.83 -142.44C1749.93 -106.079 1798.31 -100.336 1865.27 -92.4245C1908.88 -87.2519 1958.3 -81.4331 2018.26 -66.1053C2158.96 -30.1633 2208.5 42.9374 2225.32 97.8964C2231.09 116.799 2233.99 136.729 2233.99 157.115L2233.99 157.192Z" fill="url(#paint21_linear_1289_6687)" style=""/>\n<path d="M2245.24 172.748C2245.24 194.693 2241.9 217.209 2235.26 239.649C2223.49 279.28 2201.51 317.315 2173.36 346.753C2134.23 387.677 2060.76 432.063 1971.9 433.964C1899.5 435.486 1831.31 407.683 1774.73 353.523C1663.69 247.294 1593.63 125.091 1525.88 6.91975C1479.32 -74.2826 1435.39 -150.959 1381.68 -215.008C1321.48 -286.778 1257.39 -332.722 1179.9 -359.612C1106.9 -384.943 1004.09 -347.404 945.801 -274.15C911.568 -231.096 894.591 -178.876 896.619 -122.966C899.084 -56.9387 927.432 12.9671 980.829 84.8131C1042.65 167.993 1172.86 228.733 1310.75 293.087C1446.8 356.565 1587.51 422.212 1660.63 512.353C1698.6 559.134 1720.94 613.028 1725.27 668.139C1729.45 721.159 1716.92 771.478 1689.05 813.619C1662.65 853.555 1623.69 883.563 1576.34 900.374C1523.82 919.01 1463.3 921.369 1396.43 907.296C1321.96 891.626 1260.89 857.206 1209.76 802.095C1164.16 752.955 1130.4 692.138 1097.76 633.338C1064.96 574.309 1031.08 513.227 985.042 463.517C933.435 407.759 871.809 372.578 796.585 355.995C693.848 333.327 601.648 335.875 522.448 363.526C436.489 393.534 369.933 452.221 324.648 537.873C278.13 625.808 268.27 731.77 296.976 836.249C323.137 931.562 378.799 1017.56 449.689 1072.21C484.438 1098.99 523.442 1121.39 564.791 1145.12C675.559 1208.71 790.105 1274.48 825.769 1430.72C843.541 1508.57 838.332 1667.48 751.26 1786.18C690.866 1868.53 602.283 1917.63 487.977 1932.16L487.779 1930.71C601.648 1916.22 689.873 1867.35 750.028 1785.35C836.822 1667.02 841.99 1508.65 824.297 1431.02C788.793 1275.43 674.526 1209.82 564.036 1146.38C522.647 1122.61 483.564 1100.17 448.775 1073.35C377.646 1018.51 321.785 932.208 295.544 836.629C266.798 731.807 276.658 625.503 323.335 537.226C368.819 451.232 435.654 392.317 522.01 362.194C601.488 334.429 694.007 331.881 797.022 354.587C965.401 391.708 1033.43 514.216 1099.19 632.692C1131.79 691.416 1165.51 752.156 1210.99 801.144C1261.92 856.027 1322.71 890.295 1396.87 905.889C1463.46 919.886 1523.7 917.604 1575.94 899.043C1622.97 882.346 1661.7 852.527 1687.9 812.858C1715.57 770.982 1728.02 720.969 1723.88 668.292C1719.59 613.447 1697.32 559.857 1659.55 513.304C1586.67 423.43 1446.13 357.859 1310.23 294.456C1172.19 230.065 1041.78 169.21 979.715 85.7259C926.12 13.6517 897.732 -56.5203 895.228 -122.851C893.081 -179.027 910.216 -231.628 944.687 -274.987C1003.33 -348.735 1106.94 -386.503 1180.54 -360.944C1258.31 -333.94 1322.64 -287.843 1382.99 -215.845C1436.78 -151.682 1480.8 -74.9289 1527.35 6.31159C1595.02 124.369 1665.04 246.458 1775.93 352.572C1832.23 406.428 1900.01 434.116 1971.98 432.557C2060.36 430.693 2133.4 386.536 2172.32 345.84C2200.31 316.554 2222.18 278.748 2233.87 239.345C2246.63 196.291 2247.11 152.97 2235.18 114.023C2218.48 59.4062 2169.18 -13.238 2029.19 -48.9899C1969.31 -64.2795 1919.97 -70.0983 1876.4 -75.2709C1809.13 -83.22 1760.54 -88.9632 1723.05 -125.704C1705.59 -142.819 1699.87 -160.011 1705.99 -176.784C1718.55 -211.091 1781.73 -239.045 1870.91 -249.695L1871.11 -248.25C1782.53 -237.638 1719.79 -210.063 1707.42 -176.289C1701.5 -160.087 1707.14 -143.39 1724.16 -126.731C1761.26 -90.3705 1809.64 -84.6278 1876.6 -76.7167C1920.21 -71.5441 1969.63 -65.7253 2029.59 -50.3977C2170.29 -14.4555 2219.83 58.646 2236.65 113.605C2242.42 132.508 2245.32 152.438 2245.32 172.824L2245.24 172.748Z" fill="url(#paint22_linear_1289_6687)" style=""/>\n<path d="M2256.49 188.305C2256.49 210.25 2253.15 232.767 2246.51 255.207C2234.74 294.838 2212.76 332.872 2184.61 362.31C2145.49 403.234 2072.01 447.621 1983.15 449.522C1910.75 451.044 1842.56 423.24 1785.95 369.08C1674.9 262.851 1604.84 140.649 1537.1 22.4776C1490.54 -58.7248 1446.6 -135.401 1392.89 -199.45C1332.7 -271.221 1268.6 -317.166 1191.11 -344.055C1118.12 -369.386 1015.3 -331.847 957.013 -258.593C922.741 -215.539 905.764 -163.242 907.831 -107.409C910.297 -41.3817 938.644 28.525 992.041 100.333C1053.87 183.513 1184.08 244.253 1321.96 308.607C1458.01 372.085 1598.72 437.731 1671.84 527.872C1709.81 574.653 1732.15 628.547 1736.49 683.658C1740.66 736.678 1728.14 786.996 1700.27 829.138C1673.87 869.074 1634.9 899.083 1587.55 915.893C1535.03 934.53 1474.51 936.85 1407.64 922.816C1333.17 907.146 1272.1 872.725 1220.97 817.614C1175.37 768.474 1141.61 707.658 1108.97 648.858C1076.17 589.829 1042.3 528.747 996.255 479.037C944.648 423.279 883.022 388.098 807.798 371.515C705.061 348.847 612.86 351.395 533.66 379.046C447.701 409.054 381.145 467.74 335.86 553.392C289.342 641.327 279.482 747.29 308.188 851.731C334.349 947.044 390.012 1033.04 460.902 1087.69C495.651 1114.47 534.655 1136.87 576.004 1160.6C686.772 1224.2 801.317 1289.96 836.981 1446.2C846.682 1488.65 846.881 1544.29 837.578 1598.87C825.968 1666.95 800.165 1729.71 762.99 1780.4C700.33 1865.83 607.771 1916.87 487.977 1932.08L487.779 1930.64C607.175 1915.46 699.336 1864.65 761.757 1779.57C798.813 1729.06 824.497 1666.49 836.106 1598.64C845.37 1544.25 845.172 1488.8 835.55 1446.5C800.045 1290.91 685.779 1225.3 575.289 1161.86C533.9 1138.09 494.816 1115.65 460.027 1088.83C388.898 1033.99 333.038 947.69 306.797 852.111C278.011 747.289 287.911 640.985 334.588 552.708C380.072 466.713 446.907 407.799 533.263 377.638C612.741 349.873 705.26 347.325 808.275 370.031C976.654 407.152 1044.68 529.66 1110.44 648.135C1143.04 706.86 1176.76 767.6 1222.25 816.588C1273.18 871.47 1333.97 905.738 1408.12 921.332C1474.71 935.329 1534.95 933.047 1587.19 914.487C1634.23 897.79 1672.95 867.971 1699.15 828.301C1726.83 786.426 1739.27 736.411 1735.13 683.696C1730.84 628.851 1708.58 575.262 1670.8 528.708C1597.93 438.834 1457.38 373.264 1321.48 309.861C1183.44 245.47 1053.03 184.616 991.007 101.132C937.412 29.0572 909.024 -41.1156 906.519 -107.447C904.412 -163.623 921.509 -216.262 955.98 -259.582C1014.62 -333.33 1118.24 -371.097 1191.83 -345.538C1269.6 -318.534 1333.93 -272.438 1394.28 -200.44C1448.08 -136.276 1492.09 -59.5232 1538.65 21.7171C1606.32 139.774 1676.33 261.862 1787.22 367.977C1843.52 421.833 1911.31 449.484 1983.27 447.962C2071.65 446.099 2144.69 401.941 2183.61 361.245C2211.6 331.959 2233.47 294.153 2245.16 254.75C2257.92 211.696 2258.4 168.375 2246.47 129.429C2229.77 74.8118 2180.47 2.16752 2040.48 -33.5843C1980.61 -48.874 1931.26 -54.6937 1887.69 -59.8663C1820.42 -67.8154 1771.79 -73.5585 1734.34 -110.299C1714.98 -129.278 1708.77 -150.235 1716.37 -171.001C1730.6 -209.948 1789.84 -240.147 1870.95 -249.846L1871.15 -248.4C1790.64 -238.777 1731.87 -208.92 1717.8 -170.506C1710.4 -150.348 1716.53 -129.849 1735.41 -111.326C1772.51 -74.9659 1820.89 -69.2222 1887.85 -61.3111C1931.46 -56.1385 1980.88 -50.3197 2040.84 -34.992C2181.55 0.949991 2231.09 74.0517 2247.91 129.011C2253.67 147.913 2256.57 167.843 2256.57 188.229L2256.49 188.305Z" fill="url(#paint23_linear_1289_6687)" style=""/>\n<path d="M2267.7 203.822C2267.7 225.768 2264.36 248.284 2257.72 270.724C2245.96 310.355 2223.97 348.389 2195.82 377.827C2156.7 418.752 2083.22 463.137 1994.36 465.039C1921.96 466.56 1853.77 438.758 1797.16 384.597C1686.11 278.369 1616.06 156.165 1548.31 38.0321C1501.75 -43.1703 1457.82 -119.846 1404.1 -183.895C1343.91 -255.665 1279.82 -301.61 1202.33 -328.5C1129.33 -353.831 1026.51 -316.291 968.224 -243.038C933.952 -199.984 916.976 -147.649 919.043 -91.8533C921.508 -25.8264 949.856 44.0794 1003.25 115.925C1065.08 199.106 1195.29 259.846 1333.17 324.199C1469.23 387.678 1609.93 453.325 1683.05 543.465C1721.02 590.247 1743.36 644.141 1747.7 699.252C1751.87 752.271 1739.35 802.59 1711.48 844.731C1685.08 884.667 1646.11 914.676 1598.76 931.487C1546.24 950.123 1485.73 952.443 1418.85 938.408C1344.38 922.738 1283.31 888.318 1232.18 833.207C1186.58 784.067 1152.82 723.251 1120.18 664.451C1087.38 605.422 1053.51 544.339 1007.47 494.629C955.86 438.871 894.233 403.69 819.009 387.107C716.272 364.439 624.072 366.987 544.872 394.638C458.913 424.685 392.357 483.333 347.071 568.986C300.554 656.92 290.693 762.882 319.399 867.323C345.561 962.636 401.223 1048.63 472.113 1103.29C506.862 1130.06 545.906 1152.46 587.216 1176.2C697.984 1239.79 812.529 1305.55 848.193 1461.79C866.084 1540.26 850.976 1671.63 775.473 1774.55C745.336 1815.58 707.605 1849.51 663.314 1875.37C613.178 1904.62 554.175 1923.71 487.937 1932.16L487.739 1930.71C553.739 1922.31 612.542 1903.29 662.519 1874.16C706.651 1848.41 744.223 1814.63 774.241 1773.75C849.504 1671.17 864.573 1540.33 846.721 1462.17C811.216 1306.58 696.949 1240.97 586.46 1177.53C545.071 1153.76 505.988 1131.32 471.199 1104.5C400.07 1049.66 344.209 963.359 317.968 867.78C289.222 762.959 299.082 656.654 345.759 568.377C391.243 482.383 458.079 423.506 544.435 393.345C623.913 365.581 716.432 363.032 819.447 385.739C987.826 422.86 1055.85 545.366 1121.61 663.842C1154.22 722.566 1187.93 783.306 1233.42 832.294C1284.35 887.177 1345.14 921.446 1419.29 937.04C1485.88 951.036 1546.12 948.754 1598.36 930.193C1645.4 913.496 1684.12 883.678 1710.32 844.009C1738 802.133 1750.44 752.119 1746.31 699.404C1742.01 644.559 1719.75 590.969 1681.98 544.416C1609.1 454.542 1468.55 388.971 1332.65 325.569C1194.61 261.177 1064.2 200.323 1002.14 116.838C948.544 44.764 920.156 -25.408 917.651 -91.739C915.504 -147.915 932.64 -200.516 967.111 -243.875C1025.76 -317.622 1129.37 -355.39 1202.96 -329.832C1280.73 -302.827 1345.06 -256.73 1405.41 -184.732C1459.21 -120.569 1503.22 -43.8166 1549.78 37.4239C1617.45 155.481 1687.46 277.57 1798.35 383.685C1854.65 437.541 1922.44 465.229 1994.4 463.67C2082.79 461.806 2155.82 417.649 2194.75 376.952C2222.74 347.666 2244.6 309.861 2256.29 270.458C2269.06 227.403 2269.53 184.083 2257.61 145.136C2240.91 90.5194 2191.61 17.8743 2051.61 -17.8776C1991.74 -33.1672 1942.4 -38.986 1898.82 -44.1586C1831.55 -52.1077 1782.96 -57.8509 1745.47 -94.5916C1723.88 -115.738 1717.16 -141.45 1726.51 -167.008C1741.93 -209.188 1797.24 -240.87 1870.83 -249.694L1871.03 -248.249C1798.03 -239.501 1743.2 -208.199 1727.94 -166.551C1718.79 -141.525 1725.39 -116.347 1746.54 -95.6186C1783.64 -59.2582 1832.03 -53.5154 1898.98 -45.6044C1942.6 -40.4318 1992.02 -34.612 2051.97 -19.2844C2192.68 16.6576 2242.22 89.7583 2259.04 144.717C2264.8 163.62 2267.7 183.55 2267.7 203.936L2267.7 203.822Z" fill="url(#paint24_linear_1289_6687)" style=""/>\n<path d="M2278.96 219.379C2278.96 241.325 2275.62 263.84 2268.98 286.28C2257.21 325.912 2235.22 363.946 2207.07 393.384C2167.95 434.309 2094.48 478.694 2005.61 480.596C1933.21 482.117 1865.03 454.315 1808.41 400.154C1697.36 293.926 1627.31 171.722 1559.56 53.5512C1513 -27.6512 1469.07 -104.328 1415.35 -168.377C1355.16 -240.147 1291.07 -286.091 1213.58 -312.981C1140.58 -338.312 1037.76 -300.772 979.477 -227.519C945.205 -184.427 928.227 -132.13 930.295 -76.3343C932.76 -10.3074 961.109 59.5985 1014.5 131.406C1076.33 214.587 1206.54 275.327 1344.42 339.68C1480.48 403.159 1621.19 468.806 1694.3 558.946C1732.27 605.728 1754.62 659.622 1758.95 714.733C1763.13 767.752 1750.6 818.071 1722.73 860.212C1696.33 900.148 1657.37 930.156 1610.01 946.967C1557.49 965.604 1496.98 967.924 1430.1 953.889C1355.64 938.219 1294.57 903.837 1243.44 848.688C1197.83 799.548 1164.08 738.732 1131.44 679.931C1098.63 620.903 1064.76 559.821 1018.72 510.11C967.112 454.353 905.486 419.171 830.262 402.588C727.525 379.92 635.324 382.468 556.124 410.119C470.166 440.128 403.609 498.814 358.324 584.467C311.806 672.401 301.946 778.363 330.652 882.804C356.813 978.117 412.475 1064.11 483.366 1118.77C518.115 1145.54 557.158 1167.94 598.467 1191.68C709.236 1255.27 823.781 1321.03 859.445 1477.27C875.786 1548.85 860.638 1670.52 788.794 1768.46C757.742 1810.79 718.5 1845.86 672.181 1872.75C619.58 1903.25 557.555 1923.22 487.937 1932.08L487.739 1930.64C557.158 1921.81 618.944 1901.92 671.386 1871.5C717.506 1844.72 756.589 1809.77 787.521 1767.62C859.087 1670.07 874.195 1548.89 857.934 1477.62C822.429 1322.02 708.162 1256.41 597.672 1192.97C556.283 1169.2 517.2 1146.76 482.411 1119.95C411.283 1065.1 355.421 978.801 329.18 883.222C300.395 778.401 310.295 672.096 356.972 583.819C402.456 497.825 469.291 438.91 555.647 408.787C635.125 381.023 727.645 378.474 830.66 401.181C999.039 438.302 1067.07 560.809 1132.83 679.285C1165.43 738.009 1199.14 798.749 1244.63 847.737C1295.56 902.62 1356.35 936.889 1430.5 952.483C1497.1 966.479 1557.33 964.197 1609.58 945.636C1656.61 928.939 1695.34 899.12 1721.54 859.451C1749.21 817.576 1761.65 767.562 1757.52 714.885C1753.22 660.04 1730.96 606.45 1693.19 559.897C1620.31 470.023 1479.76 404.452 1343.87 341.05C1205.82 276.658 1075.42 215.804 1013.39 132.319C959.796 60.245 931.409 -9.92691 928.904 -76.2581C926.797 -132.434 943.893 -185.035 978.364 -228.394C1037.01 -302.141 1140.62 -339.909 1214.21 -314.351C1291.98 -287.346 1356.31 -241.25 1416.67 -169.252C1470.46 -105.089 1514.47 -28.3355 1561.03 52.9049C1628.7 170.962 1698.72 293.051 1809.6 399.166C1865.9 453.022 1933.69 480.671 2005.65 479.15C2094.04 477.286 2167.08 433.13 2206 392.434C2233.99 363.147 2255.86 325.342 2267.55 285.939C2280.31 242.884 2280.79 199.563 2268.86 160.616C2252.16 106 2202.86 33.3553 2062.87 -2.39656C2002.99 -17.6862 1953.65 -23.5051 1910.07 -28.6777C1842.8 -36.6268 1794.18 -42.3699 1756.72 -79.1107C1732.91 -102.463 1725.39 -134.755 1736.65 -165.486C1752.99 -210.138 1803.16 -241.668 1870.87 -249.769L1871.07 -248.323C1803.96 -240.298 1754.22 -209.149 1738.08 -165.03C1727.02 -134.831 1734.42 -103.11 1757.84 -80.1757C1794.93 -43.8153 1843.32 -38.0726 1910.27 -30.1614C1953.89 -25.0269 2003.31 -19.17 2063.27 -3.84236C2203.97 32.0996 2253.51 105.201 2270.33 160.16C2276.09 179.063 2279 198.993 2279 219.379L2278.96 219.379Z" fill="url(#paint25_linear_1289_6687)" style=""/>\n<path d="M2290.21 234.933C2290.21 256.879 2286.87 279.395 2280.23 301.835C2268.46 341.466 2246.47 379.5 2218.32 408.938C2179.2 449.863 2105.73 494.249 2016.87 496.151C1944.47 497.672 1876.28 469.869 1819.66 415.708C1708.62 309.48 1638.56 187.277 1570.81 69.106C1524.25 -12.0964 1480.32 -88.773 1426.61 -152.822C1366.41 -224.592 1302.32 -270.537 1224.83 -297.427C1151.83 -322.758 1049.02 -285.218 990.729 -211.965C956.457 -168.911 939.479 -116.576 941.547 -60.7803C944.012 5.24655 972.36 75.1534 1025.76 146.999C1087.58 230.18 1217.79 290.92 1355.68 355.273C1491.73 418.752 1632.44 484.398 1705.55 574.538C1743.52 621.32 1765.87 675.214 1770.2 730.325C1774.34 783.344 1761.85 833.663 1733.98 875.804C1707.58 915.74 1668.62 945.749 1621.26 962.56C1568.74 981.197 1508.23 983.517 1441.36 969.482C1366.89 953.812 1305.82 919.391 1254.69 864.28C1209.08 815.14 1175.33 754.325 1142.69 695.524C1109.89 636.496 1076.01 575.413 1029.97 525.702C978.364 469.945 916.738 434.764 841.514 418.181C738.777 395.513 646.575 398.061 567.376 425.712C481.417 455.721 414.9 514.406 369.575 600.059C323.057 687.993 313.197 793.956 341.903 898.397C368.064 993.71 423.728 1079.7 494.618 1134.36C529.367 1161.13 568.41 1183.54 609.719 1207.27C720.488 1270.86 835.033 1336.62 870.696 1492.87C886.043 1560.15 871.015 1669.61 802.868 1762.49C755.039 1827.68 661.565 1910.06 487.937 1932.12L487.739 1930.68C660.81 1908.69 753.965 1826.61 801.596 1761.65C869.464 1669.12 884.453 1560.15 869.186 1493.21C833.681 1337.61 719.414 1272 608.924 1208.56C567.535 1184.79 528.452 1162.35 493.663 1135.54C422.535 1080.69 366.673 994.394 340.433 898.815C311.687 793.994 321.547 687.689 368.224 599.412C413.708 513.418 480.543 454.541 566.899 424.38C646.377 396.616 738.896 394.067 841.911 416.774C1010.29 453.895 1078.32 576.402 1144.08 694.878C1176.68 753.602 1210.4 814.342 1255.88 863.329C1306.81 918.212 1367.6 952.481 1441.75 968.075C1508.35 982.071 1568.58 979.789 1620.83 961.228C1667.86 944.532 1706.59 914.713 1732.79 875.044C1760.46 833.169 1772.91 783.154 1768.77 730.477C1764.48 675.632 1742.21 622.042 1704.44 575.489C1631.56 485.615 1491.02 420.044 1355.12 356.642C1217.08 292.25 1086.67 231.397 1024.64 147.912C971.048 75.838 942.62 5.66501 940.155 -60.666C938.088 -116.842 955.145 -169.443 989.616 -212.802C1048.26 -286.549 1151.87 -324.316 1225.46 -298.758C1303.23 -271.754 1367.56 -225.657 1427.92 -153.659C1481.71 -89.4955 1525.72 -12.7435 1572.28 68.4969C1639.95 186.554 1709.97 308.643 1820.85 414.758C1877.15 468.614 1944.94 496.264 2016.91 494.743C2105.29 492.879 2178.33 448.722 2217.25 408.026C2245.24 378.739 2267.11 340.934 2278.8 301.531C2291.56 258.476 2292.04 215.156 2280.11 176.209C2263.41 121.592 2214.11 48.9473 2074.12 13.1955C2014.24 -2.09419 1964.9 -7.91304 1921.33 -13.0856C1854.05 -21.0347 1805.47 -26.7779 1767.98 -63.5186C1741.62 -89.3817 1733.15 -129.545 1746.43 -165.867C1754.38 -187.547 1782.37 -239.121 1870.87 -249.694L1871.07 -248.25C1783.4 -237.752 1755.69 -186.825 1747.86 -165.374C1734.78 -129.584 1743.09 -89.9903 1769.05 -64.5456C1806.14 -28.1852 1854.53 -22.4416 1921.48 -14.5305C1965.1 -9.35786 2014.52 -3.53901 2074.48 11.7886C2215.18 47.7306 2264.72 120.831 2281.54 175.79C2287.31 194.693 2290.21 214.623 2290.21 235.009L2290.21 234.933Z" fill="url(#paint26_linear_1289_6687)" style=""/>\n<path d="M2301.42 250.452C2301.42 272.398 2298.08 294.914 2291.44 317.354C2279.67 356.986 2257.69 395.019 2229.54 424.457C2190.41 465.382 2116.94 509.767 2028.08 511.669C1955.68 513.228 1887.49 485.388 1830.87 431.228C1719.83 324.999 1649.77 202.796 1582.02 84.6623C1535.47 3.45991 1491.53 -73.2159 1437.82 -137.265C1377.62 -209.035 1313.53 -254.98 1236.04 -281.908C1163.04 -307.239 1060.23 -269.699 1001.94 -196.446C967.669 -153.392 950.692 -101.171 952.76 -45.2611C955.225 20.7657 983.573 90.6715 1036.97 162.479C1098.79 245.66 1229 306.4 1366.89 370.753C1502.94 434.232 1643.65 499.879 1716.77 590.019C1754.74 636.801 1777.08 690.695 1781.41 745.806C1785.55 798.825 1773.07 849.144 1745.19 891.286C1718.79 931.221 1679.83 961.23 1632.48 978.041C1579.96 996.678 1519.44 998.997 1452.57 984.963C1378.1 969.293 1317.03 934.91 1265.9 879.761C1220.3 830.621 1186.54 769.806 1153.9 711.005C1121.1 651.977 1087.22 590.894 1041.18 541.183C989.576 485.426 927.95 450.244 852.726 433.661C749.989 410.993 657.788 413.541 578.588 441.192C492.63 471.201 426.113 529.887 380.788 615.54C334.27 703.474 324.41 809.436 353.116 913.878C379.277 1009.19 434.939 1095.19 505.829 1149.84C540.579 1176.62 579.623 1199.02 620.932 1222.75C731.701 1286.34 846.245 1352.1 881.909 1508.35C894.791 1564.87 885.687 1663.79 817.659 1756.56C768.358 1823.76 671.107 1908.77 487.938 1932.08L487.74 1930.64C670.392 1907.44 767.284 1822.7 816.426 1755.76C884.215 1663.37 893.281 1564.94 880.439 1508.69C844.934 1353.09 730.666 1287.48 620.176 1224.04C578.787 1200.27 539.704 1177.83 504.915 1151.02C433.786 1096.17 377.925 1009.88 351.684 914.296C322.938 809.475 332.8 703.17 379.477 614.894C424.961 528.899 491.795 469.984 578.152 439.861C657.63 412.097 750.148 409.548 853.164 432.255C1021.54 469.376 1089.57 591.882 1155.33 710.358C1187.93 769.082 1221.65 829.823 1267.13 878.81C1318.06 933.693 1378.86 967.962 1453.01 983.556C1519.6 997.552 1579.84 995.27 1632.08 976.71C1679.11 960.013 1717.84 930.194 1744.04 890.525C1771.71 848.65 1784.16 798.635 1780.02 745.92C1775.73 691.075 1753.46 637.485 1715.69 590.932C1642.81 501.058 1502.27 435.487 1366.37 372.085C1228.33 307.655 1097.92 246.84 1035.86 163.355C982.26 91.2809 953.873 21.108 951.368 -45.223C949.221 -101.399 966.357 -154 1000.83 -197.359C1059.47 -271.106 1163.08 -308.875 1236.68 -283.316C1314.45 -256.312 1378.78 -210.214 1439.13 -138.216C1492.92 -74.0527 1536.94 2.69941 1583.49 83.9399C1651.16 201.997 1721.18 324.086 1832.07 430.201C1888.37 484.057 1956.15 511.745 2028.12 510.186C2116.5 508.322 2189.54 464.165 2228.46 423.469C2256.45 394.182 2278.32 356.377 2290.01 316.974C2302.77 273.919 2303.25 230.599 2291.32 191.652C2274.62 137.035 2225.32 64.3903 2085.33 28.6384C2025.45 13.3488 1976.11 7.52996 1932.54 2.35735C1865.27 -5.59174 1816.64 -11.3349 1779.19 -48.0756C1750 -76.6772 1740.34 -126.007 1755.69 -168.035C1765.39 -194.582 1793.3 -240.527 1870.83 -249.808L1871.03 -248.362C1794.3 -239.196 1766.74 -193.783 1757.12 -167.578C1741.93 -126.045 1751.44 -77.3619 1780.26 -49.1407C1817.36 -12.7803 1865.74 -7.03754 1932.7 0.873465C1976.31 6.00798 2025.73 11.8659 2085.69 27.1935C2226.4 63.1355 2275.94 136.236 2292.75 191.195C2298.52 210.098 2301.42 230.028 2301.42 250.414L2301.42 250.452Z" fill="url(#paint27_linear_1289_6687)" style=""/>\n<path d="M2312.67 266.007C2312.67 287.953 2309.34 310.468 2302.7 332.908C2290.93 372.539 2268.94 410.574 2240.79 440.012C2201.67 480.937 2128.19 525.322 2039.33 527.224C1966.93 528.745 1898.74 500.942 1842.13 446.781C1731.08 340.553 1661.03 218.35 1593.28 100.179C1546.72 18.9765 1502.79 -57.7002 1449.07 -121.749C1388.88 -193.519 1324.79 -239.464 1247.29 -266.354C1174.3 -291.685 1071.48 -254.145 1013.2 -180.891C978.923 -137.837 961.945 -85.5403 964.013 -29.7066C966.478 36.3203 994.827 106.226 1048.22 178.072C1110.05 261.252 1240.26 321.993 1378.14 386.346C1514.2 449.825 1654.9 515.471 1728.02 605.611C1765.99 652.393 1788.33 706.288 1792.67 761.399C1796.8 814.418 1784.32 864.737 1756.45 906.878C1730.05 946.814 1691.08 976.822 1643.73 993.633C1591.21 1012.27 1530.7 1014.59 1463.82 1000.56C1389.35 984.885 1328.28 950.503 1277.15 895.354C1231.55 846.214 1197.8 785.398 1165.15 726.597C1132.35 667.568 1098.48 606.486 1052.44 556.776C1000.83 501.018 939.204 465.837 863.98 449.254C761.243 426.586 669.042 429.134 589.843 456.785C503.884 486.794 437.367 545.48 392.042 631.133C345.524 719.067 335.664 825.029 364.37 929.47C390.531 1024.78 446.194 1110.78 517.084 1165.43C551.833 1192.21 590.876 1214.61 632.185 1238.34C742.954 1301.94 857.5 1367.7 893.163 1523.94C905.369 1577.49 896.026 1665.31 833.087 1751.08C782.474 1820.07 681.486 1907.51 487.94 1932.12L487.742 1930.67C680.732 1906.14 781.4 1819.01 831.855 1750.28C894.515 1664.89 903.818 1577.57 891.692 1524.28C856.187 1368.69 741.92 1303.08 631.43 1239.64C590.041 1215.87 550.958 1193.43 516.169 1166.61C445.041 1111.77 389.179 1025.47 362.938 929.888C334.193 825.067 344.053 718.762 390.73 630.485C436.214 544.491 503.049 485.614 589.405 455.453C668.883 427.688 761.402 425.14 864.418 447.846C1032.8 484.967 1100.82 607.475 1166.59 725.951C1199.19 784.675 1232.9 845.415 1278.39 894.403C1329.32 949.286 1390.11 983.555 1464.26 999.149C1530.86 1013.15 1591.09 1010.86 1643.33 992.302C1690.37 975.605 1729.09 945.786 1755.29 906.117C1782.97 864.242 1795.41 814.227 1791.28 761.512C1786.98 706.667 1764.72 653.077 1726.95 606.524C1654.07 516.65 1513.52 451.08 1377.62 387.677C1239.58 323.286 1109.17 262.431 1047.11 178.947C993.515 106.873 965.127 36.7008 962.622 -29.6304C960.515 -85.8445 977.611 -138.445 1012.08 -181.766C1070.73 -255.514 1174.34 -293.282 1247.93 -267.723C1325.7 -240.719 1390.03 -194.622 1450.38 -122.624C1504.18 -58.4609 1548.19 18.2922 1594.75 99.5325C1662.42 217.59 1732.43 339.679 1843.32 445.793C1899.62 499.649 1967.41 527.299 2039.37 525.778C2127.76 523.914 2200.79 479.758 2239.72 439.061C2267.71 409.775 2289.57 371.97 2301.26 332.566C2314.03 289.512 2314.5 246.191 2302.58 207.244C2285.88 152.627 2236.58 79.9829 2096.59 44.2311C2036.71 28.9415 1987.37 23.1216 1943.79 17.949C1876.52 9.99993 1827.93 4.25775 1790.44 -32.483C1758.24 -64.0511 1747.02 -123.689 1764.4 -171.155C1780.66 -215.579 1818.47 -243.495 1870.87 -249.733L1871.07 -248.288C1819.27 -242.089 1781.89 -214.513 1765.87 -170.66C1748.7 -123.689 1759.71 -64.6978 1791.55 -33.51C1828.65 2.8504 1877.04 8.59319 1943.99 16.5042C1987.61 21.6768 2037.03 27.4958 2096.98 42.8234C2237.69 78.7654 2287.23 151.867 2304.05 206.826C2309.81 225.729 2312.71 245.659 2312.71 266.045L2312.67 266.007Z" fill="url(#paint28_linear_1289_6687)" style=""/>\n<path d="M2394.12 35.2135C2394.12 57.1591 2390.78 79.6755 2384.14 102.115C2372.37 141.747 2350.38 179.78 2322.23 209.219C2283.11 250.143 2209.64 294.529 2120.78 296.431C2048.37 297.952 1980.19 270.149 1923.57 215.989C1812.52 109.76 1742.47 -12.4424 1674.72 -130.614C1628.16 -211.816 1584.23 -288.493 1530.51 -352.542C1470.32 -424.312 1406.23 -470.257 1328.74 -497.147C1255.74 -522.477 1152.92 -484.938 1094.64 -411.685C1060.37 -368.63 1043.39 -316.41 1045.46 -260.5C1047.92 -194.473 1076.27 -124.566 1129.67 -52.7583C1191.49 30.4218 1321.7 91.1618 1459.58 155.515C1595.64 218.994 1736.35 284.64 1809.46 374.78C1847.43 421.562 1869.78 475.456 1874.11 530.567C1878.29 583.586 1865.76 633.905 1837.89 676.047C1811.49 715.982 1772.53 745.991 1725.17 762.802C1672.65 781.439 1612.14 783.759 1545.27 769.725C1470.8 754.055 1409.73 719.633 1358.6 664.522C1312.99 615.383 1279.24 554.567 1246.6 495.766C1213.79 436.738 1179.92 375.656 1133.88 325.945C1082.27 270.188 1020.65 235.006 945.422 218.423C842.685 195.755 750.485 198.303 671.285 225.954C585.326 255.963 518.81 314.649 473.485 400.301C426.967 488.235 417.107 594.198 445.812 698.64C471.974 793.953 527.636 879.946 598.526 934.601C633.275 961.377 672.318 983.78 713.628 1007.51C824.396 1071.11 938.942 1136.87 974.606 1293.11C977.667 1306.61 983.114 1326.77 990.032 1352.29C1035.2 1519.45 1140.96 1910.86 1023.91 2077.1C993.849 2119.78 950.552 2144.99 895.287 2152.03L895.088 2150.58C949.916 2143.62 992.816 2118.64 1022.63 2076.3C1139.33 1910.63 1033.69 1519.64 988.561 1352.67C981.643 1327.15 976.196 1306.95 973.134 1293.45C937.63 1137.85 823.363 1072.25 712.873 1008.81C671.484 985.034 632.401 962.594 597.612 935.78C526.483 880.936 470.622 794.637 444.381 699.057C415.635 594.274 425.495 487.931 472.172 399.655C517.656 313.66 584.491 254.745 670.847 224.584C750.325 196.82 842.845 194.271 945.86 216.978C1114.24 254.099 1182.27 376.606 1248.03 495.082C1280.63 553.806 1314.35 614.546 1359.83 663.533C1410.76 718.416 1471.55 752.685 1545.7 768.279C1612.3 782.275 1672.53 779.994 1724.78 761.434C1771.81 744.737 1810.54 714.917 1836.74 675.248C1864.41 633.373 1876.85 583.358 1872.72 530.643C1868.42 475.798 1846.16 422.209 1808.39 375.655C1735.51 285.781 1594.96 220.21 1459.07 156.808C1321.02 92.4165 1190.62 31.5627 1128.59 -51.9217C1075 -123.996 1046.61 -194.169 1044.1 -260.5C1042 -316.676 1059.09 -369.315 1093.56 -412.636C1152.21 -486.383 1255.82 -524.15 1329.41 -498.592C1407.18 -471.588 1471.51 -425.491 1531.87 -353.493C1585.66 -289.33 1629.67 -212.577 1676.23 -131.337C1743.9 -13.2798 1813.92 108.809 1924.8 214.924C1981.1 268.78 2048.89 296.43 2120.85 294.909C2209.24 293.045 2282.28 248.888 2321.2 208.192C2349.19 178.906 2371.06 141.1 2382.75 101.697C2395.51 58.6422 2395.99 15.3219 2384.06 -23.6248C2367.36 -78.2415 2318.06 -150.886 2178.07 -186.638C2118.19 -201.927 2068.85 -207.747 2025.27 -212.92C1958 -220.869 1909.38 -226.612 1871.92 -263.353C1839.72 -294.921 1828.51 -354.558 1845.88 -402.024C1862.14 -446.448 1899.95 -474.364 1952.36 -480.602L1952.56 -479.157C1900.75 -472.957 1863.38 -445.382 1847.35 -401.529C1830.18 -354.557 1841.23 -295.567 1873.04 -264.38C1910.13 -228.019 1958.52 -222.275 2025.47 -214.365C2069.09 -209.192 2118.51 -203.373 2178.47 -188.045C2319.17 -152.103 2368.71 -79.0015 2385.53 -24.0426C2391.29 -5.13973 2394.2 14.7892 2394.2 35.1755L2394.12 35.2135Z" fill="url(#paint29_linear_1289_6687)" style=""/>\n<path d="M2405.37 50.7699C2405.37 72.7155 2402.03 95.2318 2395.39 117.672C2383.62 157.303 2361.63 195.337 2333.48 224.775C2294.36 265.699 2220.89 310.085 2132.02 311.986C2059.62 313.508 1991.44 285.705 1934.82 231.545C1823.77 125.316 1753.72 3.11298 1685.97 -115.058C1639.41 -196.261 1595.48 -272.936 1541.76 -336.985C1481.57 -408.755 1417.48 -454.7 1339.99 -481.59C1266.99 -506.921 1164.17 -469.382 1105.89 -396.128C1071.62 -353.074 1054.6 -300.777 1056.71 -244.944C1059.17 -178.917 1087.52 -109.011 1140.92 -37.1648C1202.74 46.0153 1332.95 106.755 1470.84 171.109C1606.89 234.587 1747.6 300.234 1820.71 390.375C1858.68 437.156 1881.03 491.05 1885.36 546.161C1889.54 599.181 1877.01 649.499 1849.14 691.641C1822.74 731.577 1783.78 761.586 1736.42 778.397C1683.9 797.033 1623.39 799.352 1556.51 785.318C1482.05 769.648 1420.98 735.228 1369.85 680.117C1324.24 630.977 1290.49 570.161 1257.85 511.361C1225.05 452.332 1191.17 391.249 1145.13 341.539C1093.52 285.781 1031.9 250.6 956.673 234.017C853.936 211.349 761.735 213.897 682.536 241.548C596.577 271.556 530.021 330.243 484.735 415.895C438.217 503.83 428.357 609.792 457.063 714.271C483.224 809.584 538.887 895.579 609.777 950.233C644.526 977.009 683.569 999.411 724.878 1023.14C835.647 1086.74 950.193 1152.5 985.856 1308.74C988.719 1321.37 993.53 1339.55 999.653 1362.6C1042.95 1526.33 1144.3 1909.71 1026.65 2075.81C995.876 2119.24 951.703 2144.92 895.286 2152.07L895.087 2150.62C951.027 2143.51 994.881 2118.06 1025.38 2075.01C1142.63 1909.45 1041.36 1526.49 998.141 1362.98C992.058 1339.93 987.247 1321.71 984.345 1309.05C948.84 1153.45 834.573 1087.84 724.084 1024.4C682.694 1000.63 643.612 978.189 608.823 951.375C537.694 896.53 481.832 810.231 455.592 714.652C426.806 609.83 436.706 503.526 483.383 415.249C528.867 329.254 595.702 270.34 682.058 240.217C761.536 212.452 854.056 209.904 957.071 232.61C1125.45 269.731 1193.48 392.238 1259.24 510.714C1291.84 569.438 1325.56 630.178 1371.04 679.166C1421.97 734.049 1482.76 768.317 1556.91 783.911C1623.51 797.908 1683.74 795.626 1735.99 777.065C1783.02 760.368 1821.75 730.55 1847.95 690.881C1875.62 649.005 1888.06 598.991 1883.93 546.314C1879.64 491.469 1857.37 437.879 1819.6 391.326C1746.72 301.451 1606.17 235.881 1470.28 172.478C1332.24 108.087 1201.83 47.2324 1139.76 -36.2522C1086.17 -108.326 1057.78 -178.498 1055.28 -244.829C1053.17 -301.005 1070.26 -353.606 1104.73 -396.965C1163.38 -470.713 1266.99 -508.481 1340.59 -482.922C1418.35 -455.918 1482.68 -409.82 1543.04 -337.822C1596.83 -273.659 1640.84 -196.907 1687.4 -115.667C1755.07 2.39081 1825.09 124.48 1935.97 230.594C1992.27 284.45 2060.06 312.139 2132.02 310.58C2220.41 308.716 2293.45 264.558 2332.37 223.862C2360.36 194.576 2382.23 156.77 2393.92 117.367C2406.68 74.3129 2407.16 30.9923 2395.23 -7.95419C2378.53 -62.5709 2329.23 -135.216 2189.24 -170.968C2129.36 -186.258 2080.02 -192.076 2036.45 -197.249C1969.17 -205.198 1920.59 -210.941 1883.09 -247.682C1850.89 -279.25 1839.68 -338.887 1857.05 -386.353C1873.31 -430.777 1911.12 -458.694 1963.53 -464.932L1963.73 -463.486C1911.92 -457.287 1874.55 -429.712 1858.52 -385.859C1841.35 -338.888 1852.4 -279.897 1884.21 -248.709C1921.3 -212.348 1969.69 -206.606 2036.64 -198.695C2080.26 -193.522 2129.68 -187.702 2189.64 -172.375C2330.34 -136.433 2379.88 -63.3321 2396.7 -8.37313C2402.47 10.5299 2405.37 30.4599 2405.37 50.8461L2405.37 50.7699Z" fill="url(#paint30_linear_1289_6687)" style=""/>\n<path d="M2416.62 66.2882C2416.62 88.2338 2413.28 110.749 2406.64 133.189C2394.87 172.821 2372.89 210.855 2344.74 240.293C2305.61 281.218 2232.14 325.603 2143.28 327.505C2070.88 329.064 2002.69 301.223 1946.07 247.063C1835.03 140.834 1764.97 18.6313 1697.22 -99.5398C1650.67 -180.742 1606.73 -257.419 1553.02 -321.468C1492.82 -393.238 1428.73 -439.183 1351.24 -466.073C1278.24 -491.404 1175.43 -453.863 1117.14 -380.61C1082.87 -337.556 1065.85 -285.221 1067.96 -229.425C1070.42 -163.398 1098.77 -93.4927 1152.17 -21.6846C1213.99 61.4956 1344.2 122.236 1482.09 186.589C1618.14 250.068 1758.85 315.714 1831.97 405.854C1869.94 452.636 1892.28 506.531 1896.61 561.642C1900.79 614.661 1888.27 664.98 1860.39 707.121C1833.99 747.057 1795.03 777.065 1747.68 793.876C1695.16 812.513 1634.64 814.833 1567.77 800.798C1493.3 785.128 1432.23 750.746 1381.1 695.597C1335.5 646.457 1301.74 585.641 1269.1 526.84C1236.3 467.811 1202.42 406.729 1156.38 357.019C1104.78 301.261 1043.15 266.08 967.927 249.497C865.19 226.829 772.988 229.377 693.788 257.028C607.83 287.037 541.273 345.723 495.988 431.376C449.47 519.31 439.61 625.272 468.316 729.713C494.477 825.026 550.14 911.021 621.03 965.676C655.78 992.452 694.823 1014.85 736.132 1038.59C846.9 1102.18 961.445 1167.94 997.109 1324.18C999.773 1335.86 1003.95 1352.06 1009.28 1372.6C1029.75 1451.79 1064.02 1584.3 1078.85 1719.47C1096.86 1883.74 1080.29 2003.13 1029.55 2074.36C998.064 2118.56 952.898 2144.69 895.287 2152.03L895.088 2150.58C952.222 2143.32 997.03 2117.42 1028.28 2073.57C1078.81 2002.63 1095.27 1883.59 1077.3 1719.66C1062.47 1584.6 1028.24 1452.13 1007.77 1372.98C1002.44 1352.44 998.263 1336.24 995.599 1324.53C960.094 1168.93 845.827 1103.32 735.337 1039.88C693.948 1016.11 654.865 993.668 620.036 966.854C548.908 912.009 493.046 825.71 466.805 730.131C438.02 625.31 447.92 519.005 494.597 430.728C540.081 344.734 606.916 285.819 693.272 255.658C772.75 227.894 865.269 225.345 968.284 248.051C1136.66 285.173 1204.69 407.68 1270.45 526.156C1303.05 584.88 1336.77 645.62 1382.25 694.608C1433.18 749.491 1493.98 783.76 1568.13 799.354C1634.72 813.35 1694.96 811.068 1747.2 792.507C1794.24 775.81 1832.96 745.991 1859.16 706.322C1886.83 664.446 1899.28 614.433 1895.14 561.756C1890.85 506.911 1868.58 453.321 1830.81 406.768C1757.93 316.894 1617.39 251.323 1481.49 187.921C1343.45 123.529 1213.04 62.6745 1150.98 -20.8098C1097.38 -92.8841 1068.99 -163.056 1066.49 -229.387C1064.34 -285.563 1081.48 -338.202 1115.95 -381.523C1174.59 -455.271 1278.2 -493.039 1351.8 -467.48C1429.57 -440.476 1493.9 -394.379 1554.25 -322.381C1608.04 -258.218 1652.06 -181.465 1698.61 -100.224C1766.28 17.833 1836.3 139.922 1947.19 246.036C2003.49 299.893 2071.28 327.58 2143.24 326.021C2231.62 324.157 2304.66 280.001 2343.58 239.304C2371.57 210.018 2393.44 172.213 2405.13 132.809C2417.89 89.755 2418.37 46.4338 2406.44 7.48698C2389.74 -47.1297 2340.44 -119.774 2200.45 -155.526C2140.58 -170.815 2091.23 -176.634 2047.66 -181.807C1980.39 -189.756 1931.76 -195.499 1894.31 -232.24C1862.1 -263.808 1850.89 -323.446 1868.27 -370.912C1884.53 -415.336 1922.34 -443.252 1974.74 -449.528L1974.94 -448.082C1923.13 -441.883 1885.76 -414.308 1869.74 -370.455C1852.56 -323.483 1863.61 -264.531 1895.42 -233.305C1932.52 -196.944 1980.9 -191.202 2047.86 -183.291C2091.47 -178.156 2140.89 -172.299 2200.85 -156.972C2341.56 -121.029 2391.1 -47.9278 2407.91 7.03116C2413.68 25.934 2416.58 45.8639 2416.58 66.2502L2416.62 66.2882Z" fill="url(#paint31_linear_1289_6687)" style=""/>\n<path d="M2427.83 81.8432C2427.83 103.789 2424.49 126.305 2417.85 148.745C2406.08 188.376 2384.1 226.41 2355.95 255.848C2316.83 296.773 2243.35 341.159 2154.49 343.061C2082.09 344.582 2013.9 316.779 1957.33 262.618C1846.28 156.39 1776.22 34.1872 1708.48 -83.9842C1661.92 -165.186 1617.98 -241.863 1564.27 -305.912C1504.07 -377.682 1439.98 -423.627 1362.49 -450.517C1289.5 -475.848 1186.68 -438.308 1128.39 -365.055C1094.12 -321.963 1077.14 -269.666 1079.21 -213.87C1081.68 -147.844 1110.02 -77.9368 1163.42 -6.09061C1225.25 77.0893 1355.46 137.83 1493.34 202.183C1629.39 265.661 1770.1 331.308 1843.22 421.448C1881.19 468.23 1903.53 522.123 1907.87 577.235C1912 630.254 1899.52 680.573 1871.64 722.714C1845.25 762.65 1806.28 792.659 1758.93 809.47C1706.41 828.106 1645.89 830.427 1579.02 816.392C1504.55 800.722 1443.48 766.339 1392.35 711.19C1346.75 662.05 1312.99 601.234 1280.35 542.434C1247.55 483.405 1213.68 422.322 1167.63 372.612C1116.03 316.854 1054.4 281.674 979.177 265.091C876.44 242.423 784.24 244.971 705.04 272.622C619.081 302.669 552.525 361.316 507.239 446.969C460.721 534.903 450.861 640.865 479.567 745.306C505.729 840.619 561.391 926.614 632.281 981.269C667.03 1008.04 706.073 1030.45 747.383 1054.18C858.151 1117.77 972.697 1183.53 1008.36 1339.78C1010.79 1350.43 1014.36 1364.57 1018.9 1382.53C1038.38 1459.47 1070.94 1588.29 1084.5 1721.37C1101.04 1883.43 1083.58 2001.72 1032.57 2072.88C1000.33 2117.91 954.13 2144.54 895.287 2152.03L895.088 2150.58C953.493 2143.17 999.335 2116.73 1031.3 2072.08C1082.07 2001.19 1099.45 1883.28 1082.95 1721.52C1069.39 1588.52 1036.83 1459.77 1017.39 1382.87C1012.85 1364.92 1009.27 1350.73 1006.81 1340.08C971.305 1184.48 857.038 1118.88 746.548 1055.43C705.159 1031.66 666.076 1009.22 631.247 982.41C560.118 927.565 504.257 841.266 478.016 745.687C449.27 640.866 459.132 534.561 505.809 446.284C551.293 360.29 618.127 301.375 704.484 271.214C783.962 243.449 876.48 240.901 979.496 263.607C1147.87 300.728 1215.9 423.236 1281.66 541.712C1314.27 600.436 1347.98 661.175 1393.46 710.163C1444.4 765.046 1505.19 799.315 1579.34 814.908C1645.93 828.905 1706.17 826.623 1758.41 808.062C1805.45 791.365 1844.17 761.547 1870.37 721.878C1898.05 680.002 1910.49 629.988 1906.35 577.273C1902.06 522.428 1879.8 468.838 1842.02 422.285C1769.15 332.41 1628.6 266.84 1492.7 203.437C1354.66 139.046 1224.25 78.1923 1162.19 -5.29227C1108.59 -77.3665 1080.2 -147.539 1077.7 -213.87C1075.59 -270.046 1092.69 -322.685 1127.16 -366.006C1185.8 -439.754 1289.42 -477.521 1363.01 -451.962C1440.78 -424.958 1505.11 -378.861 1565.46 -306.863C1619.26 -242.7 1663.27 -165.948 1709.83 -84.7073C1777.5 33.3498 1847.51 155.439 1958.4 261.553C2014.7 315.409 2082.49 343.06 2154.45 341.539C2242.83 339.675 2315.87 295.517 2354.8 254.821C2382.79 225.535 2404.65 187.729 2416.34 148.326C2429.1 105.272 2429.58 61.9516 2417.65 23.0048C2400.96 -31.6119 2351.65 -104.256 2211.66 -140.008C2151.79 -155.298 2102.45 -161.117 2058.87 -166.29C1991.6 -174.239 1943.01 -179.982 1905.52 -216.723C1873.31 -248.291 1862.1 -307.928 1879.48 -355.394C1895.74 -399.818 1933.55 -427.734 1985.95 -433.972L1986.15 -432.527C1934.34 -426.328 1896.97 -398.753 1880.95 -354.899C1863.77 -307.928 1874.83 -248.938 1906.63 -217.75C1943.73 -181.389 1992.12 -175.646 2059.07 -167.735C2102.68 -162.562 2152.1 -156.743 2212.06 -141.416C2352.77 -105.474 2402.31 -32.3722 2419.13 22.5868C2424.89 41.4899 2427.79 61.4189 2427.79 81.8051L2427.83 81.8432Z" fill="url(#paint32_linear_1289_6687)" style=""/>\n<path d="M2439.09 97.3991C2439.09 119.345 2435.75 141.861 2429.11 164.301C2417.34 203.932 2395.35 241.966 2367.2 271.404C2328.08 312.329 2254.6 356.714 2165.74 358.616C2093.34 360.137 2025.16 332.335 1968.54 278.174C1857.49 171.946 1787.44 49.7421 1719.69 -68.429C1673.13 -149.631 1629.2 -226.307 1575.48 -290.356C1515.29 -362.126 1451.2 -408.071 1373.71 -434.961C1300.71 -460.292 1197.89 -422.752 1139.61 -349.499C1105.33 -306.445 1088.36 -254.11 1090.42 -198.314C1092.89 -132.288 1121.24 -62.3819 1174.63 9.42624C1236.46 92.6064 1366.67 153.347 1504.55 217.7C1640.61 281.178 1781.31 346.826 1854.43 436.966C1892.4 483.747 1914.75 537.641 1919.08 592.753C1923.21 645.772 1910.73 696.091 1882.86 738.232C1856.46 778.168 1817.5 808.177 1770.14 824.988C1717.62 843.624 1657.11 845.982 1590.23 831.909C1515.77 816.239 1454.69 781.857 1403.56 726.708C1357.96 677.568 1324.21 616.752 1291.56 557.952C1258.76 498.923 1224.89 437.84 1178.85 388.13C1127.24 332.372 1065.61 297.191 990.391 280.608C887.654 257.94 795.453 260.488 716.253 288.139C630.295 318.148 563.738 376.834 518.453 462.487C471.935 550.421 462.075 656.383 490.781 760.824C516.942 856.137 572.604 942.132 643.494 996.787C678.244 1023.56 717.287 1045.96 758.596 1069.7C869.364 1133.29 983.91 1199.05 1019.57 1355.29C1021.72 1364.76 1024.86 1377.47 1028.52 1392.19C1063.23 1532.49 1155.43 1905.15 1035.8 2071.32C1002.76 2117.23 955.483 2144.38 895.288 2152.03L895.089 2150.58C954.807 2142.98 1001.72 2116.05 1034.52 2070.48C1153.76 1904.85 1061.68 1532.65 1027.01 1392.53C1023.35 1377.81 1020.21 1365.11 1018.06 1355.64C982.558 1200.04 868.291 1134.43 757.801 1070.99C716.412 1047.22 677.329 1024.78 642.54 997.966C571.412 943.121 515.55 856.822 489.309 761.243C460.524 656.422 470.424 550.117 517.101 461.84C562.585 375.846 629.419 316.931 715.776 286.77C795.254 259.005 887.773 256.457 990.789 279.163C1159.17 316.284 1227.19 438.791 1292.96 557.267C1325.56 615.991 1359.27 676.731 1404.76 725.719C1455.69 780.602 1516.48 814.871 1590.63 830.464C1657.23 844.461 1717.46 842.179 1769.7 823.618C1816.74 806.921 1855.46 777.103 1881.67 737.434C1909.34 695.558 1921.78 645.544 1917.65 592.867C1913.35 538.022 1891.09 484.432 1853.32 437.879C1780.44 348.005 1639.89 282.434 1504 219.031C1365.95 154.602 1235.54 93.7854 1173.48 10.301C1119.89 -61.7732 1091.5 -131.945 1088.99 -198.276C1086.89 -254.452 1103.98 -307.091 1138.45 -350.412C1197.1 -424.16 1300.71 -461.928 1374.3 -436.369C1452.07 -409.365 1516.4 -363.267 1576.75 -291.269C1630.55 -227.106 1674.56 -150.354 1721.12 -69.1133C1788.79 48.9438 1858.8 171.033 1969.69 277.147C2025.99 331.003 2093.78 358.692 2165.74 357.133C2254.13 355.269 2327.16 311.111 2366.09 270.415C2394.08 241.129 2415.95 203.323 2427.63 163.92C2440.4 120.866 2440.87 77.5456 2428.95 38.5988C2412.25 -16.0179 2362.95 -88.6629 2222.96 -124.415C2163.08 -139.704 2113.74 -145.523 2070.16 -150.696C2002.89 -158.645 1954.27 -164.388 1916.81 -201.129C1884.61 -232.697 1873.4 -292.334 1890.77 -339.8C1907.03 -384.224 1944.84 -412.141 1997.24 -418.417L1997.44 -416.971C1945.64 -410.772 1908.26 -383.198 1892.24 -339.345C1875.07 -292.335 1886.12 -233.42 1917.93 -202.194C1955.02 -165.834 2003.41 -160.091 2070.36 -152.18C2113.98 -147.045 2163.4 -141.187 2223.35 -125.86C2364.06 -89.9178 2413.6 -16.817 2430.42 38.142C2436.18 57.0448 2439.09 76.9748 2439.09 97.361L2439.09 97.3991Z" fill="url(#paint33_linear_1289_6687)" style=""/>\n<path d="M2450.33 112.918C2450.33 134.863 2446.99 157.379 2440.36 179.819C2428.59 219.45 2406.6 257.485 2378.45 286.923C2339.33 327.847 2265.85 372.233 2176.99 374.134C2104.59 375.656 2036.41 347.852 1979.79 293.692C1868.74 187.463 1798.69 65.2609 1730.94 -52.9105C1684.38 -134.113 1640.45 -210.79 1586.73 -274.839C1526.54 -346.609 1462.45 -392.554 1384.96 -419.444C1311.96 -444.774 1209.14 -407.234 1150.86 -333.98C1116.58 -290.926 1099.57 -238.706 1101.67 -182.796C1104.14 -116.769 1132.49 -46.8631 1185.88 24.9448C1247.71 108.125 1377.92 168.865 1515.8 233.218C1651.86 296.697 1792.56 362.343 1865.68 452.484C1903.65 499.265 1925.99 553.16 1930.33 608.271C1934.5 661.29 1921.98 711.609 1894.11 753.751C1867.71 793.686 1828.74 823.695 1781.39 840.505C1728.87 859.142 1668.36 861.462 1601.48 847.428C1527.01 831.758 1465.94 797.376 1414.81 742.227C1369.21 693.087 1335.46 632.27 1302.81 573.47C1270.01 514.441 1236.14 453.359 1190.1 403.649C1138.49 347.891 1076.86 312.71 1001.64 296.127C898.904 273.458 806.702 276.007 727.502 303.657C641.544 333.704 574.987 392.353 529.702 478.005C483.184 565.939 473.324 671.902 502.03 776.343C528.191 871.656 583.854 957.651 654.744 1012.31C689.494 1039.08 728.497 1061.48 769.846 1085.22C880.614 1148.81 995.159 1214.57 1030.82 1370.81C1032.69 1379.03 1035.24 1389.45 1038.14 1401.58C1071.38 1538.77 1159.64 1903.17 1039.17 2069.65C1005.26 2116.51 956.872 2144.19 895.286 2152.03L895.087 2150.58C956.196 2142.83 1004.26 2115.29 1037.9 2068.81C1157.97 1902.87 1069.83 1538.92 1036.63 1401.92C1033.69 1389.83 1031.18 1379.37 1029.27 1371.15C993.768 1215.56 879.501 1149.95 769.011 1086.51C727.622 1062.74 688.539 1040.3 653.75 1013.48C582.622 958.639 526.76 872.34 500.519 776.723C471.774 671.939 481.634 565.597 528.311 477.32C573.795 391.325 640.63 332.411 726.986 302.25C806.464 274.485 898.982 271.937 1002 294.643C1170.38 331.764 1238.4 454.272 1304.17 572.747C1336.77 631.472 1370.48 692.212 1415.97 741.2C1466.9 796.082 1527.69 830.351 1601.84 845.945C1668.44 859.941 1728.67 857.659 1780.91 839.099C1827.95 822.402 1866.67 792.583 1892.88 752.913C1920.55 711.038 1932.99 661.024 1928.86 608.309C1924.56 553.464 1902.3 499.875 1864.53 453.321C1791.65 363.447 1651.1 297.876 1515.21 234.474C1377.16 170.082 1246.75 109.228 1184.73 25.7434C1131.13 -46.3308 1102.75 -116.503 1100.24 -182.834C1098.13 -239.01 1115.23 -291.611 1149.7 -334.97C1208.35 -408.717 1311.96 -446.485 1385.55 -420.927C1463.32 -393.922 1527.65 -347.826 1588 -275.828C1641.8 -211.664 1685.81 -134.911 1732.37 -53.671C1800.04 64.3862 1870.05 186.475 1980.94 292.59C2037.24 346.446 2105.03 374.096 2176.99 372.574C2265.38 370.711 2338.41 326.554 2377.34 285.858C2405.33 256.572 2427.2 218.766 2438.88 179.363C2451.65 136.308 2452.12 92.987 2440.2 54.0404C2423.5 -0.576257 2374.2 -73.2205 2234.21 -108.972C2174.33 -124.262 2124.99 -130.081 2081.41 -135.253C2014.14 -143.203 1965.55 -148.946 1928.06 -185.687C1895.86 -217.255 1884.65 -276.893 1902.02 -324.359C1918.28 -368.783 1956.09 -396.699 2008.49 -402.937L2008.69 -401.491C1956.89 -395.291 1919.51 -367.717 1903.49 -323.864C1886.31 -276.892 1897.37 -217.901 1929.18 -186.713C1966.27 -150.353 2014.66 -144.61 2081.61 -136.699C2125.23 -131.565 2174.65 -125.708 2234.6 -110.38C2375.31 -74.4381 2424.85 -1.33651 2441.67 53.6225C2447.43 72.5253 2450.33 92.4555 2450.33 112.842L2450.33 112.918Z" fill="url(#paint34_linear_1289_6687)" style=""/>\n<path d="M2461.55 128.472C2461.55 150.418 2458.21 172.934 2451.57 195.374C2439.8 235.006 2417.81 273.039 2389.66 302.477C2350.54 343.402 2277.07 387.787 2188.21 389.689C2115.8 391.21 2047.62 363.408 1991 309.248C1879.95 203.019 1809.9 80.8163 1742.15 -37.3548C1695.59 -118.557 1651.66 -195.234 1597.95 -259.283C1537.75 -331.053 1473.66 -376.998 1396.17 -403.888C1323.17 -429.219 1220.35 -391.679 1162.07 -318.426C1127.8 -275.372 1110.82 -223.075 1112.89 -167.241C1115.35 -101.214 1143.7 -31.3076 1197.1 40.5385C1258.92 123.719 1389.13 184.459 1527.01 248.812C1663.07 312.291 1803.78 377.937 1876.89 468.077C1914.86 514.859 1937.21 568.753 1941.54 623.864C1945.68 676.883 1933.19 727.202 1905.32 769.344C1878.92 809.279 1839.96 839.288 1792.6 856.099C1740.08 874.736 1679.57 877.094 1612.7 863.022C1538.23 847.352 1477.16 812.968 1426.03 757.819C1380.42 708.679 1346.67 647.864 1314.03 589.063C1281.23 530.035 1247.35 468.952 1201.31 419.241C1149.7 363.484 1088.08 328.302 1012.85 311.719C910.116 289.051 817.915 291.6 738.715 319.251C652.757 349.26 586.2 407.946 540.915 493.598C494.397 581.532 484.537 687.495 513.243 791.936C539.404 887.249 595.066 973.243 665.956 1027.9C700.706 1054.67 739.71 1077.08 781.059 1100.81C891.827 1164.4 1006.37 1230.16 1042.04 1386.41C1043.59 1393.18 1045.53 1401.32 1047.76 1410.75C1063.27 1476.05 1092.13 1597.57 1102.23 1724.87C1114.64 1881.11 1094.64 1996.55 1042.75 2067.9C1007.96 2115.74 958.344 2144.04 895.286 2152.07L895.087 2150.62C957.708 2142.67 1006.97 2114.56 1041.48 2067.06C1093.17 1995.97 1113.09 1880.88 1100.68 1724.98C1090.58 1597.8 1061.76 1476.36 1046.25 1411.09C1044.02 1401.66 1042.08 1393.52 1040.53 1386.75C1005.02 1231.15 890.753 1165.54 780.263 1102.1C738.874 1078.33 699.791 1055.89 665.002 1029.08C593.874 974.232 538.013 887.934 511.772 792.316C482.987 687.495 492.887 581.19 539.564 492.914C585.048 406.919 651.882 348.004 738.239 317.881C817.717 290.117 910.235 287.568 1013.25 310.275C1181.63 347.396 1249.66 469.903 1315.42 588.379C1348.02 647.103 1381.74 707.843 1427.22 756.83C1478.15 811.713 1538.94 845.982 1613.09 861.576C1679.69 875.572 1739.92 873.29 1792.17 854.73C1839.2 838.033 1877.93 808.214 1904.13 768.545C1931.8 726.67 1944.25 676.655 1940.11 623.94C1935.82 569.095 1913.55 515.505 1875.78 468.952C1802.9 379.078 1662.35 313.507 1526.46 250.105C1388.42 185.713 1258.01 124.86 1195.94 41.3752C1142.35 -30.699 1113.96 -100.872 1111.45 -167.203C1109.39 -223.455 1126.44 -276.018 1160.91 -319.339C1219.56 -393.086 1323.17 -430.854 1396.76 -405.295C1474.53 -378.291 1538.86 -332.194 1599.22 -260.196C1653.01 -196.033 1697.02 -119.281 1743.58 -38.0401C1811.25 80.017 1881.27 202.106 1992.15 308.221C2048.45 362.077 2116.24 389.765 2188.21 388.206C2276.59 386.342 2349.63 342.185 2388.55 301.489C2416.54 272.202 2438.41 234.397 2450.1 194.994C2462.86 151.939 2463.34 108.619 2451.41 69.672C2434.71 15.0553 2385.41 -57.5897 2245.42 -93.3416C2185.54 -108.631 2136.2 -114.45 2092.63 -119.623C2025.35 -127.572 1976.77 -133.315 1939.27 -170.056C1907.07 -201.624 1895.86 -261.261 1913.23 -308.727C1929.49 -353.151 1967.3 -381.067 2019.71 -387.305L2019.91 -385.86C1968.1 -379.66 1930.73 -352.086 1914.7 -308.233C1897.53 -261.261 1908.58 -202.271 1940.39 -171.083C1977.48 -134.722 2025.87 -128.979 2092.82 -121.067C2136.44 -115.895 2185.86 -110.076 2245.82 -94.7484C2386.52 -58.8065 2436.06 14.2943 2452.88 69.2533C2458.65 88.1562 2461.55 108.086 2461.55 128.472Z" fill="url(#paint35_linear_1289_6687)" style=""/>\n<path d="M2472.8 144.03C2472.8 165.975 2469.46 188.491 2462.82 210.931C2451.05 250.562 2429.06 288.596 2400.91 318.035C2361.79 358.959 2288.32 403.344 2199.46 405.246C2127.05 406.767 2058.87 378.965 2002.25 324.805C1891.2 218.576 1821.15 96.3727 1753.4 -21.7986C1706.84 -103.001 1662.91 -179.677 1609.19 -243.726C1549 -315.496 1484.91 -361.441 1407.42 -388.331C1334.42 -413.661 1231.6 -376.122 1173.32 -302.869C1139.05 -259.814 1122.07 -207.518 1124.14 -151.684C1126.6 -85.657 1154.95 -15.7512 1208.35 56.0566C1270.17 139.237 1400.38 199.977 1538.27 264.33C1674.32 327.809 1815.03 393.456 1888.14 483.596C1926.11 530.378 1948.46 584.272 1952.79 639.383C1956.97 692.402 1944.44 742.721 1916.57 784.863C1890.17 824.798 1851.21 854.807 1803.85 871.618C1751.33 890.255 1690.82 892.574 1623.95 878.54C1549.48 862.87 1488.41 828.449 1437.28 773.338C1391.67 724.198 1357.92 663.382 1325.28 604.581C1292.48 545.553 1258.6 484.471 1212.56 434.76C1160.95 379.003 1099.33 343.821 1024.1 327.239C921.366 304.57 829.165 307.119 749.965 334.769C664.007 364.778 597.45 423.465 552.165 509.117C505.647 597.051 495.787 703.013 524.493 807.455C550.654 902.767 606.316 988.762 677.206 1043.42C711.956 1070.19 750.959 1092.59 792.308 1116.33C903.076 1179.92 1017.62 1245.68 1053.29 1401.92C1054.44 1407.02 1055.83 1412.92 1057.34 1419.5C1084.97 1537.9 1168.98 1898.19 1046.53 2065.92C1010.82 2114.83 959.932 2143.81 895.245 2152.03L895.046 2150.58C959.256 2142.41 1009.79 2113.65 1045.25 2065.08C1167.31 1897.85 1083.38 1538.05 1055.83 1419.84C1054.28 1413.26 1052.93 1407.36 1051.77 1402.27C1016.27 1246.67 902.003 1181.06 791.513 1117.62C750.124 1093.85 711.041 1071.41 676.252 1044.6C605.124 989.751 549.262 903.453 523.021 807.873C494.236 703.09 504.136 596.747 550.813 508.471C596.297 422.476 663.131 363.561 749.488 333.401C828.966 305.636 921.485 303.088 1024.5 325.794C1192.88 362.915 1260.91 485.421 1326.67 603.897C1359.27 662.621 1392.99 723.362 1438.47 772.349C1489.4 827.232 1550.19 861.501 1624.34 877.095C1690.94 891.091 1751.17 888.809 1803.42 870.248C1850.45 853.552 1889.18 823.733 1915.38 784.064C1943.05 742.189 1955.49 692.174 1951.36 639.459C1947.07 584.614 1924.8 531.024 1887.03 484.471C1814.15 394.597 1673.6 329.026 1537.71 265.624C1399.66 201.232 1269.26 140.378 1207.23 56.8933C1153.64 -15.1809 1125.25 -85.3528 1122.74 -151.684C1120.64 -207.86 1137.73 -260.461 1172.2 -303.82C1230.85 -377.567 1334.46 -415.335 1408.05 -389.776C1485.82 -362.773 1550.15 -316.675 1610.51 -244.677C1664.3 -180.513 1708.31 -103.762 1754.87 -22.5211C1822.54 95.5361 1892.56 217.625 2003.44 323.74C2059.74 377.596 2127.53 405.246 2199.5 403.725C2287.88 401.861 2360.92 357.704 2399.84 317.008C2427.83 287.721 2449.7 249.916 2461.39 210.513C2474.15 167.458 2474.63 124.138 2462.7 85.1913C2446 30.5746 2396.7 -42.0706 2256.71 -77.8226C2196.83 -93.1121 2147.49 -98.931 2103.91 -104.104C2036.64 -112.053 1988.02 -117.796 1950.56 -154.536C1918.36 -186.105 1907.15 -245.742 1924.52 -293.208C1940.78 -337.631 1978.59 -365.549 2031 -371.786L2031.2 -370.341C1979.39 -364.141 1942.02 -336.567 1925.99 -292.714C1908.82 -245.742 1919.87 -186.751 1951.68 -155.564C1988.77 -119.203 2037.16 -113.46 2104.11 -105.549C2147.73 -100.377 2197.15 -94.557 2257.11 -79.2293C2397.81 -43.2872 2447.35 29.8134 2464.17 84.7724C2469.93 103.675 2472.84 123.605 2472.84 143.991L2472.8 144.03Z" fill="url(#paint36_linear_1289_6687)" style=""/>\n<path d="M2484.05 159.546C2484.05 181.491 2480.71 204.007 2474.07 226.447C2462.3 266.078 2440.32 304.113 2412.17 333.551C2373.05 374.475 2299.57 418.861 2210.71 420.762C2138.31 422.284 2070.12 394.48 2013.51 340.32C1902.46 234.091 1832.4 111.889 1764.65 -6.24444C1718.1 -87.4468 1674.16 -164.123 1620.45 -228.172C1560.25 -299.942 1496.16 -345.887 1418.67 -372.777C1345.67 -398.108 1242.86 -360.569 1184.57 -287.315C1150.3 -244.223 1133.32 -191.926 1135.39 -136.131C1137.86 -70.1038 1166.2 -0.19705 1219.6 71.6491C1281.42 154.829 1411.63 215.569 1549.52 279.923C1685.57 343.401 1826.28 409.047 1899.4 499.188C1937.37 545.969 1959.71 599.863 1964.04 654.974C1968.18 707.994 1955.7 758.313 1927.82 800.454C1901.42 840.39 1862.46 870.399 1815.11 887.21C1762.59 905.846 1702.07 908.167 1635.2 894.132C1560.73 878.462 1499.66 844.042 1448.53 788.931C1402.93 739.791 1369.17 678.974 1336.53 620.174C1303.73 561.145 1269.85 500.063 1223.81 450.353C1172.21 394.595 1110.58 359.414 1035.36 342.831C932.62 320.163 840.419 322.711 761.22 350.362C675.261 380.37 608.744 439.056 563.419 524.708C516.901 612.643 507.04 718.606 535.746 823.047C561.907 918.36 617.571 1004.35 688.461 1059.01C723.21 1085.79 762.213 1108.19 803.562 1131.92C914.331 1195.51 1028.88 1261.27 1064.54 1417.52C1065.26 1420.67 1066.05 1424.13 1066.93 1427.9C1079.81 1483.85 1106.57 1600.31 1114.8 1724.22C1124.93 1877.61 1103.38 1991.87 1050.66 2063.86C1013.97 2113.99 961.684 2143.66 895.326 2152.1L895.127 2150.66C961.048 2142.29 1012.97 2112.78 1049.43 2063.03C1101.91 1991.33 1123.42 1877.38 1113.28 1724.34C1105.09 1600.54 1078.34 1484.19 1065.45 1428.24C1064.58 1424.51 1063.78 1421.05 1063.07 1417.86C1027.56 1262.26 913.297 1196.65 802.807 1133.21C761.418 1109.44 722.335 1087 687.546 1060.19C616.418 1005.34 560.556 919.044 534.315 823.465C505.57 718.681 515.43 612.339 562.107 524.062C607.591 438.067 674.425 379.191 760.782 349.03C840.26 321.265 932.778 318.717 1035.79 341.423C1204.17 378.544 1272.2 501.052 1337.96 619.528C1370.56 678.252 1404.28 738.992 1449.76 787.98C1500.7 842.863 1561.49 877.13 1635.64 892.724C1702.23 906.721 1762.47 904.44 1814.71 885.879C1861.75 869.182 1900.47 839.363 1926.67 799.694C1954.34 757.818 1966.79 707.804 1962.65 655.089C1958.36 600.244 1936.09 546.654 1898.32 500.101C1825.45 410.226 1684.9 344.657 1549 281.254C1410.96 216.863 1280.55 156.008 1218.49 72.5237C1164.89 0.449435 1136.46 -69.7234 1134 -136.054C1131.89 -192.23 1148.99 -244.831 1183.46 -288.19C1242.1 -361.938 1345.71 -399.705 1419.31 -374.146C1497.08 -347.142 1561.41 -301.045 1621.76 -229.047C1675.55 -164.884 1719.57 -88.1309 1766.13 -6.89068C1833.8 111.167 1903.81 233.293 2014.7 339.369C2071 393.225 2138.79 420.914 2210.75 419.355C2299.13 417.491 2372.17 373.333 2411.09 332.637C2439.08 303.351 2460.95 265.545 2472.64 226.142C2485.4 183.088 2485.88 139.767 2473.95 100.821C2457.25 46.204 2407.95 -26.4403 2267.96 -62.192C2208.09 -77.4818 2158.74 -83.3016 2115.17 -88.4742C2047.9 -96.4232 1999.31 -102.166 1961.82 -138.907C1929.61 -170.475 1918.4 -230.112 1935.78 -277.578C1952.04 -322.002 1989.85 -349.919 2042.25 -356.156L2042.45 -354.711C1990.64 -348.512 1953.27 -320.937 1937.25 -277.084C1920.07 -230.112 1931.13 -171.122 1962.93 -139.934C2000.03 -103.574 2048.41 -97.8299 2115.37 -89.919C2158.98 -84.7464 2208.4 -78.9273 2268.36 -63.5997C2409.07 -27.6578 2458.61 45.4438 2475.42 100.403C2481.19 119.306 2484.09 139.235 2484.09 159.621L2484.05 159.546Z" fill="url(#paint37_linear_1289_6687)" style=""/>\n<path d="M2495.26 175.101C2495.26 197.047 2491.92 219.563 2485.28 242.003C2473.52 281.635 2451.53 319.668 2423.38 349.106C2384.26 390.031 2310.78 434.416 2221.92 436.318C2149.52 437.839 2081.33 410.037 2024.72 355.877C1913.67 249.648 1843.62 127.445 1775.87 9.27412C1729.31 -71.9283 1685.38 -148.605 1631.66 -212.654C1571.47 -284.424 1507.37 -330.369 1429.88 -357.259C1356.89 -382.589 1254.07 -345.05 1195.78 -271.797C1161.51 -228.742 1144.53 -176.408 1146.6 -120.612C1149.07 -54.5852 1177.42 15.3215 1230.81 87.1294C1292.64 170.31 1422.85 231.05 1560.73 295.403C1696.79 358.882 1837.49 424.528 1910.61 514.668C1948.58 561.45 1970.92 615.344 1975.26 670.455C1979.43 723.474 1966.91 773.793 1939.04 815.934C1912.64 855.87 1873.67 885.879 1826.32 902.69C1773.8 921.326 1713.29 923.647 1646.41 909.612C1571.94 893.942 1510.87 859.521 1459.74 804.41C1414.14 755.27 1380.38 694.455 1347.74 635.654C1314.94 576.625 1281.07 515.543 1235.03 465.832C1183.42 410.075 1121.79 374.893 1046.57 358.31C943.832 335.642 851.631 338.191 772.431 365.842C686.472 395.851 619.956 454.536 574.631 540.189C528.113 628.123 518.253 734.085 546.959 838.526C573.12 933.839 628.782 1019.83 699.672 1074.49C734.422 1101.26 773.466 1123.67 814.775 1147.4C925.543 1210.99 1040.09 1276.75 1075.75 1433L1076.35 1435.66C1087.56 1484.76 1113.8 1599.7 1121.24 1722.21C1130.54 1874.72 1108.24 1988.86 1055 2061.43C1017.27 2112.89 963.513 2143.36 895.247 2152.07L895.048 2150.62C962.877 2141.99 1016.27 2111.71 1053.73 2060.63C1106.76 1988.37 1128.95 1874.53 1119.69 1722.36C1112.25 1600 1086.01 1485.1 1074.84 1436.04L1074.24 1433.38C1038.74 1277.78 924.469 1212.17 813.979 1148.73C772.59 1124.96 733.507 1102.52 698.718 1075.71C627.589 1020.86 571.729 934.562 545.488 838.983C516.742 734.162 526.603 627.857 573.28 539.58C618.764 453.586 685.598 394.671 771.955 364.548C851.433 336.784 943.951 334.235 1046.97 356.942C1215.35 394.063 1283.37 516.569 1349.13 635.045C1381.74 693.769 1415.45 754.51 1460.94 803.497C1511.87 858.38 1572.66 892.649 1646.81 908.243C1713.41 922.239 1773.64 919.957 1825.88 901.396C1872.92 884.7 1911.64 854.881 1937.84 815.212C1965.52 773.337 1977.96 723.322 1973.83 670.607C1969.53 615.762 1947.27 562.172 1909.5 515.619C1836.62 425.745 1696.07 360.174 1560.17 296.772C1422.13 232.38 1291.72 171.527 1229.7 88.0422C1176.1 15.968 1147.72 -54.2049 1145.21 -120.536C1143.06 -176.712 1160.2 -229.313 1194.67 -272.671C1253.31 -346.419 1356.93 -384.187 1430.52 -358.628C1508.29 -331.625 1572.62 -285.527 1632.97 -213.529C1686.77 -149.366 1730.78 -72.6133 1777.34 8.6269C1845.01 126.684 1915.02 248.773 2025.91 354.888C2082.21 408.744 2150 436.394 2221.96 434.873C2310.35 433.009 2383.38 388.852 2422.31 348.156C2450.3 318.869 2472.16 281.064 2483.85 241.661C2496.61 198.606 2497.09 155.286 2485.2 116.339C2468.51 61.7226 2419.2 -10.9227 2279.21 -46.6744C2219.34 -61.9642 2170 -67.783 2126.42 -72.9556C2059.15 -80.9046 2010.52 -86.6478 1973.07 -123.388C1940.87 -154.957 1929.65 -214.594 1947.03 -262.06C1963.29 -306.483 2001.1 -334.4 2053.5 -340.638L2053.7 -339.193C2001.9 -332.993 1964.52 -305.419 1948.5 -261.566C1931.32 -214.594 1942.34 -155.603 1974.18 -124.416C2011.28 -88.0552 2059.67 -82.3113 2126.62 -74.4005C2170.23 -69.2279 2219.66 -63.409 2279.61 -48.0814C2420.32 -12.1392 2469.86 60.9613 2486.68 115.92C2492.44 134.823 2495.34 154.753 2495.34 175.139L2495.26 175.101Z" fill="url(#paint38_linear_1289_6687)" style=""/>\n<path d="M2506.51 190.621C2506.51 212.566 2503.17 235.082 2496.54 257.522C2484.77 297.153 2462.78 335.188 2434.63 364.626C2395.51 405.55 2322.03 449.936 2233.17 451.837C2160.77 453.359 2092.58 425.556 2035.97 371.396C1924.92 265.168 1854.87 142.964 1787.12 24.7929C1740.56 -56.4095 1696.63 -133.085 1642.91 -197.134C1582.72 -268.904 1518.63 -314.849 1441.14 -341.739C1368.14 -367.07 1265.32 -329.531 1207.03 -256.277C1172.76 -213.223 1155.79 -160.926 1157.85 -105.093C1160.32 -39.0657 1188.67 30.8401 1242.06 102.686C1303.89 185.866 1434.1 246.606 1571.98 310.96C1708.04 374.438 1848.74 440.085 1921.86 530.226C1959.83 577.007 1982.17 630.901 1986.51 686.012C1990.68 739.032 1978.16 789.351 1950.29 831.492C1923.89 871.428 1884.92 901.437 1837.57 918.248C1785.05 936.884 1724.54 939.204 1657.66 925.169C1583.19 909.499 1522.12 875.079 1470.99 819.968C1425.39 770.828 1391.64 710.011 1358.99 651.211C1326.19 592.182 1292.32 531.1 1246.28 481.39C1194.67 425.632 1133.04 390.451 1057.82 373.868C955.083 351.2 862.882 353.748 783.682 381.399C697.723 411.407 631.207 470.094 585.882 555.746C539.364 643.681 529.504 749.643 558.21 854.084C584.371 949.397 640.033 1035.39 710.923 1090.05C745.673 1116.82 784.716 1139.22 826.025 1162.96C936.793 1226.55 1051.34 1292.31 1087 1448.55C1152.25 1734.61 1142.82 1945.58 1059.81 2058.77C1020.96 2111.71 965.619 2143.09 895.286 2152.03L895.087 2150.58C964.943 2141.72 1019.97 2110.53 1058.53 2057.93C1141.31 1945.12 1150.62 1734.49 1085.49 1448.9C1049.99 1293.3 935.72 1227.69 825.23 1164.25C783.841 1140.48 744.758 1118.04 709.969 1091.23C638.84 1036.38 582.979 950.082 556.738 854.503C527.992 749.681 537.853 643.377 584.53 555.1C630.014 469.105 696.848 410.229 783.205 380.068C862.683 352.303 955.202 349.755 1058.22 372.461C1226.6 409.582 1294.62 532.089 1360.39 650.565C1392.99 709.289 1426.7 770.029 1472.19 819.017C1523.12 873.9 1583.91 908.168 1658.06 923.762C1724.66 937.759 1784.89 935.477 1837.13 916.916C1884.17 900.219 1922.89 870.401 1949.09 830.732C1976.77 788.856 1989.21 738.842 1985.08 686.165C1980.78 631.32 1958.52 577.73 1920.75 531.177C1847.87 441.303 1707.32 375.732 1571.42 312.329C1433.38 247.938 1302.97 187.083 1240.91 103.599C1187.31 31.5246 1158.93 -38.6472 1156.42 -104.978C1154.27 -161.154 1171.41 -213.755 1205.88 -257.114C1264.53 -330.862 1368.14 -368.63 1441.73 -343.071C1519.5 -316.067 1583.83 -269.969 1644.18 -197.971C1697.98 -133.808 1741.99 -57.0557 1788.55 24.1845C1856.22 142.242 1926.23 264.331 2037.12 370.445C2093.42 424.301 2161.21 451.99 2233.17 450.431C2321.56 448.567 2394.59 404.409 2433.52 363.713C2461.51 334.427 2483.37 296.621 2495.06 257.218C2507.83 214.164 2508.3 170.844 2496.38 131.897C2479.68 77.2802 2430.38 4.63493 2290.38 -31.1168C2230.51 -46.4066 2181.17 -52.2254 2137.59 -57.398C2070.32 -65.347 2021.73 -71.0902 1984.24 -107.831C1952.04 -139.399 1940.82 -199.036 1958.2 -246.502C1974.46 -290.926 2012.27 -318.843 2064.67 -325.081L2064.87 -323.635C2013.07 -317.436 1975.69 -289.861 1959.67 -246.008C1942.49 -199.036 1953.51 -140.084 1985.35 -108.858C2022.45 -72.4976 2070.84 -66.7547 2137.79 -58.8438C2181.41 -53.6712 2230.83 -47.8514 2290.78 -32.5238C2431.49 3.41837 2481.03 76.519 2497.85 131.478C2503.61 150.381 2506.51 170.311 2506.51 190.697L2506.51 190.621Z" fill="url(#paint39_linear_1289_6687)" style=""/>\n<path d="M2517.77 206.174C2517.77 228.119 2514.43 250.636 2507.79 273.076C2496.02 312.707 2474.03 350.74 2445.88 380.179C2406.76 421.103 2333.29 465.489 2244.43 467.391C2172.02 468.912 2103.84 441.109 2047.22 386.949C1936.18 280.72 1866.12 158.518 1798.37 40.3464C1751.81 -40.856 1707.88 -117.533 1654.16 -181.582C1593.97 -253.352 1529.88 -299.297 1452.39 -326.187C1379.39 -351.517 1276.58 -313.978 1218.29 -240.725C1184.02 -197.67 1167.04 -145.374 1169.11 -89.5398C1171.57 -23.513 1199.92 46.3938 1253.32 118.202C1315.14 201.382 1445.35 262.122 1583.24 326.475C1719.29 389.954 1860 455.6 1933.11 545.74C1971.08 592.522 1993.43 646.417 1997.76 701.528C2001.94 754.547 1989.41 804.866 1961.54 847.008C1935.14 886.943 1896.18 916.951 1848.82 933.762C1796.3 952.399 1735.79 954.719 1668.92 940.685C1594.45 925.015 1533.38 890.594 1482.25 835.483C1436.64 786.343 1402.89 725.527 1370.25 666.726C1337.45 607.698 1303.57 546.616 1257.53 496.905C1205.92 441.148 1144.3 405.966 1069.07 389.384C966.336 366.715 874.136 369.264 794.936 396.914C708.977 426.923 642.421 485.61 597.136 571.262C550.618 659.196 540.757 765.158 569.463 869.6C595.624 964.912 651.287 1050.91 722.177 1105.56C756.926 1132.34 795.969 1154.74 837.279 1178.47C948.047 1242.07 1062.59 1307.83 1098.26 1464.07C1119.73 1558.13 1132.65 1651.08 1135.71 1732.89C1141.04 1875.9 1117.22 1984.6 1064.9 2055.88C1024.86 2110.42 967.808 2142.75 895.327 2151.99L895.128 2150.54C967.211 2141.38 1023.91 2109.28 1063.67 2055.08C1115.79 1984.03 1139.53 1875.67 1134.2 1732.97C1131.14 1651.23 1118.22 1558.35 1096.79 1464.37C1061.28 1308.78 947.014 1243.17 836.524 1179.73C795.135 1155.96 756.052 1133.52 721.223 1106.7C650.094 1051.86 594.233 965.558 567.992 869.979C539.207 765.158 549.106 658.853 595.783 570.577C641.268 484.582 708.102 425.667 794.458 395.545C873.936 367.78 966.455 365.232 1069.47 387.938C1237.85 425.059 1305.88 547.566 1371.64 666.042C1404.24 724.766 1437.96 785.507 1483.44 834.494C1534.37 889.377 1595.16 923.646 1669.31 939.24C1735.91 953.236 1796.14 950.954 1848.39 932.393C1895.42 915.697 1934.15 885.878 1960.35 846.208C1988.02 804.333 2000.47 754.318 1996.33 701.641C1992.04 646.796 1969.77 593.207 1932 546.653C1859.12 456.779 1718.57 391.209 1582.68 327.807C1444.64 263.415 1314.23 202.561 1252.16 119.076C1198.57 47.0022 1170.18 -23.1707 1167.68 -89.5017C1165.57 -145.678 1182.66 -198.279 1217.14 -241.637C1275.78 -315.385 1379.39 -353.152 1452.99 -327.593C1530.75 -300.589 1595.08 -254.493 1655.44 -182.494C1709.23 -118.331 1753.24 -41.5784 1799.8 39.6621C1867.47 157.719 1937.49 279.807 2048.37 385.922C2104.67 439.778 2172.46 467.467 2244.43 465.907C2332.81 464.044 2405.85 419.887 2444.77 379.191C2472.76 349.905 2494.63 312.099 2506.32 272.696C2519.08 229.641 2519.56 186.32 2507.63 147.373C2490.93 92.7568 2441.63 20.1125 2301.64 -15.6395C2241.76 -30.929 2192.42 -36.7489 2148.85 -41.9215C2081.57 -49.8704 2032.95 -55.6136 1995.5 -92.3543C1963.29 -123.922 1952.08 -183.559 1969.45 -231.026C1985.71 -275.449 2023.53 -303.366 2075.93 -309.642L2076.13 -308.197C2024.32 -301.997 1986.95 -274.422 1970.92 -230.569C1953.75 -183.597 1964.8 -124.644 1996.61 -93.4185C2033.7 -57.0582 2082.09 -51.3153 2149.04 -43.4044C2192.66 -38.2698 2242.08 -32.4129 2302.04 -17.085C2442.74 18.8569 2492.28 91.9584 2509.1 146.917C2514.87 165.82 2517.77 185.75 2517.77 206.137L2517.77 206.174Z" fill="url(#paint40_linear_1289_6687)" style=""/>\n<path d="M2528.98 221.732C2528.98 243.678 2525.64 266.194 2519 288.634C2507.23 328.265 2485.24 366.299 2457.1 395.737C2417.97 436.662 2344.5 481.047 2255.64 482.949C2183.24 484.47 2115.05 456.668 2058.43 402.507C1947.39 296.279 1877.33 174.076 1809.58 55.905C1763.02 -25.2974 1719.09 -101.974 1665.38 -166.023C1605.18 -237.793 1541.09 -283.738 1463.6 -310.628C1390.6 -335.959 1287.79 -298.419 1229.5 -225.166C1195.23 -182.112 1178.25 -129.853 1180.32 -73.9815C1182.78 -7.95462 1211.13 61.9524 1264.53 133.798C1326.35 216.978 1456.56 277.719 1594.45 342.072C1730.5 405.55 1871.21 471.197 1944.33 561.337C1982.29 608.119 2004.64 662.013 2008.97 717.124C2013.15 770.143 2000.62 820.462 1972.75 862.603C1946.35 902.539 1907.39 932.548 1860.04 949.359C1807.51 967.996 1747 970.316 1680.13 956.281C1605.66 940.611 1544.59 906.228 1493.46 851.079C1447.86 801.939 1414.1 741.123 1381.46 682.323C1348.66 623.295 1314.78 562.212 1268.74 512.501C1217.14 456.744 1155.51 421.562 1080.29 404.979C977.549 382.311 885.347 384.859 806.147 412.51C720.188 442.519 653.632 501.205 608.347 586.858C561.829 674.792 551.969 780.754 580.675 885.195C606.836 980.508 662.499 1066.5 733.389 1121.16C768.138 1147.93 807.182 1170.34 848.491 1194.07C959.259 1257.66 1073.8 1323.42 1109.47 1479.67C1120.96 1529.98 1140.6 1630.7 1143.14 1739.89C1146.36 1877.31 1121.83 1982.66 1070.27 2052.95C1029 2109.16 970.153 2142.52 895.327 2152.03L895.128 2150.58C969.517 2141.11 1028.04 2107.99 1069.03 2052.11C1188.99 1888.57 1129.19 1572.85 1108.04 1479.97C1072.53 1324.37 958.265 1258.76 847.775 1195.32C806.386 1171.55 767.303 1149.11 732.474 1122.3C661.345 1067.45 605.485 981.155 579.244 885.576C550.458 780.755 560.358 674.45 607.035 586.173C652.519 500.179 719.354 441.302 805.71 411.141C885.188 383.376 977.707 380.828 1080.72 403.534C1249.1 440.655 1317.13 563.162 1382.89 681.638C1415.49 740.362 1449.21 801.103 1494.69 850.09C1545.62 904.973 1606.41 939.242 1680.57 954.836C1747.16 968.832 1807.4 966.55 1859.64 947.989C1906.67 931.292 1945.4 901.474 1971.6 861.805C1999.27 819.93 2011.72 769.915 2007.58 717.2C2003.29 662.355 1981.02 608.765 1943.25 562.212C1870.37 472.338 1729.83 406.767 1593.93 343.365C1455.89 278.973 1325.48 218.119 1263.45 134.635C1209.86 62.5608 1181.47 -7.61209 1178.97 -73.9434C1176.86 -130.119 1193.96 -182.758 1228.43 -226.079C1287.07 -299.827 1390.68 -337.595 1464.28 -312.036C1542.04 -285.032 1606.38 -238.934 1666.73 -166.936C1720.52 -102.773 1764.54 -26.0208 1811.09 55.2197C1878.76 173.277 1948.78 295.366 2059.67 401.48C2115.96 455.336 2183.75 482.987 2255.72 481.466C2344.1 479.602 2417.14 435.445 2456.06 394.748C2484.05 365.462 2505.92 327.657 2517.61 288.253C2530.37 245.199 2530.85 201.879 2518.92 162.932C2502.22 108.315 2452.92 35.6701 2312.93 -0.0818636C2253.05 -15.3714 2203.71 -21.1903 2160.14 -26.3629C2092.86 -34.3121 2044.28 -40.0552 2006.79 -76.796C1974.58 -108.364 1963.37 -168.001 1980.74 -215.467C1997.01 -259.891 2034.82 -287.807 2087.22 -294.045L2087.42 -292.6C2035.61 -286.401 1998.24 -258.826 1982.22 -214.973C1965.04 -168.002 1976.09 -109.011 2007.9 -77.8228C2044.99 -41.4625 2093.38 -35.7188 2160.34 -27.8077C2203.95 -22.6732 2253.37 -16.8162 2313.33 -1.4886C2454.03 34.4535 2503.57 107.554 2520.39 162.513C2526.16 181.416 2529.06 201.346 2529.06 221.732L2528.98 221.732Z" fill="url(#paint41_linear_1289_6687)" style=""/>\n<path d="M2540.23 237.248C2540.23 259.194 2536.89 281.709 2530.25 304.149C2518.48 343.78 2496.5 381.815 2468.35 411.253C2429.22 452.178 2355.75 496.563 2266.89 498.465C2194.49 499.986 2126.3 472.184 2069.72 418.023C1958.68 311.795 1888.62 189.591 1820.87 71.4199C1774.31 -9.78252 1730.38 -86.4581 1676.67 -150.507C1616.47 -222.277 1552.38 -268.222 1474.89 -295.112C1401.89 -320.443 1299.08 -282.903 1240.79 -209.65C1206.52 -166.558 1189.54 -114.261 1191.61 -58.4654C1194.07 7.5615 1222.42 77.4673 1275.82 149.275C1337.64 232.455 1467.85 293.196 1605.74 357.549C1741.79 421.027 1882.5 486.675 1955.62 576.815C1993.59 623.596 2015.93 677.49 2020.26 732.601C2024.44 785.621 2011.91 835.94 1984.04 878.081C1957.64 918.017 1918.68 948.026 1871.33 964.837C1818.81 983.473 1758.29 985.831 1691.42 971.758C1616.95 956.088 1555.88 921.706 1504.75 866.557C1459.15 817.417 1425.39 756.6 1392.75 697.8C1359.95 638.771 1326.07 577.689 1280.03 527.979C1228.43 472.221 1166.8 437.04 1091.57 420.457C988.838 397.789 896.637 400.337 817.438 427.988C731.479 457.996 664.923 516.683 619.637 602.335C573.119 690.27 563.259 796.232 591.965 900.673C618.127 995.986 673.789 1081.98 744.679 1136.64C779.428 1163.41 818.471 1185.81 859.781 1209.55C970.549 1273.14 1085.09 1338.9 1120.76 1495.14C1135.11 1558.01 1200.36 1880.27 1075.99 2049.75C1033.45 2107.76 972.657 2142.18 895.326 2151.99L895.127 2150.54C971.981 2140.77 1032.41 2106.58 1074.72 2048.92C1198.69 1879.93 1133.56 1558.24 1119.25 1495.45C1083.74 1339.85 969.476 1274.24 858.986 1210.8C817.597 1187.03 778.514 1164.59 743.685 1137.78C672.556 1082.93 616.695 996.633 590.454 901.054C561.668 796.232 571.568 689.928 618.245 601.651C663.729 515.656 730.565 456.742 816.921 426.619C896.399 398.854 988.918 396.306 1091.93 419.012C1260.31 456.133 1328.34 578.64 1394.1 697.116C1426.7 755.84 1460.42 816.58 1505.9 865.568C1556.83 920.451 1617.62 954.719 1691.78 970.313C1758.37 984.31 1818.61 982.028 1870.85 963.467C1917.88 946.77 1956.61 916.952 1982.81 877.283C2010.48 835.407 2022.93 785.393 2018.79 732.678C2014.5 677.833 1992.23 624.243 1954.46 577.69C1881.58 487.815 1741.04 422.245 1605.14 358.842C1467.1 294.413 1336.69 233.596 1274.63 150.112C1221.03 78.0376 1192.64 7.8657 1190.14 -58.4654C1187.99 -114.641 1205.13 -167.242 1239.6 -210.601C1298.24 -284.349 1401.85 -322.117 1475.45 -296.558C1553.22 -269.554 1617.55 -223.456 1677.9 -151.458C1731.69 -87.295 1775.71 -10.5428 1822.26 70.6975C1889.93 188.755 1959.95 310.844 2070.84 416.958C2127.14 470.814 2194.92 498.503 2266.89 496.944C2355.27 495.08 2428.31 450.922 2467.23 410.226C2495.22 380.94 2517.09 343.134 2528.78 303.731C2541.54 260.677 2542.02 217.356 2530.09 178.41C2513.39 123.793 2464.09 51.1479 2324.1 15.3962C2264.22 0.106371 2214.88 -5.71247 2171.31 -10.8851C2104.04 -18.8341 2055.41 -24.5772 2017.96 -61.3179C1985.75 -92.886 1974.54 -152.523 1991.91 -199.989C2008.18 -244.413 2045.99 -272.33 2098.39 -278.606L2098.59 -277.16C2046.78 -270.961 2009.41 -243.387 1993.39 -199.534C1976.21 -152.562 1987.26 -93.6089 2019.07 -62.3831C2056.17 -26.0225 2104.55 -20.2799 2171.51 -12.3687C2215.12 -7.2342 2264.54 -1.37654 2324.5 13.9513C2465.21 49.8932 2514.74 122.994 2531.56 177.953C2537.33 196.856 2540.23 216.786 2540.23 237.172L2540.23 237.248Z" fill="url(#paint42_linear_1289_6687)" style=""/>\n<path d="M2551.48 252.804C2551.48 274.75 2548.14 297.266 2541.5 319.706C2529.73 359.337 2507.75 397.371 2479.6 426.809C2440.48 467.734 2367 512.12 2278.14 514.022C2205.74 515.543 2137.55 487.74 2080.94 433.579C1969.89 327.351 1899.83 205.148 1832.08 86.977C1785.53 5.77461 1741.59 -70.9022 1687.88 -134.951C1627.68 -206.721 1563.59 -252.666 1486.1 -279.556C1413.1 -304.887 1310.29 -267.347 1252 -194.094C1217.73 -151.04 1200.79 -98.7432 1202.82 -42.9095C1205.29 23.1174 1233.63 93.0241 1287.03 164.87C1348.86 248.05 1479.07 308.79 1616.95 373.144C1753 436.623 1893.71 502.269 1966.83 592.409C2004.8 639.191 2027.14 693.085 2031.48 748.196C2035.65 801.215 2023.13 851.534 1995.25 893.675C1968.86 933.611 1929.89 963.62 1882.54 980.431C1830.02 999.067 1769.5 1001.39 1702.63 987.353C1628.16 971.683 1567.09 937.301 1515.96 882.152C1470.36 833.012 1436.6 772.195 1403.96 713.395C1371.16 654.366 1337.28 593.284 1291.24 543.574C1239.64 487.816 1178.01 452.635 1102.79 436.052C1000.05 413.384 907.85 415.932 828.65 443.583C742.691 473.592 676.135 532.277 630.849 617.93C584.331 705.864 574.471 811.827 603.177 916.268C629.339 1011.58 685.001 1097.58 755.891 1152.23C790.64 1179.01 829.683 1201.41 870.993 1225.14C981.761 1288.73 1096.31 1354.49 1131.97 1510.74C1138.25 1538.24 1158.45 1635.68 1158.45 1748.37C1158.45 1750.12 1158.45 1751.91 1158.45 1753.66C1157.73 1879.82 1132.01 1978.33 1082.03 2046.48C1038.1 2106.39 975.281 2141.87 895.326 2152.07L895.127 2150.62C974.644 2140.5 1037.11 2105.21 1080.76 2045.65C1130.58 1977.76 1156.18 1879.51 1156.9 1753.66C1157.57 1638.84 1136.82 1538.96 1130.46 1511.04C1094.95 1355.45 980.688 1289.84 870.198 1226.4C828.809 1202.63 789.726 1180.18 754.937 1153.37C683.808 1098.53 627.947 1012.23 601.706 916.648C572.92 811.827 582.82 705.522 629.497 617.245C674.981 531.251 741.816 472.374 828.172 442.213C907.65 414.448 1000.17 411.9 1103.19 434.606C1271.56 471.727 1339.59 594.235 1405.35 712.711C1437.96 771.435 1471.67 832.175 1517.15 881.163C1568.09 936.046 1628.88 970.314 1703.03 985.907C1769.62 999.904 1829.86 997.623 1882.1 979.062C1929.14 962.365 1967.86 932.546 1994.06 892.877C2021.73 851.001 2034.18 800.987 2030.04 748.31C2025.75 693.465 2003.49 639.875 1965.71 593.322C1892.84 503.448 1752.29 437.877 1616.39 374.475C1478.35 310.083 1347.94 249.229 1285.92 165.745C1232.32 93.6706 1203.93 23.4978 1201.43 -42.8333C1199.32 -99.0093 1216.42 -151.61 1250.89 -194.969C1309.53 -268.717 1413.15 -306.484 1486.74 -280.925C1564.51 -253.921 1628.84 -207.824 1689.19 -135.826C1742.98 -71.6629 1787 5.09028 1833.56 86.3305C1901.23 204.388 1971.24 326.476 2082.13 432.59C2138.43 486.446 2206.22 514.097 2278.18 512.576C2366.56 510.712 2439.6 466.555 2478.52 425.858C2506.51 396.572 2528.38 358.767 2540.07 319.363C2552.83 276.309 2553.31 232.989 2541.38 194.042C2524.68 139.425 2475.38 66.7809 2335.39 31.0292C2275.52 15.7394 2226.18 9.91985 2182.6 4.74724C2115.33 -3.20197 2066.74 -8.94513 2029.25 -45.6859C1997.04 -77.254 1985.83 -136.891 2003.21 -184.357C2019.47 -228.781 2057.28 -256.697 2109.68 -262.935L2109.88 -261.49C2058.07 -255.291 2020.7 -227.715 2004.68 -183.862C1987.5 -136.89 1998.56 -77.9385 2030.36 -46.7127C2067.46 -10.3524 2115.84 -4.60871 2182.8 3.30242C2226.41 8.43694 2275.83 14.2939 2335.79 29.6215C2476.5 65.5634 2526.04 138.665 2542.85 193.624C2548.62 212.527 2551.52 232.456 2551.52 252.842L2551.48 252.804Z" fill="url(#paint43_linear_1289_6687)" style=""/>\n<path d="M2562.69 268.362C2562.69 290.307 2559.35 312.824 2552.71 335.264C2540.95 374.895 2518.96 412.929 2490.81 442.367C2451.69 483.291 2378.21 527.676 2289.35 529.578C2216.95 531.1 2148.77 503.297 2092.15 449.137C1981.1 342.908 1911.05 220.705 1843.3 102.533C1796.74 21.3312 1752.81 -55.3445 1699.09 -119.394C1638.9 -191.164 1574.81 -237.109 1497.32 -263.999C1424.32 -289.329 1321.5 -251.79 1263.22 -178.537C1228.98 -135.482 1211.97 -83.2617 1214.03 -27.3518C1216.5 38.675 1244.85 108.582 1298.24 180.428C1360.07 263.608 1490.28 324.348 1628.16 388.701C1764.22 452.18 1904.92 517.826 1978.04 607.966C2016.01 654.748 2038.35 708.642 2042.69 763.753C2046.86 816.772 2034.34 867.091 2006.47 909.233C1980.07 949.168 1941.1 979.177 1893.75 995.988C1841.23 1014.62 1780.72 1016.95 1713.84 1002.91C1639.37 987.241 1578.3 952.858 1527.17 897.708C1481.57 848.569 1447.82 787.753 1415.17 728.952C1382.37 669.924 1348.5 608.841 1302.46 559.131C1250.85 503.373 1189.22 468.192 1114 451.609C1011.26 428.941 919.062 431.489 839.862 459.139C753.903 489.148 687.347 547.835 642.061 633.487C595.543 721.421 585.683 827.384 614.389 931.825C640.551 1027.14 696.214 1113.13 767.104 1167.79C801.853 1194.56 840.856 1216.96 882.206 1240.7C992.974 1304.29 1107.52 1370.05 1143.18 1526.29C1149.19 1552.61 1168.59 1647.32 1166.24 1760.47C1163.74 1880.96 1137.54 1976.01 1088.43 2042.95C1043.03 2104.83 978.065 2141.53 895.287 2152.07L895.088 2150.62C977.428 2140.16 1042.04 2103.65 1087.16 2042.11C1136.11 1975.4 1162.19 1880.62 1164.69 1760.43C1166.56 1670.63 1154.04 1580.76 1141.67 1526.6C1106.17 1371 991.901 1305.39 881.411 1241.95C840.022 1218.18 800.939 1195.74 766.15 1168.93C695.021 1114.08 639.16 1027.78 612.919 932.167C584.133 827.346 594.033 721.041 640.71 632.765C686.194 546.77 753.029 487.855 839.385 457.733C918.863 429.968 1011.38 427.42 1114.4 450.126C1282.78 487.247 1350.8 609.754 1416.56 728.229C1449.17 786.953 1482.88 847.694 1528.37 896.681C1579.3 951.564 1640.09 985.833 1714.24 1001.43C1780.84 1015.42 1841.07 1013.14 1893.31 994.581C1940.35 977.884 1979.07 948.065 2005.27 908.396C2032.95 866.521 2045.39 816.506 2041.26 763.791C2036.96 708.946 2014.7 655.357 1976.93 608.803C1904.05 518.929 1763.5 453.358 1627.61 389.956C1489.56 325.565 1359.15 264.711 1297.09 181.226C1243.49 109.152 1215.11 38.9792 1212.6 -27.3518C1210.49 -83.5279 1227.59 -136.129 1262.06 -179.487C1320.71 -253.235 1424.32 -291.003 1497.91 -265.444C1575.68 -238.44 1640.01 -192.343 1700.36 -120.345C1754.16 -56.1814 1798.17 20.5707 1844.73 101.811C1912.4 219.868 1982.41 341.957 2093.3 448.072C2149.6 501.928 2217.39 529.617 2289.35 528.057C2377.74 526.194 2450.77 482.036 2489.7 441.34C2517.69 412.054 2539.56 374.248 2551.24 334.845C2564.01 291.79 2564.48 248.47 2552.56 209.523C2535.86 154.907 2486.56 82.2614 2346.57 46.5097C2286.69 31.2199 2237.35 25.4011 2193.77 20.2284C2126.5 12.2795 2077.91 6.53631 2040.42 -30.2044C2008.22 -61.7725 1997.01 -121.409 2014.38 -168.876C2030.64 -213.299 2068.45 -241.216 2120.85 -247.453L2121.05 -246.009C2069.25 -239.809 2031.87 -212.235 2015.85 -168.382C1998.67 -121.41 2009.69 -62.4193 2041.53 -31.2315C2078.63 5.12909 2127.02 10.8727 2193.97 18.7836C2237.59 23.9562 2287.01 29.7753 2346.96 45.103C2487.67 81.0448 2537.21 154.146 2554.03 209.105C2559.79 228.007 2562.69 247.937 2562.69 268.324L2562.69 268.362Z" fill="url(#paint44_linear_1289_6687)" style=""/>\n<path d="M2573.95 283.877C2573.95 305.823 2570.61 328.338 2563.97 350.778C2552.2 390.409 2530.21 428.444 2502.06 457.882C2462.94 498.807 2389.47 543.192 2300.61 545.094C2228.21 546.615 2160.02 518.813 2103.4 464.652C1992.35 358.424 1922.3 236.22 1854.55 118.049C1807.99 36.8466 1764.06 -39.8292 1710.35 -103.878C1650.15 -175.648 1586.06 -221.593 1508.57 -248.483C1435.57 -273.814 1332.75 -236.274 1274.47 -163.021C1240.2 -119.967 1223.18 -67.6702 1225.29 -11.8365C1227.75 54.1904 1256.1 124.096 1309.5 195.904C1371.32 279.084 1501.53 339.825 1639.42 404.178C1775.47 467.656 1916.18 533.304 1989.29 623.444C2027.26 670.226 2049.61 724.119 2053.94 779.231C2058.12 832.25 2045.59 882.569 2017.72 924.71C1991.32 964.646 1952.36 994.655 1905.01 1011.47C1852.48 1030.1 1791.97 1032.42 1725.1 1018.39C1650.63 1002.72 1589.56 968.297 1538.43 913.186C1492.82 864.046 1459.07 803.229 1426.43 744.429C1393.63 685.4 1359.75 624.318 1313.71 574.608C1262.1 518.85 1200.48 483.669 1125.25 467.086C1022.52 444.418 930.315 446.966 851.116 474.617C765.157 504.625 698.601 563.312 653.315 648.964C606.797 736.899 596.937 842.861 625.643 947.302C651.805 1042.62 707.467 1128.61 778.357 1183.26C813.106 1210.04 852.11 1232.44 893.46 1256.18C1004.23 1319.77 1118.77 1385.53 1154.44 1541.77C1166.13 1592.93 1177.42 1679 1174.24 1767.16C1170.06 1881.95 1143.5 1973.46 1095.31 2039.14C1048.36 2103.11 981.088 2141.11 895.288 2151.99L895.089 2150.54C980.412 2139.7 1047.37 2101.94 1094.04 2038.31C1142.03 1972.85 1168.51 1881.64 1172.69 1767.12C1175.87 1679.15 1164.57 1593.19 1152.93 1542.11C1117.42 1386.52 1003.15 1320.91 892.664 1257.47C851.275 1233.7 812.192 1211.26 777.403 1184.44C706.274 1129.6 650.413 1043.3 624.172 947.683C595.386 842.9 605.286 736.557 651.963 648.28C697.447 562.286 764.283 503.371 850.639 473.248C930.117 445.483 1022.64 442.935 1125.65 465.641C1294.03 502.762 1362.06 625.269 1427.82 743.745C1460.42 802.469 1494.14 863.209 1539.62 912.197C1590.55 967.08 1651.34 1001.35 1725.49 1016.94C1792.09 1030.94 1852.32 1028.66 1904.57 1010.1C1951.6 993.399 1990.33 963.581 2016.53 923.912C2044.2 882.036 2056.64 832.022 2052.51 779.307C2048.22 724.462 2025.95 670.872 1988.18 624.319C1915.3 534.445 1774.76 468.874 1638.86 405.471C1500.82 341.08 1370.41 280.225 1308.38 196.741C1254.79 124.667 1226.4 54.4946 1223.9 -11.8365C1221.79 -68.0125 1238.88 -120.614 1273.35 -163.972C1332 -237.72 1435.61 -275.488 1509.2 -249.929C1586.97 -222.925 1651.3 -176.827 1711.66 -104.829C1765.45 -40.6661 1809.46 36.0861 1856.02 117.326C1923.69 235.384 1993.71 357.473 2104.59 463.587C2160.89 517.443 2228.68 545.132 2300.65 543.573C2389.03 541.709 2462.07 497.551 2500.99 456.855C2528.98 427.569 2550.85 389.763 2562.54 350.36C2575.3 307.306 2575.78 263.985 2563.85 225.039C2547.15 170.422 2497.85 97.7768 2357.86 62.0251C2297.98 46.7353 2248.64 40.9164 2205.07 35.7438C2137.79 27.7949 2089.17 22.0517 2051.71 -14.689C2019.51 -46.2571 2008.3 -105.894 2025.67 -153.36C2041.93 -197.784 2079.74 -225.701 2132.15 -231.939L2132.35 -230.493C2080.54 -224.294 2043.17 -196.72 2027.14 -152.867C2009.97 -105.895 2021.02 -46.9039 2052.83 -15.7161C2089.92 20.6445 2138.31 26.3871 2205.26 34.2983C2248.88 39.4709 2298.3 45.2907 2358.26 60.6183C2498.96 96.5602 2548.5 169.661 2565.32 224.62C2571.09 243.523 2573.99 263.453 2573.99 283.839L2573.95 283.877Z" fill="url(#paint45_linear_1289_6687)" style=""/>\n<path d="M2585.2 299.435C2585.2 321.381 2581.86 343.897 2575.22 366.337C2563.45 405.968 2541.46 444.002 2513.32 473.44C2474.19 514.365 2400.72 558.751 2311.86 560.653C2239.46 562.174 2171.27 534.371 2114.65 480.21C2003.61 373.982 1933.55 251.779 1865.8 133.608C1819.24 52.4057 1775.31 -24.271 1721.6 -88.3201C1661.4 -160.09 1597.31 -206.035 1519.82 -232.925C1446.82 -258.256 1344.01 -220.716 1285.72 -147.463C1251.45 -104.409 1234.43 -52.1121 1236.54 3.72165C1239 69.7485 1267.35 139.655 1320.75 211.501C1382.57 294.681 1512.78 355.422 1650.67 419.775C1786.72 483.253 1927.43 548.9 2000.55 639.04C2038.52 685.822 2060.86 739.716 2065.19 794.827C2069.33 847.846 2056.84 898.165 2028.97 940.306C2002.57 980.242 1963.61 1010.25 1916.26 1027.06C1863.74 1045.7 1803.22 1048.02 1736.35 1033.98C1661.88 1018.31 1600.81 983.894 1549.68 928.783C1504.08 879.643 1470.32 818.826 1437.68 760.026C1404.88 700.997 1371 639.915 1324.96 590.205C1273.35 534.447 1211.73 499.266 1136.5 482.683C1033.77 460.015 941.567 462.563 862.368 490.214C776.409 520.223 709.853 578.908 664.567 664.561C618.049 752.495 608.189 858.458 636.895 962.899C663.057 1058.21 718.719 1144.21 789.609 1198.86C824.358 1225.64 863.361 1248.04 904.71 1271.77C1015.48 1335.36 1130.02 1401.12 1165.69 1557.37C1189.27 1660.78 1206.44 1893.74 1102.67 2035.23C1054.08 2101.44 984.348 2140.73 895.328 2152.07L895.129 2150.62C983.672 2139.36 1053.09 2100.26 1101.4 2034.39C1204.89 1893.32 1187.71 1660.9 1164.18 1557.71C1128.67 1402.11 1014.41 1336.51 903.915 1273.06C862.526 1249.29 823.444 1226.85 788.655 1200.04C717.526 1145.2 661.664 1058.9 635.424 963.317C606.638 858.534 616.538 752.191 663.215 663.914C708.699 577.92 775.534 519.043 861.89 488.882C941.368 461.118 1033.89 458.569 1136.9 481.275C1305.28 518.397 1373.31 640.904 1439.07 759.38C1471.67 818.104 1505.39 878.844 1550.87 927.832C1601.8 982.715 1662.59 1016.98 1736.74 1032.58C1803.34 1046.57 1863.58 1044.29 1915.82 1025.73C1962.85 1009.03 2001.58 979.215 2027.78 939.546C2055.45 897.67 2067.9 847.656 2063.76 794.941C2059.47 740.096 2037.2 686.506 1999.43 639.953C1926.55 550.079 1786.01 484.508 1650.11 421.106C1512.07 356.714 1381.66 295.86 1319.59 212.376C1266 140.302 1237.61 70.1289 1235.11 3.79782C1233.04 -52.4544 1250.1 -105.017 1284.57 -148.338C1343.21 -222.085 1446.82 -259.853 1520.42 -234.294C1598.19 -207.29 1662.51 -161.193 1722.87 -89.1949C1776.66 -25.0318 1820.68 51.7204 1867.23 132.961C1934.9 251.018 2004.92 373.107 2115.81 479.221C2172.1 533.077 2239.89 560.766 2311.86 559.207C2400.24 557.343 2473.28 513.186 2512.2 472.489C2540.19 443.203 2562.06 405.397 2573.75 365.994C2586.51 322.94 2586.99 279.62 2575.06 240.673C2558.36 186.056 2509.06 113.412 2369.07 77.6603C2309.19 62.3705 2259.85 56.5507 2216.28 51.3781C2149.01 43.4291 2100.42 37.686 2062.93 0.945249C2030.72 -30.6229 2019.51 -90.2598 2036.88 -137.726C2053.15 -182.15 2090.96 -210.066 2143.36 -216.304L2143.56 -214.859C2091.75 -208.659 2054.38 -181.084 2038.36 -137.231C2021.18 -90.2593 2032.19 -31.2696 2064.04 -0.0818503C2101.14 36.2787 2149.52 42.0224 2216.48 49.9333C2260.09 55.1059 2309.51 60.925 2369.47 76.2526C2510.17 112.194 2559.71 185.296 2576.53 240.255C2582.3 259.158 2585.2 279.087 2585.2 299.473L2585.2 299.435Z" fill="url(#paint46_linear_1289_6687)" style=""/>\n<path d="M2596.41 314.989C2596.41 336.934 2593.07 359.451 2586.43 381.891C2574.66 421.522 2552.68 459.556 2524.53 488.994C2485.4 529.918 2411.93 574.304 2323.07 576.205C2250.67 577.727 2182.48 549.924 2125.86 495.764C2014.82 389.536 1944.76 267.332 1877.01 149.161C1830.46 67.9584 1786.52 -8.71734 1732.81 -72.7664C1672.61 -144.536 1608.52 -190.481 1531.03 -217.371C1458.03 -242.702 1355.22 -205.162 1296.93 -131.909C1262.7 -88.8548 1245.68 -36.6343 1247.75 19.2756C1250.21 85.3025 1278.56 155.209 1331.96 227.017C1393.78 310.197 1523.99 370.937 1661.88 435.291C1797.93 498.769 1938.64 564.415 2011.76 654.556C2049.73 701.337 2072.07 755.231 2076.4 810.342C2080.54 863.362 2068.05 913.68 2040.18 955.822C2013.78 995.758 1974.82 1025.77 1927.47 1042.58C1874.95 1061.21 1814.43 1063.53 1747.56 1049.5C1673.09 1033.83 1612.02 999.409 1560.89 944.298C1515.29 895.158 1481.53 834.342 1448.89 775.542C1416.09 716.513 1382.21 655.43 1336.17 605.72C1284.57 549.962 1222.94 514.781 1147.72 498.198C1044.98 475.53 952.778 478.078 873.579 505.729C787.62 535.737 721.103 594.424 675.778 680.076C629.26 768.011 619.399 873.973 648.105 978.414C674.266 1073.73 729.93 1159.72 800.82 1214.38C835.569 1241.15 874.572 1263.55 915.921 1287.29C1026.69 1350.88 1141.23 1416.64 1176.9 1572.88C1187.32 1618.52 1196.38 1697.03 1190.66 1780.47C1183.66 1882.4 1155.91 1969.01 1110.46 2030.96C1060.17 2099.54 987.766 2140.24 895.287 2151.99L895.088 2150.54C987.13 2138.83 1059.13 2098.32 1109.19 2030.13C1154.47 1968.4 1182.11 1882.02 1189.1 1780.36C1194.83 1697.03 1185.77 1618.72 1175.39 1573.15C1139.88 1417.55 1025.62 1351.94 915.126 1288.5C873.737 1264.73 834.655 1242.29 799.865 1215.48C728.737 1160.63 672.875 1074.34 646.635 978.757C617.849 873.973 627.749 767.631 674.426 679.354C719.91 593.359 786.745 534.445 873.101 504.322C952.579 476.557 1045.1 474.009 1148.11 496.715C1316.49 533.836 1384.52 656.343 1450.28 774.818C1482.88 833.543 1516.6 894.283 1562.08 943.271C1613.01 998.154 1673.81 1032.42 1747.96 1048.02C1814.55 1062.01 1874.79 1059.73 1927.03 1041.17C1974.06 1024.47 2012.79 994.655 2038.99 954.985C2066.66 913.11 2079.11 863.095 2074.97 810.38C2070.68 755.536 2048.41 701.946 2010.64 655.392C1937.77 565.518 1797.22 499.948 1661.32 436.545C1523.28 372.154 1392.87 311.3 1330.84 227.816C1277.25 155.741 1248.86 85.5686 1246.36 19.2375C1244.29 -36.9385 1261.35 -89.5774 1295.82 -132.898C1354.46 -206.646 1458.07 -244.414 1531.67 -218.855C1609.44 -191.851 1673.77 -145.753 1734.12 -73.7552C1787.91 -9.59209 1831.93 67.1601 1878.48 148.4C1946.15 266.458 2016.17 388.547 2127.06 494.661C2183.35 548.517 2251.14 576.206 2323.11 574.646C2411.49 572.783 2484.53 528.625 2523.45 487.929C2551.44 458.643 2573.31 420.837 2585 381.434C2597.76 338.38 2598.24 295.059 2586.35 256.113C2569.65 201.496 2520.35 128.851 2380.36 93.099C2320.48 77.8093 2271.14 71.9904 2227.57 66.8178C2160.29 58.8688 2111.67 53.1257 2074.22 16.3849C2042.01 -15.1832 2030.8 -74.8201 2048.18 -122.286C2064.44 -166.71 2102.25 -194.627 2154.65 -200.864L2154.85 -199.42C2103.04 -193.22 2065.67 -165.646 2049.65 -121.793C2032.47 -74.8206 2043.52 -15.8299 2075.33 15.3578C2112.42 51.7182 2160.81 57.4618 2227.77 65.373C2271.38 70.5456 2320.8 76.3644 2380.76 91.6921C2521.46 127.634 2571 200.735 2587.82 255.694C2593.59 274.597 2596.49 294.527 2596.49 314.913L2596.41 314.989Z" fill="url(#paint47_linear_1289_6687)" style=""/>\n<path d="M2607.66 330.508C2607.66 352.453 2604.32 374.969 2597.68 397.409C2585.91 437.04 2563.93 475.075 2535.78 504.513C2496.66 545.437 2423.18 589.823 2334.32 591.724C2261.92 593.246 2193.73 565.443 2137.12 511.283C2026.07 405.055 1956.01 282.851 1888.27 164.718C1841.71 83.5156 1797.77 6.83882 1744.06 -57.2103C1683.86 -128.98 1619.77 -174.924 1542.28 -201.814C1469.29 -227.145 1366.47 -189.606 1308.18 -116.352C1273.91 -73.2598 1256.89 -20.9632 1259 34.8325C1261.47 100.859 1289.81 170.765 1343.21 242.611C1405.04 325.791 1535.25 386.531 1673.13 450.885C1809.18 514.363 1949.89 580.01 2023.01 670.151C2060.98 716.933 2083.32 770.826 2087.66 825.938C2091.79 878.957 2079.31 929.276 2051.44 971.417C2025.04 1011.35 1986.07 1041.36 1938.72 1058.17C1886.2 1076.81 1825.68 1079.13 1758.81 1065.09C1684.34 1049.42 1623.27 1015 1572.14 959.893C1526.54 910.753 1492.78 849.936 1460.14 791.136C1427.34 732.107 1393.47 671.025 1347.42 621.315C1295.82 565.557 1234.19 530.376 1158.97 513.793C1056.23 491.125 964.029 493.673 884.83 521.324C798.871 551.37 732.354 610.019 687.029 695.672C640.511 783.606 630.651 889.568 659.357 994.009C685.518 1089.32 741.181 1175.32 812.071 1229.97C846.82 1256.75 885.864 1279.15 927.173 1302.88C1037.94 1366.47 1152.49 1432.24 1188.15 1588.48C1197.97 1631.61 1206.04 1706.42 1199.12 1787.09C1190.89 1883.36 1163.14 1966.16 1118.81 2026.59C1066.69 2097.64 991.464 2139.86 895.287 2152.1L895.088 2150.66C990.827 2138.49 1065.69 2096.46 1117.58 2025.75C1161.75 1965.55 1189.42 1883.01 1197.61 1786.98C1204.49 1706.46 1196.46 1631.8 1186.64 1588.82C1151.14 1433.22 1036.87 1367.62 926.377 1304.18C884.988 1280.4 845.905 1257.96 811.116 1231.15C739.988 1176.31 684.127 1090.01 657.887 994.427C629.101 889.644 639.001 783.301 685.678 695.024C731.162 609.03 797.997 550.115 884.353 519.992C963.831 492.227 1056.35 489.679 1159.36 512.385C1327.74 549.506 1395.77 672.014 1461.53 790.49C1494.13 849.214 1527.85 909.954 1573.33 958.942C1624.27 1013.82 1685.06 1048.09 1759.21 1063.69C1825.8 1077.68 1886.04 1075.4 1938.28 1056.84C1985.32 1040.14 2024.04 1010.33 2050.24 970.656C2077.91 928.78 2090.36 878.767 2086.22 826.052C2081.93 771.207 2059.67 717.617 2021.89 671.064C1949.02 581.19 1808.47 515.619 1672.57 452.216C1534.53 387.825 1404.12 326.97 1342.06 243.486C1288.46 171.412 1260.07 101.24 1257.57 34.9087C1255.42 -21.2674 1272.56 -73.8684 1307.03 -117.227C1365.67 -190.975 1469.29 -228.743 1542.88 -203.184C1620.65 -176.18 1684.98 -130.083 1745.33 -58.085C1799.12 6.07807 1843.14 82.8312 1889.7 164.072C1957.37 282.129 2027.38 404.218 2138.27 510.332C2194.57 564.188 2262.36 591.876 2334.32 590.317C2422.7 588.453 2495.74 544.296 2534.66 503.6C2562.65 474.314 2584.52 436.508 2596.21 397.105C2608.97 354.051 2609.45 310.73 2597.52 271.783C2580.82 217.166 2531.52 144.522 2391.53 108.77C2331.66 93.4804 2282.31 87.6615 2238.74 82.4889C2171.47 74.54 2122.88 68.7968 2085.39 32.0561C2053.18 0.487975 2041.97 -59.15 2059.35 -106.616C2075.61 -151.04 2113.42 -178.956 2165.82 -185.194L2166.02 -183.748C2114.21 -177.549 2076.84 -149.974 2060.82 -106.121C2043.64 -59.1495 2054.7 -0.158753 2086.5 31.029C2123.6 67.3893 2171.98 73.1323 2238.94 81.0431C2282.55 86.2157 2331.97 92.0348 2391.93 107.362C2532.64 143.304 2582.18 216.406 2599 271.365C2604.76 290.268 2607.66 310.198 2607.66 330.584L2607.66 330.508Z" fill="url(#paint48_linear_1289_6687)" style=""/>\n<path d="M2618.91 346.065C2618.91 368.01 2615.57 390.527 2608.93 412.967C2597.16 452.598 2575.18 490.632 2547.03 520.07C2507.91 560.994 2434.43 605.381 2345.57 607.282C2273.17 608.804 2204.98 581 2148.37 526.84C2037.32 420.611 1967.26 298.409 1899.51 180.238C1852.96 99.0353 1809.02 22.3586 1755.31 -41.6905C1695.11 -113.46 1631.02 -159.406 1553.53 -186.295C1480.54 -211.626 1377.72 -174.087 1319.43 -100.833C1285.16 -57.7791 1268.18 -5.52053 1270.25 50.3513C1272.72 116.378 1301.06 186.285 1354.46 258.093C1416.29 341.273 1546.5 402.013 1684.38 466.367C1820.43 529.845 1961.14 595.491 2034.26 685.632C2072.23 732.413 2094.57 786.307 2098.91 841.418C2103.08 894.438 2090.56 944.756 2062.69 986.898C2036.29 1026.83 1997.32 1056.84 1949.97 1073.65C1897.45 1092.29 1836.94 1094.61 1770.06 1080.58C1695.59 1064.91 1634.52 1030.52 1583.39 975.375C1537.79 926.235 1504.03 865.418 1471.39 806.618C1438.59 747.589 1404.72 686.507 1358.67 636.797C1307.07 581.039 1245.44 545.858 1170.22 529.275C1067.48 506.607 975.28 509.155 896.081 536.806C810.122 566.852 743.605 625.5 698.28 711.152C651.762 799.087 641.902 905.05 670.608 1009.49C696.769 1104.8 752.431 1190.8 823.322 1245.45C858.071 1272.23 897.114 1294.63 938.423 1318.36C1049.19 1381.96 1163.74 1447.72 1199.4 1603.96C1208.7 1644.69 1215.78 1715.89 1207.83 1793.52C1198.57 1884.12 1170.85 1963.08 1127.8 2021.8C1073.76 2095.47 995.518 2139.29 895.325 2152.03L895.126 2150.58C994.881 2137.92 1072.77 2094.29 1126.56 2020.96C1230.69 1879.02 1213.4 1672.08 1197.93 1604.3C1162.42 1448.71 1048.16 1383.1 937.668 1319.66C896.279 1295.89 857.196 1273.45 822.367 1246.63C751.239 1191.79 695.377 1105.49 669.137 1009.91C640.351 905.125 650.251 798.783 696.928 710.506C742.412 624.511 809.247 565.597 895.603 535.474C975.081 507.709 1067.6 505.161 1170.62 527.867C1338.99 564.988 1407.02 687.496 1472.78 805.971C1505.39 864.696 1539.1 925.436 1584.58 974.424C1635.52 1029.31 1696.31 1063.57 1770.46 1079.17C1837.05 1093.16 1897.29 1090.88 1949.53 1072.32C1996.57 1055.63 2035.29 1025.81 2061.49 986.138C2089.16 944.262 2101.61 894.248 2097.47 841.571C2093.18 786.726 2070.92 733.136 2033.14 686.582C1960.27 596.708 1819.72 531.138 1683.82 467.735C1545.78 403.344 1415.37 342.49 1353.31 259.006C1299.71 186.931 1271.32 116.759 1268.82 50.4275C1266.71 -5.74856 1283.81 -58.3494 1318.28 -101.708C1376.92 -175.456 1480.54 -213.223 1554.13 -187.664C1631.9 -160.66 1696.23 -114.563 1756.58 -42.5652C1810.38 21.5978 1854.39 98.35 1900.95 179.59C1968.62 297.648 2038.63 419.737 2149.52 525.851C2205.82 579.707 2273.61 607.396 2345.57 605.837C2433.95 603.973 2506.99 559.815 2545.92 519.119C2573.91 489.833 2595.77 452.027 2607.46 412.624C2620.22 369.57 2620.7 326.249 2608.77 287.303C2592.08 232.686 2542.77 160.042 2402.78 124.29C2342.91 109 2293.57 103.181 2249.99 98.008C2182.72 90.0588 2134.09 84.3156 2096.64 47.5749C2064.43 16.0068 2053.22 -43.6302 2070.6 -91.0965C2086.86 -135.52 2124.67 -163.437 2177.07 -169.674L2177.27 -168.229C2125.46 -162.03 2088.09 -134.455 2072.07 -90.6016C2054.89 -43.6297 2065.91 15.3222 2097.75 46.548C2134.85 82.9084 2183.24 88.652 2250.19 96.5632C2293.8 101.698 2343.22 107.554 2403.18 122.882C2543.89 158.824 2593.43 231.926 2610.24 286.885C2616.01 305.788 2618.91 325.717 2618.91 346.103L2618.91 346.065Z" fill="url(#paint49_linear_1289_6687)" style=""/>\n<path d="M2630.13 361.621C2630.13 383.566 2626.79 406.083 2620.15 428.523C2608.38 468.154 2586.39 506.188 2558.24 535.626C2519.12 576.55 2445.65 620.936 2356.78 622.837C2284.38 624.359 2216.2 596.556 2159.58 542.396C2048.53 436.167 1978.48 313.964 1910.73 195.793C1864.17 114.59 1820.24 37.9145 1766.52 -26.1346C1706.33 -97.9046 1642.24 -143.85 1564.75 -170.74C1491.75 -196.07 1388.93 -158.531 1330.65 -85.2776C1296.38 -42.2232 1279.36 10.0735 1281.47 65.9072C1283.93 131.934 1312.28 201.84 1365.67 273.686C1427.5 356.866 1557.71 417.606 1695.59 481.96C1831.65 545.438 1972.36 611.085 2045.47 701.226C2083.44 748.007 2105.79 801.901 2110.12 857.012C2114.29 910.031 2101.77 960.35 2073.9 1002.49C2047.5 1042.43 2008.54 1072.44 1961.18 1089.25C1908.66 1107.88 1848.15 1110.24 1781.27 1096.17C1706.81 1080.5 1645.74 1046.08 1594.61 990.967C1549 941.828 1515.25 881.012 1482.61 822.212C1449.8 763.183 1415.93 702.1 1369.89 652.39C1318.28 596.632 1256.66 561.451 1181.43 544.868C1078.7 522.2 986.495 524.748 907.295 552.398C821.336 582.407 754.78 641.094 709.494 726.746C662.977 814.681 653.116 920.643 681.821 1025.08C707.983 1120.4 763.646 1206.39 834.536 1261.05C869.285 1287.82 908.328 1310.22 949.638 1333.96C1060.41 1397.55 1174.95 1463.31 1210.61 1619.55C1214.87 1638.23 1227.91 1706.46 1216.74 1799.99C1206.6 1884.92 1179.13 1959.92 1137.38 2016.86C1081.32 2093.3 999.854 2138.79 895.327 2152.07L895.129 2150.62C999.217 2137.39 1080.32 2092.09 1136.15 2016.02C1177.77 1959.27 1205.13 1884.5 1215.27 1799.83C1218.09 1776.25 1226 1693.53 1209.18 1619.9C1173.68 1464.3 1059.41 1398.69 948.922 1335.25C907.533 1311.48 868.45 1289.04 833.661 1262.23C762.533 1207.38 706.671 1121.08 680.43 1025.5C651.645 920.719 661.545 814.377 708.222 726.1C753.706 640.105 820.541 581.191 906.897 551.068C986.375 523.303 1078.89 520.755 1181.91 543.461C1350.29 580.582 1418.32 703.089 1484.08 821.564C1516.68 880.289 1550.39 941.029 1595.88 990.017C1646.81 1044.9 1707.6 1079.17 1781.75 1094.76C1848.35 1108.76 1908.58 1106.48 1960.83 1087.92C2007.86 1071.22 2046.59 1041.4 2072.79 1001.73C2100.46 959.856 2112.9 909.841 2108.77 857.126C2104.47 802.282 2082.21 748.692 2044.44 702.138C1971.56 612.264 1831.01 546.694 1695.12 483.291C1557.07 418.9 1426.67 358.046 1364.6 274.562C1311.01 202.487 1282.62 132.314 1280.11 65.9834C1278.01 9.80735 1295.1 -42.8316 1329.57 -86.1521C1388.22 -159.9 1491.83 -197.668 1565.42 -172.109C1643.19 -145.105 1707.52 -99.0076 1767.88 -27.0093C1821.67 37.1538 1865.68 113.906 1912.24 195.146C1979.91 313.204 2049.92 435.292 2160.81 541.407C2217.11 595.263 2284.9 622.952 2356.86 621.392C2445.25 619.529 2518.29 575.371 2557.21 534.675C2585.2 505.389 2607.07 467.583 2618.76 428.18C2631.52 385.126 2632 341.805 2620.07 302.859C2603.37 248.242 2554.07 175.597 2414.08 139.845C2354.2 124.555 2304.86 118.736 2261.28 113.564C2194.01 105.615 2145.43 99.8715 2107.93 63.1308C2075.73 31.5627 2064.52 -28.0743 2081.89 -75.5406C2098.15 -119.964 2135.96 -147.882 2188.37 -154.119L2188.56 -152.673C2136.76 -146.474 2099.39 -118.9 2083.36 -75.0467C2066.19 -28.0748 2077.2 30.8779 2109.05 62.1037C2146.14 98.4643 2194.53 104.207 2261.48 112.118C2305.1 117.291 2354.52 123.11 2414.47 138.438C2555.18 174.38 2604.72 247.481 2621.54 302.44C2627.3 321.343 2630.21 341.273 2630.21 361.659L2630.13 361.621Z" fill="url(#paint50_linear_1289_6687)" style=""/>\n<path d="M2641.38 377.136C2641.38 399.081 2638.04 421.597 2631.4 444.037C2619.63 483.668 2597.64 521.703 2569.49 551.141C2530.37 592.065 2456.9 636.45 2368.03 638.352C2295.63 639.874 2227.45 612.071 2170.83 557.911C2059.78 451.682 1989.73 329.479 1921.98 211.307C1875.42 130.105 1831.49 53.4284 1777.77 -10.6207C1717.58 -82.3907 1653.49 -128.335 1576 -155.225C1503 -180.555 1400.18 -143.016 1341.9 -69.7627C1307.63 -26.7083 1290.61 25.5884 1292.72 81.4221C1295.18 147.449 1323.53 217.355 1376.93 289.163C1438.75 372.343 1568.96 433.083 1706.84 497.436C1842.9 560.915 1983.61 626.562 2056.72 716.702C2094.69 763.484 2117.04 817.378 2121.37 872.489C2125.55 925.508 2113.02 975.827 2085.15 1017.97C2058.75 1057.9 2019.79 1087.91 1972.43 1104.72C1919.91 1123.36 1859.4 1125.72 1792.52 1111.65C1718.06 1095.98 1656.99 1061.56 1605.86 1006.44C1560.25 957.305 1526.5 896.488 1493.86 837.688C1461.05 778.659 1427.18 717.577 1381.14 667.867C1329.53 612.109 1267.91 576.927 1192.68 560.345C1089.95 537.676 997.744 540.225 918.545 567.875C832.586 597.922 766.03 656.571 720.744 742.223C674.226 830.157 664.366 936.12 693.072 1040.56C719.234 1135.87 774.896 1221.87 845.786 1276.52C880.535 1303.3 919.579 1325.7 960.889 1349.43C1071.66 1413.03 1186.2 1478.79 1221.87 1635.03C1241.11 1719.47 1237.25 1889.36 1147.64 2011.53C1089.43 2090.83 1004.54 2138.1 895.326 2151.99L895.127 2150.54C1003.91 2136.7 1088.47 2089.65 1146.4 2010.69C1235.74 1888.91 1239.6 1719.5 1220.39 1635.33C1184.89 1479.74 1070.62 1414.13 960.132 1350.69C918.743 1326.92 879.66 1304.48 844.871 1277.66C773.743 1222.82 717.882 1136.52 691.641 1040.94C662.856 936.158 672.756 829.814 719.433 741.538C764.917 655.543 831.752 596.63 918.108 566.507C997.586 538.742 1090.1 536.194 1193.12 558.9C1361.5 596.021 1429.53 718.528 1495.29 837.003C1527.89 895.728 1561.61 956.468 1607.09 1005.46C1658.02 1060.34 1718.81 1094.61 1792.96 1110.2C1859.56 1124.2 1919.79 1121.92 1972.04 1103.35C2019.07 1086.66 2057.8 1056.84 2084 1017.17C2111.67 975.295 2124.11 925.28 2119.98 872.565C2115.69 817.72 2093.42 764.131 2055.65 717.577C1982.77 627.703 1842.22 562.132 1706.33 498.73C1568.29 434.339 1437.88 373.484 1375.81 289.999C1322.22 217.925 1293.83 147.753 1291.32 81.4221C1289.18 25.2461 1306.31 -27.3928 1340.78 -70.7134C1399.43 -144.461 1503.04 -182.229 1576.63 -156.67C1654.4 -129.666 1718.73 -83.5696 1779.09 -11.5716C1832.88 52.5917 1876.89 129.345 1923.45 210.585C1991.12 328.642 2061.14 450.731 2172.02 556.846C2228.32 610.702 2296.11 638.391 2368.07 636.831C2456.46 634.968 2529.5 590.81 2568.42 550.114C2596.41 520.828 2618.28 483.022 2629.97 443.619C2642.73 400.564 2643.21 357.244 2631.28 318.297C2614.58 263.681 2565.28 191.035 2425.29 155.284C2365.41 139.994 2316.07 134.175 2272.49 129.002C2205.22 121.053 2156.6 115.31 2119.14 78.5695C2086.94 47.0014 2075.73 -12.6356 2093.1 -60.1019C2109.36 -104.525 2147.17 -132.443 2199.58 -138.719L2199.77 -137.273C2147.97 -131.073 2110.6 -103.499 2094.57 -59.6461C2077.4 -12.6741 2088.45 46.2787 2120.26 77.5046C2157.35 113.865 2205.74 119.608 2272.69 127.519C2316.31 132.653 2365.73 138.511 2425.69 153.839C2566.39 189.781 2615.93 262.882 2632.75 317.84C2638.51 336.743 2641.42 356.673 2641.42 377.059L2641.38 377.136Z" fill="url(#paint51_linear_1289_6687)" style=""/>\n<path d="M2652.63 392.694C2652.63 414.64 2649.29 437.156 2642.65 459.596C2630.88 499.227 2608.9 537.261 2580.75 566.699C2541.62 607.624 2468.15 652.01 2379.29 653.911C2306.89 655.433 2238.7 627.629 2182.08 573.469C2071.04 467.241 2000.98 345.038 1933.23 226.867C1886.68 145.664 1842.74 68.9877 1789.03 4.93867C1728.83 -66.8313 1664.74 -112.776 1587.25 -139.666C1514.25 -164.997 1411.44 -127.458 1353.15 -54.2044C1318.88 -11.1499 1301.9 41.1848 1303.97 96.9804C1306.43 163.007 1334.78 232.914 1388.18 304.76C1450 387.94 1580.21 448.68 1718.1 513.034C1854.15 576.512 1994.86 642.159 2067.98 732.299C2105.95 779.081 2128.29 832.974 2132.62 888.086C2136.8 941.105 2124.27 991.424 2096.4 1033.57C2070 1073.5 2031.04 1103.51 1983.69 1120.32C1931.17 1138.96 1870.65 1141.32 1803.78 1127.24C1729.31 1111.57 1668.24 1077.15 1617.11 1022.04C1571.51 972.901 1537.75 912.085 1505.11 853.285C1472.31 794.256 1438.43 733.174 1392.39 683.464C1340.79 627.706 1279.16 592.525 1203.94 575.942C1101.2 553.274 1009 555.822 929.798 583.473C843.84 613.481 777.283 672.167 731.998 757.819C685.48 845.754 675.62 951.717 704.326 1056.16C730.487 1151.47 786.149 1237.46 857.039 1292.12C891.789 1318.9 930.832 1341.3 972.141 1365.03C1082.91 1428.62 1197.46 1494.38 1233.12 1650.63C1250.89 1728.48 1245.68 1887.39 1158.61 2006.09C1098.22 2088.4 1009.63 2137.54 895.328 2152.07L895.129 2150.62C1009 2136.13 1097.22 2087.26 1157.38 2005.26C1244.17 1886.97 1249.34 1728.56 1231.65 1650.93C1196.14 1495.34 1081.88 1429.73 971.386 1366.29C929.997 1342.51 890.914 1320.07 856.085 1293.26C784.957 1238.42 729.095 1152.12 702.854 1056.54C674.069 951.755 683.969 845.412 730.646 757.135C776.13 671.14 842.964 612.264 929.321 582.103C1008.8 554.338 1101.32 551.79 1204.33 574.496C1372.71 611.617 1440.74 734.125 1506.5 852.601C1539.1 911.325 1572.82 972.064 1618.3 1021.05C1669.23 1075.93 1730.03 1110.2 1804.18 1125.8C1870.77 1139.79 1931.01 1137.51 1983.25 1118.95C2030.28 1102.26 2069.01 1072.44 2095.21 1032.77C2122.88 990.891 2135.33 940.877 2131.19 888.162C2126.9 833.317 2104.63 779.727 2066.86 733.174C1993.98 643.299 1853.44 577.729 1717.54 514.326C1579.5 449.935 1449.09 389.081 1387.07 305.597C1333.47 233.523 1305.08 163.35 1302.58 97.0185C1300.47 40.8425 1317.57 -11.7583 1352.04 -55.117C1410.68 -128.865 1514.29 -166.632 1587.89 -141.073C1665.66 -114.069 1729.99 -67.9722 1790.34 4.02583C1844.13 68.1889 1888.15 144.941 1934.7 226.181C2002.37 344.239 2072.39 466.328 2183.28 572.442C2239.58 626.298 2307.36 653.987 2379.33 652.428C2467.71 650.564 2540.75 606.406 2579.67 565.71C2607.66 536.424 2629.53 498.618 2641.22 459.215C2653.98 416.161 2654.46 372.84 2642.53 333.894C2625.83 279.277 2576.53 206.633 2436.54 170.881C2376.66 155.591 2327.32 149.772 2283.75 144.599C2216.48 136.65 2167.89 130.907 2130.4 94.166C2098.19 62.5978 2086.98 2.96088 2104.36 -44.5054C2120.62 -88.929 2158.43 -116.846 2210.83 -123.083L2211.03 -121.638C2159.22 -115.439 2121.85 -87.8636 2105.83 -44.0106C2088.65 2.96136 2099.7 61.9511 2131.51 93.1391C2168.61 129.499 2216.99 135.243 2283.95 143.154C2327.56 148.289 2376.98 154.146 2436.94 169.473C2577.65 205.415 2627.18 278.517 2644 333.476C2649.77 352.379 2652.67 372.308 2652.67 392.694L2652.63 392.694Z" fill="url(#paint52_linear_1289_6687)" style=""/>\n<path d="M2663.84 408.25C2663.84 430.196 2660.5 452.712 2653.86 475.152C2642.09 514.784 2620.11 552.817 2591.96 582.256C2552.83 623.18 2479.36 667.565 2390.5 669.467C2318.1 670.988 2249.91 643.186 2193.33 589.026C2082.29 482.797 2012.23 360.594 1944.48 242.422C1897.93 161.22 1853.99 84.5441 1800.28 20.4951C1740.08 -51.2749 1675.99 -97.22 1598.5 -124.11C1525.5 -149.44 1422.69 -111.901 1364.4 -38.648C1330.13 4.44455 1313.15 56.7412 1315.22 112.537C1317.68 178.564 1346.03 248.47 1399.43 320.278C1461.25 403.458 1591.46 464.198 1729.35 528.551C1865.4 592.03 2006.11 657.677 2079.23 747.817C2117.2 794.599 2139.54 848.493 2143.87 903.604C2148.05 956.623 2135.52 1006.94 2107.65 1049.08C2081.25 1089.02 2042.29 1119.03 1994.94 1135.84C1942.42 1154.48 1881.9 1156.8 1815.03 1142.76C1740.56 1127.09 1679.49 1092.71 1628.36 1037.56C1582.76 988.42 1549 927.604 1516.36 868.803C1483.56 809.775 1449.68 748.692 1403.64 698.981C1352.04 643.224 1290.41 608.042 1215.19 591.459C1112.45 568.791 1020.25 571.339 941.049 598.99C855.09 628.999 788.534 687.686 743.248 773.338C696.73 861.272 686.869 967.234 715.575 1071.68C741.737 1166.99 797.4 1252.98 868.29 1307.64C903.039 1334.41 942.042 1356.82 983.392 1380.55C1094.16 1444.14 1208.7 1509.9 1244.37 1666.15C1254.07 1708.59 1254.27 1764.23 1244.97 1818.81C1233.36 1886.89 1207.55 1949.65 1170.38 2000.35C1107.72 2085.77 1015.16 2136.82 895.366 2152.03L895.167 2150.58C1014.56 2135.41 1106.72 2084.59 1169.15 1999.51C1206.2 1949 1231.88 1886.44 1243.49 1818.59C1252.76 1764.2 1252.56 1708.74 1242.94 1666.45C1207.43 1510.85 1093.17 1445.24 982.676 1381.8C941.287 1358.03 902.204 1335.59 867.415 1308.78C796.287 1253.93 740.425 1167.64 714.184 1072.02C685.399 967.235 695.299 860.892 741.976 772.615C787.46 686.621 854.295 627.744 940.651 597.583C1020.13 569.819 1112.65 567.27 1215.66 589.977C1384.04 627.098 1452.07 749.604 1517.83 868.08C1550.43 926.804 1584.15 987.545 1629.63 1036.53C1680.56 1091.42 1741.36 1125.68 1815.51 1141.28C1882.1 1155.27 1942.34 1152.99 1994.58 1134.43C2041.61 1117.73 2080.34 1087.92 2106.54 1048.25C2134.21 1006.37 2146.66 956.357 2142.52 903.68C2138.23 848.835 2115.96 795.245 2078.19 748.692C2005.31 658.818 1864.77 593.247 1728.87 529.845C1590.83 465.453 1460.42 404.6 1398.36 321.115C1344.76 249.041 1316.37 178.868 1313.87 112.537C1311.72 56.2846 1328.86 3.7219 1363.33 -39.5987C1421.97 -113.346 1525.58 -151.115 1599.18 -125.556C1676.95 -98.5516 1741.28 -52.4539 1801.63 19.5441C1855.42 83.7075 1899.44 160.459 1945.99 241.7C2013.66 359.757 2083.68 481.846 2194.57 587.961C2250.87 641.817 2318.65 669.505 2390.62 667.946C2479 666.082 2552.04 621.925 2590.96 581.229C2618.95 551.942 2640.82 514.137 2652.51 474.734C2665.27 431.679 2665.75 388.359 2653.82 349.412C2637.12 294.795 2587.82 222.15 2447.83 186.398C2387.95 171.109 2338.61 165.29 2295.04 160.117C2227.77 152.168 2179.18 146.425 2141.69 109.684C2109.48 78.1161 2098.27 18.4792 2115.65 -28.9871C2131.91 -73.4107 2169.72 -101.328 2222.12 -107.566L2222.32 -106.12C2170.51 -99.9205 2133.14 -72.3463 2117.12 -28.4932C2099.94 18.4787 2110.99 77.4694 2142.8 108.657C2179.9 145.018 2228.28 150.76 2295.24 158.672C2338.85 163.844 2388.27 169.664 2448.23 184.992C2588.93 220.934 2638.47 294.034 2655.29 348.993C2661.06 367.896 2663.96 387.826 2663.96 408.212L2663.84 408.25Z" fill="url(#paint53_linear_1289_6687)" style=""/>\n<path d="M2675.09 423.768C2675.09 445.714 2671.76 468.229 2665.12 490.669C2653.35 530.301 2631.36 568.335 2603.21 597.773C2564.09 638.698 2490.61 683.083 2401.75 684.985C2329.35 686.506 2261.16 658.704 2204.55 604.544C2093.5 498.315 2023.45 376.112 1955.7 257.94C1909.14 176.738 1865.21 100.061 1811.49 36.0122C1751.3 -35.7579 1687.21 -81.7019 1609.72 -108.592C1536.72 -133.922 1433.9 -96.3831 1375.61 -23.1299C1341.34 19.9245 1324.37 72.145 1326.43 128.055C1328.9 194.082 1357.25 263.988 1410.64 335.796C1472.47 418.976 1602.68 479.716 1740.56 544.069C1876.62 607.548 2017.32 673.195 2090.44 763.335C2128.41 810.117 2150.75 864.011 2155.09 919.122C2159.26 972.141 2146.74 1022.46 2118.87 1064.6C2092.47 1104.54 2053.5 1134.55 2006.15 1151.36C1953.63 1169.99 1893.12 1172.31 1826.24 1158.28C1751.77 1142.61 1690.7 1108.19 1639.57 1053.08C1593.97 1003.94 1560.22 943.121 1527.57 884.32C1494.77 825.292 1460.9 764.21 1414.86 714.499C1363.25 658.742 1301.62 623.56 1226.4 606.977C1123.66 584.309 1031.46 586.857 952.262 614.508C866.304 644.555 799.747 703.203 754.462 788.856C707.944 876.79 698.084 982.752 726.79 1087.19C752.951 1182.51 808.614 1268.5 879.504 1323.16C914.254 1349.93 953.257 1372.33 994.606 1396.07C1105.37 1459.66 1219.92 1525.42 1255.58 1681.66C1273.47 1760.13 1258.37 1891.5 1182.86 1994.42C1152.73 2035.45 1115 2069.38 1070.7 2095.24C1020.57 2124.49 961.567 2143.58 895.328 2152.03L895.129 2150.58C961.129 2142.18 1019.93 2123.16 1069.91 2094.03C1114.04 2068.28 1151.61 2034.5 1181.63 1993.62C1256.9 1891.04 1271.96 1760.2 1254.11 1682.04C1218.61 1526.45 1104.34 1460.84 993.851 1397.4C952.462 1373.63 913.378 1351.19 878.589 1324.37C807.46 1269.53 751.6 1183.23 725.359 1087.61C696.574 982.828 706.474 876.485 753.151 788.209C798.635 702.214 865.469 643.299 951.826 613.177C1031.3 585.412 1123.82 582.864 1226.84 605.57C1395.22 642.691 1463.24 765.198 1529.01 883.674C1561.61 942.398 1595.32 1003.14 1640.81 1052.13C1691.74 1107.01 1752.53 1141.28 1826.68 1156.87C1893.28 1170.87 1953.51 1168.59 2005.75 1150.03C2052.79 1133.33 2091.51 1103.51 2117.72 1063.84C2145.39 1021.96 2157.83 971.951 2153.7 919.236C2149.4 864.391 2127.14 810.801 2089.37 764.248C2016.49 674.374 1875.94 608.803 1740.05 545.401C1602 481.009 1471.59 420.155 1409.57 336.67C1355.97 264.596 1327.59 194.424 1325.08 128.093C1322.93 71.917 1340.07 19.278 1374.54 -24.0425C1433.19 -97.7903 1536.8 -135.558 1610.39 -110C1688.16 -82.9954 1752.49 -36.8987 1812.84 35.0993C1866.64 99.2626 1910.65 176.016 1957.21 257.256C2024.88 375.313 2094.89 497.402 2205.78 603.517C2262.08 657.373 2329.87 685.06 2401.83 683.501C2490.22 681.637 2563.25 637.481 2602.18 596.785C2630.17 567.498 2652.04 529.693 2663.72 490.29C2676.49 447.235 2676.96 403.914 2665.04 364.967C2648.34 310.351 2599.04 237.706 2459.04 201.955C2399.17 186.665 2349.83 180.846 2306.25 175.673C2238.98 167.724 2190.35 161.981 2152.9 125.24C2120.7 93.6723 2109.49 34.0344 2126.86 -13.4319C2143.12 -57.8555 2180.93 -85.772 2233.33 -92.0096L2233.53 -90.5638C2181.73 -84.3643 2144.35 -56.7901 2128.33 -12.9371C2111.15 34.0349 2122.21 93.0256 2154.01 124.213C2191.11 160.574 2239.5 166.317 2306.45 174.228C2350.07 179.4 2399.49 185.219 2459.44 200.547C2600.15 236.489 2649.69 309.59 2666.51 364.549C2672.27 383.452 2675.17 403.382 2675.17 423.768L2675.09 423.768Z" fill="url(#paint54_linear_1289_6687)" style=""/>\n<path d="M2686.34 439.324C2686.34 461.269 2683 483.786 2676.36 506.226C2664.6 545.857 2642.61 583.891 2614.46 613.329C2575.34 654.253 2501.86 698.639 2413 700.541C2340.6 702.063 2272.41 674.259 2215.8 620.099C2104.75 513.87 2034.7 391.668 1966.95 273.497C1920.39 192.294 1876.46 115.617 1822.74 51.5683C1762.55 -20.2017 1698.46 -66.1465 1620.97 -93.0367C1547.97 -118.367 1445.15 -80.8279 1386.86 -7.57449C1352.63 35.48 1335.62 87.7004 1337.68 143.61C1340.15 209.637 1368.5 279.544 1421.89 351.39C1483.72 434.57 1613.93 495.31 1751.81 559.664C1887.87 623.142 2028.57 688.788 2101.69 778.929C2139.66 825.71 2162 879.604 2166.34 934.715C2170.51 987.734 2157.99 1038.05 2130.12 1080.19C2103.72 1120.13 2064.75 1150.14 2017.4 1166.95C1964.88 1185.59 1904.37 1187.91 1837.49 1173.87C1763.02 1158.2 1701.95 1123.78 1650.82 1068.67C1605.22 1019.53 1571.47 958.715 1538.82 899.915C1506.02 840.886 1472.15 779.803 1426.11 730.093C1374.5 674.335 1312.87 639.155 1237.65 622.572C1134.91 599.904 1042.71 602.452 963.512 630.102C877.553 660.149 810.997 718.797 765.712 804.449C719.194 892.384 709.334 998.347 738.04 1102.79C764.201 1198.1 819.863 1284.09 890.753 1338.75C925.502 1365.53 964.506 1387.93 1005.86 1411.66C1116.62 1475.25 1231.17 1541.01 1266.83 1697.26C1283.17 1768.84 1268.03 1890.51 1196.18 1988.44C1165.13 2030.78 1125.89 2065.84 1079.57 2092.73C1026.97 2123.24 964.944 2143.2 895.326 2152.07L895.127 2150.62C964.546 2141.8 1026.33 2121.91 1078.77 2091.48C1124.89 2064.7 1163.98 2029.75 1194.91 1987.61C1266.47 1890.05 1281.58 1768.87 1265.32 1697.6C1229.82 1542 1115.55 1476.39 1005.06 1412.95C963.671 1389.18 924.588 1366.74 889.799 1339.93C818.67 1285.08 762.809 1198.78 736.568 1103.21C707.783 998.384 717.683 892.08 764.36 803.803C809.844 717.808 876.679 658.894 963.036 628.771C1042.51 601.006 1135.03 598.458 1238.05 621.164C1406.43 658.285 1474.45 780.793 1540.21 899.268C1572.82 957.993 1606.53 1018.73 1652.02 1067.72C1702.95 1122.6 1763.74 1156.87 1837.89 1172.47C1904.49 1186.46 1964.72 1184.18 2016.96 1165.62C2064 1148.92 2102.72 1119.1 2128.93 1079.43C2156.6 1037.56 2169.04 987.544 2164.91 934.829C2160.61 879.985 2138.35 826.395 2100.58 779.841C2027.7 689.967 1887.15 624.397 1751.26 560.994C1613.21 496.565 1482.8 435.749 1420.74 352.264C1367.14 280.19 1338.76 210.017 1336.25 143.686C1334.14 87.5102 1351.24 34.9094 1385.71 -8.44925C1444.36 -82.1971 1547.97 -119.964 1621.56 -94.4053C1699.33 -67.4012 1763.66 -21.3045 1824.01 50.6936C1877.81 114.857 1921.82 191.609 1968.38 272.849C2036.05 390.906 2106.06 513.034 2216.95 619.11C2273.25 672.966 2341.04 700.655 2413 699.095C2501.39 697.232 2574.42 653.074 2613.35 612.378C2641.34 583.092 2663.2 545.286 2674.89 505.883C2687.66 462.829 2688.13 419.508 2676.21 380.561C2659.51 325.945 2610.21 253.301 2470.21 217.549C2410.34 202.259 2361 196.439 2317.42 191.267C2250.15 183.318 2201.56 177.575 2164.07 140.834C2131.87 109.266 2120.65 49.6286 2138.03 2.16229C2154.29 -42.2613 2192.1 -70.1778 2244.5 -76.4153L2244.7 -74.9705C2192.9 -68.7711 2155.52 -41.1959 2139.5 2.65716C2122.32 49.6291 2133.38 108.619 2165.18 139.807C2202.28 176.167 2250.67 181.911 2317.62 189.822C2361.24 194.995 2410.66 200.813 2470.61 216.141C2611.32 252.083 2660.86 325.185 2677.68 380.144C2683.44 399.047 2686.34 418.976 2686.34 439.362L2686.34 439.324Z" fill="url(#paint55_linear_1289_6687)" style=""/>\n<path d="M2697.56 454.88C2697.56 476.825 2694.22 499.342 2687.58 521.782C2675.81 561.413 2653.82 599.447 2625.67 628.885C2586.55 669.809 2513.07 714.195 2424.21 716.096C2351.81 717.618 2283.63 689.815 2227.01 635.655C2115.96 529.426 2045.91 407.223 1978.16 289.052C1931.6 207.849 1887.67 131.173 1833.95 67.1245C1773.76 -4.64555 1709.67 -50.5906 1632.18 -77.4805C1559.18 -102.811 1456.36 -65.2718 1398.08 7.98142C1363.8 51.0359 1346.83 103.332 1348.89 159.166C1351.36 225.193 1379.71 295.099 1433.1 366.907C1494.93 450.087 1625.14 510.827 1763.02 575.181C1899.08 638.659 2039.79 704.306 2112.9 794.446C2150.87 841.228 2173.22 895.122 2177.55 950.233C2181.72 1003.25 2169.2 1053.57 2141.33 1095.71C2114.93 1135.65 2075.97 1165.66 2028.61 1182.47C1976.09 1201.11 1915.58 1203.42 1848.7 1189.39C1774.24 1173.72 1713.17 1139.3 1662.04 1084.19C1616.43 1035.05 1582.68 974.233 1550.04 915.433C1517.23 856.404 1483.36 795.321 1437.32 745.611C1385.71 689.853 1324.09 654.672 1248.86 638.089C1146.12 615.421 1053.92 617.969 974.724 645.619C888.765 675.666 822.209 734.315 776.924 819.967C730.406 907.902 720.546 1013.86 749.252 1118.3C775.413 1213.62 831.075 1299.61 901.965 1354.27C936.714 1381.04 975.718 1403.44 1017.07 1427.18C1127.84 1490.77 1242.38 1556.53 1278.04 1712.77C1293.39 1780.06 1278.36 1889.52 1210.22 1982.4C1162.39 2047.62 1068.91 2129.97 895.286 2152.03L895.087 2150.58C1068.16 2128.6 1161.31 2046.52 1208.94 1981.56C1276.81 1889.02 1291.8 1780.06 1276.53 1713.12C1241.03 1557.52 1126.76 1491.91 1016.27 1428.47C974.883 1404.7 935.8 1382.26 901.011 1355.45C829.882 1300.6 774.021 1214.3 747.78 1118.72C718.995 1013.9 728.895 907.598 775.571 819.321C821.056 733.326 887.89 674.412 974.247 644.289C1053.72 616.524 1146.24 613.976 1249.26 636.682C1417.64 673.803 1485.67 796.31 1551.43 914.785C1584.03 973.51 1617.74 1034.25 1663.23 1083.24C1714.16 1138.12 1774.95 1172.39 1849.1 1187.98C1915.7 1201.98 1975.93 1199.7 2028.18 1181.14C2075.21 1164.44 2113.94 1134.62 2140.14 1094.95C2167.81 1053.08 2180.25 1003.06 2176.12 950.347C2171.82 895.503 2149.56 841.913 2111.79 795.359C2038.91 705.485 1898.36 639.915 1762.47 576.512C1624.42 512.121 1494.02 451.267 1431.95 367.783C1378.36 295.708 1349.97 225.535 1347.46 159.204C1345.32 103.028 1362.45 50.4275 1396.92 7.06882C1455.57 -66.679 1559.18 -104.447 1632.77 -78.8882C1710.54 -51.8841 1774.87 -5.78667 1835.23 66.2116C1889.02 130.375 1933.03 207.127 1979.59 288.367C2047.26 406.425 2117.28 528.513 2228.16 634.628C2284.46 688.484 2352.25 716.173 2424.21 714.613C2512.6 712.75 2585.64 668.592 2624.56 627.896C2652.55 598.61 2674.42 560.804 2686.11 521.401C2698.87 478.347 2699.35 435.026 2687.42 396.08C2670.72 341.463 2621.42 268.818 2481.43 233.066C2421.55 217.776 2372.21 211.957 2328.63 206.785C2261.36 198.836 2212.74 193.092 2175.28 156.352C2143.08 124.784 2131.87 65.1467 2149.24 17.6804C2165.5 -26.7432 2203.31 -54.6607 2255.72 -60.8983L2255.91 -59.4525C2204.11 -53.253 2166.74 -25.6788 2150.71 18.1743C2133.54 65.1462 2144.59 124.137 2176.4 155.325C2213.49 191.685 2261.88 197.428 2328.83 205.339C2372.45 210.512 2421.87 216.331 2481.82 231.659C2622.53 267.601 2672.07 340.702 2688.89 395.661C2694.65 414.564 2697.56 434.494 2697.56 454.88Z" fill="url(#paint56_linear_1289_6687)" style=""/>\n<path d="M2708.81 470.398C2708.81 492.343 2705.47 514.859 2698.83 537.299C2687.06 576.93 2665.07 614.965 2636.92 644.403C2597.8 685.327 2524.33 729.713 2435.47 731.614C2363.06 733.136 2294.88 705.332 2238.26 651.172C2127.22 544.943 2057.16 422.741 1989.41 304.57C1942.85 223.367 1898.92 146.69 1845.21 82.6413C1785.01 10.8713 1720.92 -35.0738 1643.43 -61.9637C1570.43 -87.2942 1467.62 -49.7539 1409.33 23.4995C1375.06 66.5537 1358.08 118.888 1360.15 174.684C1362.61 240.711 1390.96 310.617 1444.36 382.463C1506.18 465.643 1636.39 526.383 1774.27 590.737C1910.33 654.215 2051.04 719.861 2124.15 810.002C2162.12 856.783 2184.47 910.678 2188.8 965.789C2192.98 1018.81 2180.45 1069.13 2152.58 1111.27C2126.18 1151.2 2087.22 1181.21 2039.86 1198.02C1987.34 1216.66 1926.83 1218.98 1859.96 1204.95C1785.49 1189.28 1724.42 1154.86 1673.29 1099.74C1627.68 1050.6 1593.93 989.788 1561.29 930.988C1528.49 871.959 1494.61 810.877 1448.57 761.167C1396.96 705.409 1335.34 670.228 1260.11 653.645C1157.38 630.977 1065.18 633.525 985.975 661.176C900.017 691.222 833.5 749.871 788.175 835.523C741.657 923.458 731.797 1029.42 760.503 1133.86C786.664 1229.17 842.327 1315.17 913.217 1369.82C947.967 1396.6 987.01 1419 1028.32 1442.73C1139.09 1506.33 1253.63 1572.09 1289.3 1728.33C1302.18 1784.85 1293.07 1883.78 1225.05 1976.54C1175.75 2043.75 1078.5 2128.75 895.326 2152.07L895.127 2150.62C1077.78 2127.42 1174.67 2042.68 1223.81 1975.74C1291.6 1883.36 1300.67 1784.92 1287.83 1728.67C1252.32 1573.08 1138.05 1507.47 1027.56 1444.03C986.175 1420.26 947.092 1397.82 912.303 1371C841.174 1316.16 785.313 1229.86 759.072 1134.28C730.287 1029.46 740.187 923.153 786.863 834.876C832.348 748.881 899.182 689.967 985.539 659.844C1065.02 632.079 1157.54 629.531 1260.55 652.237C1428.93 689.358 1496.96 811.866 1562.72 930.342C1595.32 989.066 1629.04 1049.81 1674.52 1098.79C1725.45 1153.68 1786.24 1187.95 1860.39 1203.54C1926.99 1217.54 1987.22 1215.25 2039.47 1196.69C2086.5 1180 2125.23 1150.18 2151.43 1110.51C2179.1 1068.63 2191.55 1018.62 2187.41 965.903C2183.12 911.058 2160.85 857.468 2123.08 810.914C2050.2 721.04 1909.65 655.471 1773.76 592.068C1635.72 527.677 1505.31 466.822 1443.28 383.338C1389.69 311.263 1361.26 241.091 1358.79 174.76C1356.69 118.584 1373.78 65.9834 1408.26 22.6247C1466.9 -51.1231 1570.51 -88.8911 1644.1 -63.3323C1721.87 -36.3282 1786.2 9.76851 1846.56 81.7666C1900.35 145.93 1944.36 222.683 1990.92 303.923C2058.59 421.981 2128.61 544.069 2239.49 650.184C2295.79 704.04 2363.58 731.728 2435.55 730.169C2523.93 728.305 2596.97 684.148 2635.89 643.452C2663.88 614.166 2685.75 576.36 2697.44 536.957C2710.2 493.903 2710.68 450.581 2698.75 411.635C2682.05 357.018 2632.75 284.374 2492.76 248.622C2432.88 233.332 2383.54 227.512 2339.96 222.34C2272.69 214.391 2224.11 208.648 2186.62 171.908C2154.41 140.34 2143.2 80.7016 2160.57 33.2353C2176.83 -11.1883 2214.65 -39.1048 2267.05 -45.3424L2267.25 -43.8975C2215.44 -37.6981 2178.07 -10.1229 2162.04 33.7302C2144.87 80.7021 2155.92 139.693 2187.73 170.881C2224.82 207.241 2273.21 212.984 2340.16 220.895C2383.78 226.068 2433.2 231.886 2493.16 247.214C2633.86 283.156 2683.4 356.258 2700.22 411.217C2705.99 430.12 2708.89 450.05 2708.89 470.436L2708.81 470.398Z" fill="url(#paint57_linear_1289_6687)" style=""/>\n<path d="M2720.06 485.954C2720.06 507.899 2716.72 530.416 2710.08 552.856C2698.31 592.487 2676.33 630.521 2648.18 659.959C2609.05 700.883 2535.58 745.27 2446.72 747.171C2374.32 748.693 2306.13 720.889 2249.51 666.729C2138.47 560.5 2068.41 438.298 2000.66 320.127C1954.11 238.924 1910.17 162.248 1856.46 98.1984C1796.26 26.4284 1732.17 -19.5166 1654.68 -46.4065C1581.69 -71.7371 1478.87 -34.1978 1420.58 39.0556C1386.31 82.1098 1369.33 134.33 1371.4 190.24C1373.87 256.267 1402.21 326.174 1455.61 397.982C1517.43 481.162 1647.65 541.902 1785.53 606.255C1921.58 669.734 2062.29 735.38 2135.41 825.52C2173.38 872.302 2195.72 926.196 2200.06 981.307C2204.19 1034.33 2191.71 1084.65 2163.83 1126.79C2137.43 1166.72 2098.47 1196.73 2051.12 1213.54C1998.6 1232.18 1938.08 1234.5 1871.21 1220.46C1796.74 1204.79 1735.67 1170.41 1684.54 1115.26C1638.94 1066.12 1605.18 1005.31 1572.54 946.507C1539.74 887.478 1505.87 826.395 1459.82 776.685C1408.22 720.927 1346.59 685.746 1271.37 669.164C1168.63 646.495 1076.43 649.044 997.229 676.694C911.271 706.703 844.754 765.389 799.429 851.041C752.911 938.976 743.051 1044.94 771.757 1149.38C797.918 1244.69 853.58 1330.69 924.47 1385.34C959.22 1412.12 998.264 1434.52 1039.57 1458.25C1150.34 1521.85 1264.89 1587.61 1300.55 1743.85C1312.76 1797.4 1303.41 1885.22 1240.47 1970.99C1189.86 2039.98 1088.87 2127.42 895.328 2152.03L895.129 2150.58C1088.12 2126.05 1188.79 2038.92 1239.24 1970.19C1301.9 1884.8 1311.2 1797.48 1299.08 1744.19C1263.57 1588.59 1149.31 1522.99 1038.82 1459.55C997.428 1435.77 958.345 1413.33 923.556 1386.52C852.427 1331.68 796.566 1245.38 770.325 1149.8C741.579 1044.98 751.44 938.672 798.117 850.395C843.601 764.4 910.436 705.486 996.793 675.363C1076.27 647.598 1168.79 645.05 1271.8 667.756C1440.18 704.877 1508.21 827.385 1573.97 945.86C1606.57 1004.58 1640.29 1065.32 1685.77 1114.31C1736.7 1169.19 1797.5 1203.46 1871.65 1219.06C1938.24 1233.05 1998.48 1230.77 2050.72 1212.21C2097.76 1195.51 2136.48 1165.7 2162.68 1126.03C2190.35 1084.15 2202.8 1034.14 2198.66 981.459C2194.37 926.615 2172.1 873.025 2134.33 826.471C2061.46 736.597 1920.91 671.027 1785.01 607.624C1646.97 543.233 1516.56 482.379 1454.5 398.895C1400.9 326.82 1372.51 256.648 1370.01 190.316C1367.9 134.14 1385 81.5395 1419.47 38.1809C1478.11 -35.5669 1581.72 -73.334 1655.32 -47.7752C1733.09 -20.7713 1797.42 25.3256 1857.77 97.3237C1911.56 161.487 1955.58 238.239 2002.14 319.479C2069.8 437.537 2139.82 559.664 2250.71 665.74C2307.01 719.596 2374.8 747.285 2446.76 745.725C2535.14 743.862 2608.18 699.704 2647.1 659.008C2675.09 629.722 2696.96 591.916 2708.65 552.513C2721.41 509.459 2721.89 466.138 2709.96 427.192C2693.26 372.575 2643.96 299.93 2503.97 264.178C2444.09 248.888 2394.75 243.069 2351.18 237.897C2283.91 229.948 2235.28 224.205 2197.83 187.464C2165.62 155.896 2154.41 96.2587 2171.79 48.7924C2188.05 4.36883 2225.86 -23.5477 2278.26 -29.8233L2278.46 -28.3785C2226.65 -22.179 2189.28 5.39618 2173.26 49.2492C2156.08 96.2211 2167.13 155.173 2198.94 186.399C2236.04 222.759 2284.42 228.503 2351.38 236.414C2394.99 241.549 2444.41 247.405 2504.37 262.733C2645.08 298.675 2694.62 371.777 2711.43 426.736C2717.2 445.638 2720.1 465.568 2720.1 485.954L2720.06 485.954Z" fill="url(#paint58_linear_1289_6687)" style=""/>\n</g>\n<defs>\n<linearGradient id="paint0_linear_1289_6687" x1="1014.98" y1="1932" x2="1014.98" y2="-711.053" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint1_linear_1289_6687" x1="1026.31" y1="1932" x2="1026.31" y2="-695.496" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint2_linear_1289_6687" x1="1037.49" y1="1932.08" x2="1037.49" y2="-679.862" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint3_linear_1289_6687" x1="1048.74" y1="1932.04" x2="1048.74" y2="-664.343" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint4_linear_1289_6687" x1="1059.93" y1="1932.12" x2="1059.93" y2="-648.75" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint5_linear_1289_6687" x1="1071.22" y1="1932.04" x2="1071.22" y2="-633.269" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint6_linear_1289_6687" x1="1082.43" y1="1932.12" x2="1082.43" y2="-617.639" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint7_linear_1289_6687" x1="1093.73" y1="1932.08" x2="1093.73" y2="-602.196" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint8_linear_1289_6687" x1="1104.93" y1="1932.12" x2="1104.93" y2="-586.602" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint9_linear_1289_6687" x1="1116.23" y1="1932.04" x2="1116.23" y2="-571.121" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint10_linear_1289_6687" x1="1127.44" y1="1932" x2="1127.44" y2="-555.605" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint11_linear_1289_6687" x1="1138.69" y1="1932.08" x2="1138.69" y2="-539.972" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint12_linear_1289_6687" x1="1149.91" y1="1932" x2="1149.9" y2="-524.57" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint13_linear_1289_6687" x1="1161.1" y1="1932.12" x2="1161.1" y2="-508.86" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint14_linear_1289_6687" x1="1172.35" y1="1932.04" x2="1172.35" y2="-493.455" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint15_linear_1289_6687" x1="1183.6" y1="1932.12" x2="1183.6" y2="-477.709" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint16_linear_1289_6687" x1="1194.79" y1="1932.08" x2="1194.79" y2="-462.266" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint17_linear_1289_6687" x1="1206.07" y1="1932.04" x2="1206.07" y2="-446.747" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint18_linear_1289_6687" x1="1217.34" y1="1932.04" x2="1217.34" y2="-431.268" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint19_linear_1289_6687" x1="1228.59" y1="1932.08" x2="1228.59" y2="-415.674" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint20_linear_1289_6687" x1="1239.84" y1="1932.05" x2="1239.84" y2="-400.155" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint21_linear_1289_6687" x1="1250.99" y1="1931.97" x2="1250.99" y2="-384.714" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint22_linear_1289_6687" x1="1262.33" y1="1932.12" x2="1262.33" y2="-368.968" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint23_linear_1289_6687" x1="1273.57" y1="1932.05" x2="1273.57" y2="-353.562" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint24_linear_1289_6687" x1="1284.73" y1="1932.12" x2="1284.73" y2="-337.855" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint25_linear_1289_6687" x1="1295.98" y1="1932.05" x2="1295.98" y2="-322.374" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint26_linear_1289_6687" x1="1307.22" y1="1932.08" x2="1307.22" y2="-306.781" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint27_linear_1289_6687" x1="1318.45" y1="1932.05" x2="1318.45" y2="-291.338" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint28_linear_1289_6687" x1="1329.72" y1="1932.08" x2="1329.72" y2="-275.745" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint29_linear_1289_6687" x1="1411.19" y1="2151.99" x2="1411.19" y2="-506.623" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint30_linear_1289_6687" x1="1422.37" y1="2152.02" x2="1422.37" y2="-490.953" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint31_linear_1289_6687" x1="1433.6" y1="2151.99" x2="1433.6" y2="-475.51" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint32_linear_1289_6687" x1="1444.82" y1="2151.99" x2="1444.82" y2="-459.992" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint33_linear_1289_6687" x1="1456.09" y1="2151.99" x2="1456.09" y2="-444.399" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint34_linear_1289_6687" x1="1467.32" y1="2151.99" x2="1467.32" y2="-428.956" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint35_linear_1289_6687" x1="1478.55" y1="2152.03" x2="1478.55" y2="-413.324" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint36_linear_1289_6687" x1="1489.82" y1="2151.99" x2="1489.82" y2="-397.805" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint37_linear_1289_6687" x1="1501.1" y1="2152.06" x2="1501.1" y2="-382.175" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint38_linear_1289_6687" x1="1512.31" y1="2152.02" x2="1512.31" y2="-366.657" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint39_linear_1289_6687" x1="1523.52" y1="2151.99" x2="1523.52" y2="-351.099" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint40_linear_1289_6687" x1="1534.77" y1="2151.95" x2="1534.77" y2="-335.621" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint41_linear_1289_6687" x1="1546.04" y1="2151.99" x2="1546.04" y2="-320.063" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint42_linear_1289_6687" x1="1557.23" y1="2151.95" x2="1557.23" y2="-304.585" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint43_linear_1289_6687" x1="1568.5" y1="2152.03" x2="1568.5" y2="-288.952" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint44_linear_1289_6687" x1="1579.7" y1="2152.03" x2="1579.7" y2="-273.471" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint45_linear_1289_6687" x1="1590.97" y1="2151.95" x2="1590.97" y2="-257.955" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint46_linear_1289_6687" x1="1602.2" y1="2152.03" x2="1602.2" y2="-242.32" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint47_linear_1289_6687" x1="1613.45" y1="2151.95" x2="1613.45" y2="-226.88" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint48_linear_1289_6687" x1="1624.66" y1="2152.07" x2="1624.66" y2="-211.209" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint49_linear_1289_6687" x1="1635.91" y1="2151.99" x2="1635.91" y2="-195.689" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint50_linear_1289_6687" x1="1647.21" y1="2152.03" x2="1647.21" y2="-180.134" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint51_linear_1289_6687" x1="1658.42" y1="2151.95" x2="1658.42" y2="-164.695" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint52_linear_1289_6687" x1="1669.65" y1="2152.03" x2="1669.65" y2="-149.097" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint53_linear_1289_6687" x1="1680.96" y1="2151.99" x2="1680.96" y2="-133.579" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint54_linear_1289_6687" x1="1692.16" y1="2151.99" x2="1692.16" y2="-118.023" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint55_linear_1289_6687" x1="1703.35" y1="2152.03" x2="1703.35" y2="-102.429" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint56_linear_1289_6687" x1="1714.56" y1="2151.99" x2="1714.56" y2="-86.9109" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint57_linear_1289_6687" x1="1725.87" y1="2152.03" x2="1725.87" y2="-71.3547" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint58_linear_1289_6687" x1="1737.11" y1="2151.99" x2="1737.11" y2="-55.7975" gradientUnits="userSpaceOnUse">\n<stop stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4449 0.5173 0.5868);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#849BB4" style="stop-color:#849BB4;stop-color:color(display-p3 0.5178 0.6081 0.7058);stop-opacity:1;"/>\n<stop offset="0.16" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.21" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#B5C3D8" style="stop-color:#B5C3D8;stop-color:color(display-p3 0.7114 0.7651 0.8457);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#CFDDEC" style="stop-color:#CFDDEC;stop-color:color(display-p3 0.8101 0.8657 0.9258);stop-opacity:1;"/>\n<stop offset="0.75" stop-color="#C6D4EA" style="stop-color:#C6D4EA;stop-color:color(display-p3 0.7754 0.8321 0.9171);stop-opacity:1;"/>\n<stop offset="0.87" stop-color="#DCE5F1" style="stop-color:#DCE5F1;stop-color:color(display-p3 0.8627 0.8980 0.9451);stop-opacity:1;"/>\n<stop offset="1" stop-color="#718496" style="stop-color:#718496;stop-color:color(display-p3 0.4431 0.5176 0.5882);stop-opacity:1;"/>\n</linearGradient>\n<clipPath id="clip0_1289_6687">\n<rect width="1440" height="900" fill="white" style="fill:white;fill-opacity:1;"/>\n</clipPath>\n</defs>\n</svg>\n';

  // src/HomepageWaveAnim.ts
  var HomepageWaveAnim = class {
    paths;
    constructor() {
      const ctn = document.querySelector('[data-section="none"] .hero-bg_box');
      ctn.innerHTML = homepage_waves_default;
      const svg = ctn.querySelector("svg");
      svg.style.width = "100%";
      svg.style.height = "100%";
      this.paths = svg.querySelectorAll("path");
      this.reset();
    }
    play() {
      this.reset();
      this.paths.forEach((path, i) => {
        gsap.to(path, { opacity: 1, duration: 1, delay: i * 0.03, ease: "power2.easeIn" });
        gsap.to(path, { x: 0, y: 0, duration: 1, delay: i * 0.03, ease: "power2.easeInOut" });
      });
    }
    reset() {
      this.paths.forEach((path) => {
        gsap.killTweensOf(path);
        gsap.set(path, { opacity: 0, x: 50, y: 50, transformOrigin: "50% 50%" });
      });
    }
  };

  // src/MobilePinning.js
  var MobilePinning = class {
    sections;
    constructor() {
      this.sections = $(".section_part");
    }
    start() {
      this.sections.each((index, section) => {
        if (index === this.sections.length - 1)
          return;
        const nextSection = this.sections[index + 1];
        const currentHeight = $(section).outerHeight();
        const isShortSection = currentHeight <= window.innerHeight;
        $(section).css({ position: "relative", zIndex: 1 });
        $(nextSection).css({ position: "relative", zIndex: 2 });
        ScrollTrigger.create({
          trigger: section,
          start: isShortSection ? "top top" : "bottom bottom",
          endTrigger: nextSection,
          end: "top top",
          pin: true,
          pinSpacing: false,
          anticipatePin: 1,
          onEnter: () => {
            $(section).css({ zIndex: 1 });
            $(nextSection).css({ zIndex: 2 });
          },
          onEnterBack: () => {
            $(section).css({ zIndex: 1 });
            $(nextSection).css({ zIndex: 2 });
          },
          onLeave: () => {
            $(section).css({ zIndex: 1 });
            $(nextSection).css({ zIndex: 2 });
          },
          onLeaveBack: () => {
            $(section).css({ zIndex: 1 });
            $(nextSection).css({ zIndex: 2 });
          }
        });
      });
    }
    kill() {
      ScrollTrigger.getAll().forEach((st) => {
        if (st.vars.pin)
          st.kill();
      });
      this.sections.each((_, section) => {
        $(section).css({ position: "", zIndex: "" });
      });
    }
  };

  // src/Modals.js
  var Modals = class {
    modalGroup;
    modals;
    modalTargets;
    constructor() {
      this.modalGroup = document.querySelector("[data-modal-group-status]");
      this.modals = document.querySelectorAll("[data-modal-name]");
      this.modalTargets = document.querySelectorAll("[data-modal-target]");
      this.modalTargets.forEach((modalTarget) => {
        modalTarget.addEventListener("click", this.openModal.bind(this));
      });
      document.querySelectorAll("[data-modal-close]").forEach((closeBtn) => {
        closeBtn.addEventListener("click", this.closeAllModals.bind(this));
      });
      document.addEventListener("keydown", (event) => {
        if (event.key === "Escape") {
          this.closeAllModals();
        }
      });
    }
    openModal(e) {
      const modalTarget = e.currentTarget;
      const modalTargetName = modalTarget.getAttribute("data-modal-target");
      this.modalTargets.forEach((target) => target.setAttribute("data-modal-status", "not-active"));
      this.modals.forEach((modal) => modal.setAttribute("data-modal-status", "not-active"));
      if (modalTargetName === "team") {
        let teamCard = $(modalTarget).closest(".team-list-item");
        let currentIndex = teamCard.parent().index();
        let teamName = teamCard.find("[data-team-name]").text();
        let teamRole = teamCard.find("[data-team-role]").text();
        let backgroundColor = $(modalTarget).css("background-color");
        document.querySelector(`[data-modal-name="${modalTargetName}"]`).style.backgroundColor = backgroundColor;
        $("[data-target-name]").text(teamName);
        $("[data-target-role]").text(teamRole);
        $(".team_visual .w-dyn-item").hide();
        $(".team_visual .w-dyn-item").eq(currentIndex).fadeIn();
        $(".team_role-rich-item").hide();
        $(".team_role-rich-item").eq(currentIndex).show();
      }
      document.querySelector(`[data-modal-target="${modalTargetName}"]`).setAttribute("data-modal-status", "active");
      document.querySelector(`[data-modal-name="${modalTargetName}"]`).setAttribute("data-modal-status", "active");
      if (this.modalGroup) {
        this.modalGroup.setAttribute("data-modal-group-status", "active");
      }
      window.dispatchEvent(new CustomEvent("modal_open"));
    }
    // Function to close all modals
    closeAllModals() {
      this.modalTargets.forEach((target) => target.setAttribute("data-modal-status", "not-active"));
      if (this.modalGroup) {
        this.modalGroup.setAttribute("data-modal-group-status", "not-active");
      }
      window.dispatchEvent(new CustomEvent("modal_closed"));
    }
  };

  // src/Nav.js
  var Nav = class {
    _isMobile;
    navbar;
    wNavBtn;
    navLinks;
    onScrollBound;
    _currentSection;
    navContainer;
    navBg;
    constructor() {
      this.navbar = $(".nav");
      this.wNavBtn = $(".w-nav-button");
      this.navLinks = $(".nav_menu-link");
      this.navContainer = document.querySelector(".nav_menu-inner");
      this.navBg = document.querySelector(".nav_menu-bg");
      this.contactBtns = document.querySelectorAll(".btn.cc-nav");
      this.onScrollBound = this.onScroll.bind(this);
      this.navLinks.on("click", (e) => {
        e.preventDefault();
        const linkId = $(e.currentTarget).attr("id");
        this.mobileScrollToSection(linkId);
        window.history.pushState({}, "", `${document.location.origin}#${linkId}`);
        window.dispatchEvent(new CustomEvent("clicked_nav", { detail: linkId }));
      });
      $(".nav_brand").on("click", () => {
        window.dispatchEvent(new CustomEvent("clicked_nav", { detail: "none" }));
      });
      this.createObserver(this.wNavBtn, this.menuCallback.bind(this));
      window.addEventListener("hashchange", this.deepLink.bind(this));
    }
    get isMobile() {
      return this._isMobile;
    }
    set isMobile(val) {
      if (val !== this._isMobile) {
        if (val) {
          window.addEventListener("scroll", this.onScrollBound);
        } else {
          window.removeEventListener("scroll", this.onScrollBound);
        }
      }
      this._isMobile = val;
    }
    get currentSection() {
      return this._currentSection;
    }
    set currentSection(section) {
      this._currentSection = section;
      const targetLink = this.navLinks.filter(`#${section}`);
      this.navLinks.removeClass("active");
      targetLink.addClass("active");
      this.animateNavBackground(targetLink[0]);
      this.updateContactBtn(section);
    }
    deepLink() {
      let linkId = document.location.hash.substring(1);
      if (linkId === "top") {
        linkId = "none";
      }
      if (linkId.trim() !== "") {
        window.dispatchEvent(new CustomEvent("clicked_nav", { detail: linkId }));
      }
    }
    mobileScrollToSection(linkId) {
      if (this.isMobile) {
        if (linkId === "top") {
          linkId = "none";
        }
        const targetSection = $(`.section_part[data-section="${linkId}"]`);
        if (targetSection.length) {
          const pinSpacer = targetSection.parent(".pin-spacer");
          let scrollTarget;
          if (pinSpacer.length) {
            scrollTarget = pinSpacer.offset().top;
          } else {
            scrollTarget = targetSection.offset().top;
          }
          gsap.to(window, { scrollTo: { y: scrollTarget }, duration: 0, ease: "power2.out" });
        }
      }
    }
    createObserver(targetNodes, callback) {
      targetNodes.each((i, node) => {
        const observer = new MutationObserver((mutationsList) => {
          mutationsList.forEach((mutation) => {
            if (mutation.type === "attributes" && mutation.attributeName === "class") {
              callback(mutation.target);
            }
          });
        });
        observer.observe(node, { attributes: true, attributeFilter: ["class"] });
      });
    }
    updateContactBtn(section) {
      if (!this.isMobile && section === "none") {
        this.contactBtns.forEach((elm) => elm.classList.add("start"));
      } else {
        this.contactBtns.forEach((elm) => elm.classList.remove("start"));
      }
    }
    animateNavBackground(targetLink) {
      if (!targetLink) {
        this.navBg.style.opacity = "0";
        return;
      }
      const containerRect = this.navContainer.getBoundingClientRect();
      const linkRect = targetLink.getBoundingClientRect();
      const relativeLeft = linkRect.left - containerRect.left;
      gsap.to(this.navBg, {
        x: relativeLeft,
        opacity: 1,
        width: linkRect.width,
        height: linkRect.height,
        duration: 0.4,
        ease: "power2.out"
      });
    }
    menuCallback() {
      if (this.wNavBtn.hasClass("w--open")) {
        this.navbar.addClass("open");
      } else {
        this.navbar.removeClass("open");
      }
    }
    onScroll() {
      if (this.navbar.length && this.isMobile) {
        if (window.scrollY > this.navbar.height() / 2) {
          if (!this.navbar.hasClass("active")) {
            this.navbar.addClass("active");
          }
        } else {
          if (this.navbar.hasClass("active")) {
            this.navbar.removeClass("active");
          }
        }
      }
    }
  };

  // src/Preloader.js
  var Preloader = class {
    SEEN_PRELOADED_KEY = "seen_preloader";
    isMobile = false;
    skip;
    constructor() {
      this.skip = window.sessionStorage.getItem(this.SEEN_PRELOADED_KEY) === "true" || document.location.hash !== "";
      if (!this.skip) {
        window.sessionStorage.setItem(this.SEEN_PRELOADED_KEY, "true");
      }
    }
    start() {
      let preloader = $(".page-load");
      let preloaderParts = $(".page-load_item");
      let preLoaderBgTop = $(".page-load_bg.cc-top");
      let preLoaderBgBottom = $(".page-load_bg.cc-bottom");
      let mainContent = $(".page-main");
      let sections = $(".section");
      let nav = $(".nav_wrapper");
      window.dispatchEvent(new CustomEvent("preloader_begin"));
      let tl = gsap.timeline({
        onComplete: () => {
          let heroItems = $(".section.cc-hero").find("[data-animation]");
          heroItems.each((i, elm) => {
            gsapAnimate($(elm), this.isMobile);
          });
          window.dispatchEvent(new CustomEvent("preloader_complete"));
        }
      });
      mainContent[0].style.display = "flex";
      gsap.set(sections, { autoAlpha: 0 });
      gsap.set(nav, { autoAlpha: 0 });
      preloaderParts.each(function(index) {
        if (index === 0) {
          tl.fromTo(
            $(this),
            {
              yPercent: 50,
              opacity: 0
            },
            {
              yPercent: 0,
              opacity: 1,
              delay: 1,
              duration: 0.5,
              display: "block"
            }
          );
          tl.to(
            preLoaderBgTop,
            {
              xPercent: -5,
              rotate: -3
            },
            "<"
          );
          tl.to(
            preLoaderBgBottom,
            {
              xPercent: 5,
              rotate: -3
            },
            "<"
          );
          tl.to($(this), {
            opacity: 0,
            delay: 1.5
          });
        }
        if (index === 1) {
          tl.fromTo(
            $(this),
            {
              opacity: 0,
              scale: 0.8
            },
            {
              display: "block",
              opacity: 1,
              scale: 1
            }
          );
          tl.to(
            preLoaderBgTop,
            {
              xPercent: -10,
              rotate: -6
            },
            "<"
          );
          tl.to(
            preLoaderBgBottom,
            {
              xPercent: 10,
              rotate: -6
            },
            "<"
          );
          tl.to($(this), {
            opacity: 0,
            delay: 0.7
          });
        }
        if (index === 2) {
          tl.to($(this), {
            display: "block"
          });
          tl.fromTo(
            $(this).find("span"),
            {
              yPercent: 50,
              opacity: 0
            },
            {
              yPercent: 0,
              opacity: 1
            }
          );
          tl.to(
            preLoaderBgTop,
            {
              xPercent: -15,
              rotate: -9
            },
            "<"
          );
          tl.to(
            preLoaderBgBottom,
            {
              xPercent: 15,
              rotate: -9
            },
            "<"
          );
          tl.to(
            $(this).find("span"),
            {
              yPercent: 0,
              opacity: 0,
              stagger: {
                each: 0.1
              },
              delay: 3
            },
            "<"
          );
          tl.to(
            preLoaderBgTop,
            {
              yPercent: -100
            },
            "<"
          );
          tl.to(
            preLoaderBgBottom,
            {
              xPercent: 100
            },
            "<"
          );
          tl.to($(this), {
            opacity: 0
          });
        }
      });
      tl.to(preloader, { autoAlpha: 0, duration: 1, ease: "linear" }, "<");
      tl.to(sections, { autoAlpha: 1, duration: 1, ease: "linear" }, "<");
      tl.to(nav, { autoAlpha: 1, display: "block", duration: 1, ease: "linear" }, "<");
      if (this.skip) {
        tl.progress(1);
      }
    }
  };

  // src/ScrollSnap.ts
  var _ScrollSnap = class {
    // ==============================================================
    // #endregion Properties
    // #region Lifecycle
    // ==============================================================
    /**
     *
     * @param sections The blades within that determine where the stop points are.
     */
    constructor(sections) {
      this.sections = sections;
      gsap.registerPlugin(ScrollToPlugin);
      this.intObs = new IntersectionObserver(this.onIntersectionBound, { threshold: 0.2 });
    }
    // #region Properties
    // ==============================================================
    // Public
    paused = false;
    // State
    isAnimating = false;
    isScrollingWithinSection = false;
    currentSectionIdx = 0;
    prevDir = null;
    prevScrollStrength = 0;
    targetX = 0;
    lastScrollTime = 0;
    // Other
    intObs;
    // Listeners
    onIntersectionBound = this.onIntersection.bind(this);
    onMouseWheelBound = this.onMouseWheel.bind(this);
    onKeyDownBound = this.onKeyDown.bind(this);
    onResizeBound = this.onResize.bind(this);
    // ==============================================================
    // #endregion Lifecycle
    // #region Public methods
    // ==============================================================
    start() {
      this.currentSectionIdx = 0;
      window.scrollTo({ left: 0, top: 0 });
      this.paused = false;
      this.sections.forEach((elm) => this.intObs.observe(elm));
      window.addEventListener("wheel", this.onMouseWheelBound, { passive: false });
      window.addEventListener("keydown", this.onKeyDownBound, { passive: false });
      window.addEventListener("resize", this.onResizeBound);
    }
    kill() {
      this.isAnimating = false;
      this.isScrollingWithinSection = false;
      this.prevScrollStrength = 0;
      this.targetX = 0;
      this.prevDir = null;
      this.intObs.disconnect();
      gsap.killTweensOf(window);
      window.removeEventListener("wheel", this.onMouseWheelBound);
      window.removeEventListener("keydown", this.onKeyDownBound);
      window.removeEventListener("resize", this.onResizeBound);
      gsap.killTweensOf(window);
    }
    /**
     * Animate to a target section
     * @param targetSectionIdx index of `this.sections` to animate to
     * @param instant Defaults to false. Whether or not you want to ignore the animation and jump straight to the end state.
     * @param fromScrollEvent Should be ignored/undefined when calling this method externally
     */
    gotoIdx(targetSectionIdx, instant = false, fromScrollEvent = false) {
      if (this.isAnimating) {
        return;
      }
      const dir = this.currentSectionIdx < targetSectionIdx ? 1 /* RIGHT */ : 0 /* LEFT */;
      this.currentSectionIdx = targetSectionIdx;
      this.isAnimating = !instant;
      this.isScrollingWithinSection = false;
      const targetSection = this.sections[this.currentSectionIdx];
      this.targetX = targetSection.offsetLeft;
      if (fromScrollEvent && dir === 0 /* LEFT */ && targetSection.offsetWidth > window.innerWidth) {
        this.targetX = targetSection.offsetLeft + targetSection.offsetWidth - window.innerWidth;
      }
      if (!instant) {
        window.dispatchEvent(new CustomEvent("scrolling", { detail: dir }));
      }
      gsap.to(window, {
        scrollTo: { x: this.targetX, y: 0 },
        duration: instant ? 0 : _ScrollSnap.SCROLL_DUR,
        ease: _ScrollSnap.SCROLL_EASE_BETWEEN_SECTIONS,
        onComplete: () => {
          this.isAnimating = false;
        }
      });
    }
    // ==============================================================
    // #endregion End Public methods
    // #region Private methods
    // ==============================================================
    /**
     * We're within a section that's wider than the viewport. Smooth the scrolling within it.
     */
    scrollWithinSection(e) {
      if (this.isAnimating) {
        return;
      }
      const scrollStrength = e.deltaY;
      const dir = scrollStrength > 0 ? 1 /* RIGHT */ : 0 /* LEFT */;
      if (!this.isScrollingWithinSection && Math.abs(scrollStrength) < this.prevScrollStrength && dir === this.prevDir) {
        return true;
      }
      this.targetX += scrollStrength * _ScrollSnap.SCROLL_STRENGTH_MULTIPLIER;
      const currentSection = this.sections[this.currentSectionIdx];
      const minX = currentSection.offsetLeft;
      const maxX = currentSection.offsetLeft + currentSection.offsetWidth - window.innerWidth;
      this.targetX = this.clamp(minX, this.targetX, maxX);
      if (!this.isScrollingWithinSection) {
        this.isScrollingWithinSection = true;
        this.smoothScrollWithinSection();
      }
      const currentX = window.scrollX;
      const buffer = 30;
      const isWithin = dir === 0 /* LEFT */ && currentX > minX + buffer || dir === 1 /* RIGHT */ && currentX < maxX - buffer;
      return isWithin;
    }
    /**
     * Ease between a current value and a target value
     */
    smoothScrollWithinSection() {
      const currentX = window.scrollX;
      const deltaX = this.targetX - currentX;
      const EASING = _ScrollSnap.SCROLL_EASE_WITHIN_SECTION;
      gsap.set(window, { scrollTo: { x: currentX + deltaX * EASING, y: 0 } });
      if (this.isScrollingWithinSection) {
        requestAnimationFrame(this.smoothScrollWithinSection.bind(this));
      }
    }
    /**
     * Go left or right. Calculate which section index that should be.
     * @param dir
     */
    go(dir) {
      this.prevDir = dir;
      let targetSectionIdx = this.currentSectionIdx + (dir === 1 /* RIGHT */ ? 1 : -1);
      targetSectionIdx = this.clamp(0, targetSectionIdx, this.sections.length - 1);
      if (targetSectionIdx !== this.currentSectionIdx) {
        this.gotoIdx(targetSectionIdx, false, true);
      }
    }
    /**
     * Simple utility to clamp a value between a min and max.
     * @param min Lowest possible value
     * @param val Current value
     * @param max Maximum possible value
     */
    clamp(min, val, max) {
      return Math.min(Math.max(val, min), max);
    }
    // ==============================================================
    // #endregion End Private methods
    // #region Event Listeners
    // ==============================================================
    /**
     * On sections coming on screen, evaluate which one is visible and report back to the main controller
     */
    onIntersection(entries) {
      const visibles = entries.filter((entry) => entry.isIntersecting);
      if (visibles.length) {
        const section = visibles[0].target;
        const idx = [...this.sections].findIndex((s) => s === section);
        this.currentSectionIdx = idx;
        window.dispatchEvent(new CustomEvent("go_to_section", { detail: idx }));
      }
    }
    /**
     * On mouse wheel interaction, figure out which way we're scrolling.
     */
    onMouseWheel(e) {
      if (this.paused) {
        return;
      }
      e.preventDefault();
      e.stopImmediatePropagation();
      const scrollStrength = e.deltaY;
      if (Math.abs(scrollStrength) < _ScrollSnap.MIN_SCROLL_STRENGTH) {
        this.prevScrollStrength = 0;
        return;
      }
      const currentTime = performance.now();
      const timeSinceLastScroll = currentTime - this.lastScrollTime;
      const currentSection = this.sections[this.currentSectionIdx];
      if (currentSection.offsetWidth > window.innerWidth) {
        const withinSectionBounds = this.scrollWithinSection(e);
        if (withinSectionBounds) {
          return;
        }
      }
      const dir = scrollStrength > 0 ? 1 /* RIGHT */ : 0 /* LEFT */;
      if (timeSinceLastScroll > _ScrollSnap.MOMENTUM_TIMEOUT && (Math.abs(scrollStrength) - this.prevScrollStrength > 20 || dir !== this.prevDir)) {
        this.lastScrollTime = currentTime;
        this.go(dir);
      }
      this.prevScrollStrength = Math.abs(scrollStrength);
    }
    /**
     * On keydown. So the user can still navigate via keyboard.
     */
    onKeyDown(e) {
      if (this.paused) {
        return;
      }
      const tagName = e.target.tagName.toLowerCase();
      if (tagName === "input" || tagName === "textarea" || tagName === "select" || e.target.isContentEditable) {
        return;
      }
      let dir;
      if (e.key === "ArrowDown" || e.key === "ArrowRight") {
        dir = 1 /* RIGHT */;
      } else if (e.key === "ArrowUp" || e.key === "ArrowLeft") {
        dir = 0 /* LEFT */;
      } else {
        return;
      }
      const currentSection = this.sections[this.currentSectionIdx];
      if (currentSection.offsetWidth > window.innerWidth) {
        const scrollAmt = 300;
        const deltaY = dir === 1 /* RIGHT */ ? scrollAmt : -scrollAmt;
        const withinSectionBounds = this.scrollWithinSection(new WheelEvent("wheel", { deltaY }));
        if (withinSectionBounds) {
          return;
        }
      }
      this.go(dir);
    }
    /**
     * Window resize event handler
     */
    onResize() {
      if (this.paused) {
        return;
      }
      const targetSection = this.sections[this.currentSectionIdx];
      this.targetX = targetSection.offsetLeft;
      gsap.set(window, {
        scrollTo: { x: this.targetX, y: 0 }
      });
      this.isAnimating = false;
    }
    // ==============================================================
    // #endregion End Event Listeners
  };
  var ScrollSnap = _ScrollSnap;
  // Config
  __publicField(ScrollSnap, "SCROLL_DUR", 0.6);
  /** Speed at which scroll animation happens (in seconds) */
  __publicField(ScrollSnap, "SCROLL_EASE_BETWEEN_SECTIONS", "power2.out");
  /** Easing method of scroll animation from one section to another. From GSAP. */
  __publicField(ScrollSnap, "SCROLL_EASE_WITHIN_SECTION", 0.1);
  /** The easing strength when scrolling within a long section. */
  __publicField(ScrollSnap, "SCROLL_STRENGTH_MULTIPLIER", 0.6);
  /** Amount to strengthen or dampen the scrollwheel strength by when scrolling within a section. */
  __publicField(ScrollSnap, "MIN_SCROLL_STRENGTH", 10);
  /** The minimum strength/speed someone has to scroll in order to trigger the effect. */
  __publicField(ScrollSnap, "MOMENTUM_TIMEOUT", 250);

  // node_modules/.pnpm/three@0.173.0/node_modules/three/build/three.core.js
  var REVISION = "173";
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var PCFShadowMap = 1;
  var PCFSoftShadowMap = 2;
  var VSMShadowMap = 3;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var ConstantColorFactor = 211;
  var OneMinusConstantColorFactor = 212;
  var ConstantAlphaFactor = 213;
  var OneMinusConstantAlphaFactor = 214;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var CineonToneMapping = 3;
  var ACESFilmicToneMapping = 4;
  var CustomToneMapping = 5;
  var AgXToneMapping = 6;
  var NeutralToneMapping = 7;
  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var CubeUVReflectionMapping = 306;
  var RepeatWrapping = 1e3;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipmapNearestFilter = 1004;
  var NearestMipmapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipmapNearestFilter = 1007;
  var LinearMipmapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedInt248Type = 1020;
  var UnsignedInt5999Type = 35902;
  var AlphaFormat = 1021;
  var RGBFormat = 1022;
  var RGBAFormat = 1023;
  var LuminanceFormat = 1024;
  var LuminanceAlphaFormat = 1025;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RedIntegerFormat = 1029;
  var RGFormat = 1030;
  var RGIntegerFormat = 1031;
  var RGBAIntegerFormat = 1033;
  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGB_ETC2_Format = 37492;
  var RGBA_ETC2_EAC_Format = 37496;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var RGBA_BPTC_Format = 36492;
  var RGB_BPTC_SIGNED_Format = 36494;
  var RGB_BPTC_UNSIGNED_Format = 36495;
  var RED_RGTC1_Format = 36283;
  var SIGNED_RED_RGTC1_Format = 36284;
  var RED_GREEN_RGTC2_Format = 36285;
  var SIGNED_RED_GREEN_RGTC2_Format = 36286;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var BasicDepthPacking = 3200;
  var RGBADepthPacking = 3201;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;
  var NoColorSpace = "";
  var SRGBColorSpace = "srgb";
  var LinearSRGBColorSpace = "srgb-linear";
  var LinearTransfer = "linear";
  var SRGBTransfer = "srgb";
  var KeepStencilOp = 7680;
  var AlwaysStencilFunc = 519;
  var NeverCompare = 512;
  var LessCompare = 513;
  var EqualCompare = 514;
  var LessEqualCompare = 515;
  var GreaterCompare = 516;
  var NotEqualCompare = 517;
  var GreaterEqualCompare = 518;
  var AlwaysCompare = 519;
  var StaticDrawUsage = 35044;
  var GLSL3 = "300 es";
  var WebGLCoordinateSystem = 2e3;
  var WebGPUCoordinateSystem = 2001;
  var EventDispatcher = class {
    addEventListener(type, listener) {
      if (this._listeners === void 0)
        this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      const listeners = this._listeners;
      if (listeners === void 0)
        return false;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      const listeners = this._listeners;
      if (listeners === void 0)
        return;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event) {
      const listeners = this._listeners;
      if (listeners === void 0)
        return;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array = listenerArray.slice(0);
        for (let i = 0, l = array.length; i < l; i++) {
          array[i].call(this, event);
        }
        event.target = null;
      }
    }
  };
  var _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
  var DEG2RAD = Math.PI / 180;
  var RAD2DEG = 180 / Math.PI;
  function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toLowerCase();
  }
  function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
  }
  function euclideanModulo(n, m) {
    return (n % m + m) % m;
  }
  function lerp(x, y, t) {
    return (1 - t) * x + t * y;
  }
  function denormalize(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return value / 4294967295;
      case Uint16Array:
        return value / 65535;
      case Uint8Array:
        return value / 255;
      case Int32Array:
        return Math.max(value / 2147483647, -1);
      case Int16Array:
        return Math.max(value / 32767, -1);
      case Int8Array:
        return Math.max(value / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function normalize(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return Math.round(value * 4294967295);
      case Uint16Array:
        return Math.round(value * 65535);
      case Uint8Array:
        return Math.round(value * 255);
      case Int32Array:
        return Math.round(value * 2147483647);
      case Int16Array:
        return Math.round(value * 32767);
      case Int8Array:
        return Math.round(value * 127);
      default:
        throw new Error("Invalid component type.");
    }
  }
  var Vector2 = class {
    constructor(x = 0, y = 0) {
      Vector2.prototype.isVector2 = true;
      this.x = x;
      this.y = y;
    }
    get width() {
      return this.x;
    }
    set width(value) {
      this.x = value;
    }
    get height() {
      return this.y;
    }
    set height(value) {
      this.y = value;
    }
    set(x, y) {
      this.x = x;
      this.y = y;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6];
      this.y = e[1] * x + e[4] * y + e[7];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
    clamp(min, max) {
      this.x = clamp(this.x, min.x, max.x);
      this.y = clamp(this.y, min.y, max.y);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y;
    }
    cross(v) {
      return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0)
        return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
    rotateAround(center, angle) {
      const c = Math.cos(angle), s = Math.sin(angle);
      const x = this.x - center.x;
      const y = this.y - center.y;
      this.x = x * c - y * s + center.x;
      this.y = x * s + y * c + center.y;
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
    }
  };
  var Matrix3 = class {
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      Matrix3.prototype.isMatrix3 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      );
      return this;
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[4],
        me[8],
        me[1],
        me[5],
        me[9],
        me[2],
        me[6],
        me[10]
      );
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp;
      const m = this.elements;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(
        sx * c,
        sx * s,
        -sx * (c * cx + s * cy) + cx + tx,
        -sy * s,
        sy * c,
        -sy * (-s * cx + c * cy) + cy + ty,
        0,
        0,
        1
      );
      return this;
    }
    //
    scale(sx, sy) {
      this.premultiply(_m3.makeScale(sx, sy));
      return this;
    }
    rotate(theta) {
      this.premultiply(_m3.makeRotation(-theta));
      return this;
    }
    translate(tx, ty) {
      this.premultiply(_m3.makeTranslation(tx, ty));
      return this;
    }
    // for 2D Transforms
    makeTranslation(x, y) {
      if (x.isVector2) {
        this.set(
          1,
          0,
          x.x,
          0,
          1,
          x.y,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          x,
          0,
          1,
          y,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotation(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        s,
        c,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x, y) {
      this.set(
        x,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        1
      );
      return this;
    }
    //
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 9; i++) {
        if (te[i] !== me[i])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 9; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  };
  var _m3 = /* @__PURE__ */ new Matrix3();
  function arrayNeedsUint32(array) {
    for (let i = array.length - 1; i >= 0; --i) {
      if (array[i] >= 65535)
        return true;
    }
    return false;
  }
  function createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
  }
  function createCanvasElement() {
    const canvas = createElementNS("canvas");
    canvas.style.display = "block";
    return canvas;
  }
  var _cache = {};
  function warnOnce(message) {
    if (message in _cache)
      return;
    _cache[message] = true;
    console.warn(message);
  }
  function probeAsync(gl, sync, interval) {
    return new Promise(function(resolve, reject) {
      function probe() {
        switch (gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0)) {
          case gl.WAIT_FAILED:
            reject();
            break;
          case gl.TIMEOUT_EXPIRED:
            setTimeout(probe, interval);
            break;
          default:
            resolve();
        }
      }
      setTimeout(probe, interval);
    });
  }
  function toNormalizedProjectionMatrix(projectionMatrix) {
    const m = projectionMatrix.elements;
    m[2] = 0.5 * m[2] + 0.5 * m[3];
    m[6] = 0.5 * m[6] + 0.5 * m[7];
    m[10] = 0.5 * m[10] + 0.5 * m[11];
    m[14] = 0.5 * m[14] + 0.5 * m[15];
  }
  function toReversedProjectionMatrix(projectionMatrix) {
    const m = projectionMatrix.elements;
    const isPerspectiveMatrix = m[11] === -1;
    if (isPerspectiveMatrix) {
      m[10] = -m[10] - 1;
      m[14] = -m[14];
    } else {
      m[10] = -m[10];
      m[14] = -m[14] + 1;
    }
  }
  var LINEAR_REC709_TO_XYZ = /* @__PURE__ */ new Matrix3().set(
    0.4123908,
    0.3575843,
    0.1804808,
    0.212639,
    0.7151687,
    0.0721923,
    0.0193308,
    0.1191948,
    0.9505322
  );
  var XYZ_TO_LINEAR_REC709 = /* @__PURE__ */ new Matrix3().set(
    3.2409699,
    -1.5373832,
    -0.4986108,
    -0.9692436,
    1.8759675,
    0.0415551,
    0.0556301,
    -0.203977,
    1.0569715
  );
  function createColorManagement() {
    const ColorManagement2 = {
      enabled: true,
      workingColorSpace: LinearSRGBColorSpace,
      /**
       * Implementations of supported color spaces.
       *
       * Required:
       *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
       *	- whitePoint: reference white [ x y ]
       *	- transfer: transfer function (pre-defined)
       *	- toXYZ: Matrix3 RGB to XYZ transform
       *	- fromXYZ: Matrix3 XYZ to RGB transform
       *	- luminanceCoefficients: RGB luminance coefficients
       *
       * Optional:
       *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
       *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
       *
       * Reference:
       * - https://www.russellcottrell.com/photo/matrixCalculator.htm
       */
      spaces: {},
      convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
          return color;
        }
        if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {
          color.r = SRGBToLinear(color.r);
          color.g = SRGBToLinear(color.g);
          color.b = SRGBToLinear(color.b);
        }
        if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {
          color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);
          color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);
        }
        if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {
          color.r = LinearToSRGB(color.r);
          color.g = LinearToSRGB(color.g);
          color.b = LinearToSRGB(color.b);
        }
        return color;
      },
      fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this.workingColorSpace, targetColorSpace);
      },
      toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this.workingColorSpace);
      },
      getPrimaries: function(colorSpace) {
        return this.spaces[colorSpace].primaries;
      },
      getTransfer: function(colorSpace) {
        if (colorSpace === NoColorSpace)
          return LinearTransfer;
        return this.spaces[colorSpace].transfer;
      },
      getLuminanceCoefficients: function(target, colorSpace = this.workingColorSpace) {
        return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);
      },
      define: function(colorSpaces) {
        Object.assign(this.spaces, colorSpaces);
      },
      // Internal APIs
      _getMatrix: function(targetMatrix, sourceColorSpace, targetColorSpace) {
        return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);
      },
      _getDrawingBufferColorSpace: function(colorSpace) {
        return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;
      },
      _getUnpackColorSpace: function(colorSpace = this.workingColorSpace) {
        return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;
      }
    };
    const REC709_PRIMARIES = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];
    const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];
    const D65 = [0.3127, 0.329];
    ColorManagement2.define({
      [LinearSRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: LinearTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      },
      [SRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: SRGBTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      }
    });
    return ColorManagement2;
  }
  var ColorManagement = /* @__PURE__ */ createColorManagement();
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  var _canvas;
  var ImageUtils = class {
    static getDataURL(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement === "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0)
          _canvas = createElementNS("canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      return canvas.toDataURL("image/png");
    }
    static sRGBToLinear(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const canvas = createElementNS("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, image.width, image.height);
        const imageData = context.getImageData(0, 0, image.width, image.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i++) {
          data[i] = SRGBToLinear(data[i] / 255) * 255;
        }
        context.putImageData(imageData, 0, 0);
        return canvas;
      } else if (image.data) {
        const data = image.data.slice(0);
        for (let i = 0; i < data.length; i++) {
          if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
            data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
          } else {
            data[i] = SRGBToLinear(data[i]);
          }
        }
        return {
          data,
          width: image.width,
          height: image.height
        };
      } else {
        console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
        return image;
      }
    }
  };
  var _sourceId = 0;
  var Source = class {
    constructor(data = null) {
      this.isSource = true;
      Object.defineProperty(this, "id", { value: _sourceId++ });
      this.uuid = generateUUID();
      this.data = data;
      this.dataReady = true;
      this.version = 0;
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.images[this.uuid] !== void 0) {
        return meta.images[this.uuid];
      }
      const output = {
        uuid: this.uuid,
        url: ""
      };
      const data = this.data;
      if (data !== null) {
        let url;
        if (Array.isArray(data)) {
          url = [];
          for (let i = 0, l = data.length; i < l; i++) {
            if (data[i].isDataTexture) {
              url.push(serializeImage(data[i].image));
            } else {
              url.push(serializeImage(data[i]));
            }
          }
        } else {
          url = serializeImage(data);
        }
        output.url = url;
      }
      if (!isRootObject) {
        meta.images[this.uuid] = output;
      }
      return output;
    }
  };
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.from(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  var _textureId = 0;
  var Texture = class extends EventDispatcher {
    constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
      super();
      this.isTexture = true;
      Object.defineProperty(this, "id", { value: _textureId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.source = new Source(image);
      this.mipmaps = [];
      this.mapping = mapping;
      this.channel = 0;
      this.wrapS = wrapS;
      this.wrapT = wrapT;
      this.magFilter = magFilter;
      this.minFilter = minFilter;
      this.anisotropy = anisotropy;
      this.format = format;
      this.internalFormat = null;
      this.type = type;
      this.offset = new Vector2(0, 0);
      this.repeat = new Vector2(1, 1);
      this.center = new Vector2(0, 0);
      this.rotation = 0;
      this.matrixAutoUpdate = true;
      this.matrix = new Matrix3();
      this.generateMipmaps = true;
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.unpackAlignment = 4;
      this.colorSpace = colorSpace;
      this.userData = {};
      this.version = 0;
      this.onUpdate = null;
      this.renderTarget = null;
      this.isRenderTargetTexture = false;
      this.pmremVersion = 0;
    }
    get image() {
      return this.source.data;
    }
    set image(value = null) {
      this.source.data = value;
    }
    updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.source = source.source;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.channel = source.channel;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.colorSpace = source.colorSpace;
      this.renderTarget = source.renderTarget;
      this.isRenderTargetTexture = source.isRenderTargetTexture;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      this.needsUpdate = true;
      return this;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.textures[this.uuid] !== void 0) {
        return meta.textures[this.uuid];
      }
      const output = {
        metadata: {
          version: 4.6,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        image: this.source.toJSON(meta).uuid,
        mapping: this.mapping,
        channel: this.channel,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        internalFormat: this.internalFormat,
        type: this.type,
        colorSpace: this.colorSpace,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        generateMipmaps: this.generateMipmaps,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (Object.keys(this.userData).length > 0)
        output.userData = this.userData;
      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }
      return output;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    transformUv(uv) {
      if (this.mapping !== UVMapping)
        return uv;
      uv.applyMatrix3(this.matrix);
      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;
          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }
            break;
        }
      }
      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;
          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv.y = 1 - uv.y;
      }
      return uv;
    }
    set needsUpdate(value) {
      if (value === true) {
        this.version++;
        this.source.needsUpdate = true;
      }
    }
    set needsPMREMUpdate(value) {
      if (value === true) {
        this.pmremVersion++;
      }
    }
  };
  Texture.DEFAULT_IMAGE = null;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.DEFAULT_ANISOTROPY = 1;
  var Vector4 = class {
    constructor(x = 0, y = 0, z = 0, w = 1) {
      Vector4.prototype.isVector4 = true;
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    get width() {
      return this.z;
    }
    set width(value) {
      this.z = value;
    }
    get height() {
      return this.w;
    }
    set height(value) {
      this.w = value;
    }
    set(x, y, z, w) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setW(w) {
      this.w = w;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        case 3:
          this.w = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== void 0 ? v.w : 1;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      this.w *= v.w;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z, w = this.w;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      this.w /= v.w;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
      this.w = 2 * Math.acos(q.w);
      const s = Math.sqrt(1 - q.w * q.w);
      if (s < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }
      return this;
    }
    setAxisAngleFromRotationMatrix(m) {
      let angle, x, y, z;
      const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x = 0;
            y = 0.707106781;
            z = 0.707106781;
          } else {
            x = Math.sqrt(xx);
            y = xy / x;
            z = xz / x;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x = 0.707106781;
            y = 0;
            z = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x = xy / y;
            z = yz / y;
          }
        } else {
          if (zz < epsilon) {
            x = 0.707106781;
            y = 0.707106781;
            z = 0;
          } else {
            z = Math.sqrt(zz);
            x = xz / z;
            y = yz / z;
          }
        }
        this.set(x, y, z, angle);
        return this;
      }
      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s) < 1e-3)
        s = 1;
      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      this.w = e[15];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
    clamp(min, max) {
      this.x = clamp(this.x, min.x, max.x);
      this.y = clamp(this.y, min.y, max.y);
      this.z = clamp(this.z, min.z, max.z);
      this.w = clamp(this.w, min.w, max.w);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      this.w = clamp(this.w, minVal, maxVal);
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      this.w = Math.trunc(this.w);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
      yield this.w;
    }
  };
  var RenderTarget = class extends EventDispatcher {
    constructor(width = 1, height = 1, options = {}) {
      super();
      this.isRenderTarget = true;
      this.width = width;
      this.height = height;
      this.depth = 1;
      this.scissor = new Vector4(0, 0, width, height);
      this.scissorTest = false;
      this.viewport = new Vector4(0, 0, width, height);
      const image = { width, height, depth: 1 };
      options = Object.assign({
        generateMipmaps: false,
        internalFormat: null,
        minFilter: LinearFilter,
        depthBuffer: true,
        stencilBuffer: false,
        resolveDepthBuffer: true,
        resolveStencilBuffer: true,
        depthTexture: null,
        samples: 0,
        count: 1
      }, options);
      const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
      texture.flipY = false;
      texture.generateMipmaps = options.generateMipmaps;
      texture.internalFormat = options.internalFormat;
      this.textures = [];
      const count = options.count;
      for (let i = 0; i < count; i++) {
        this.textures[i] = texture.clone();
        this.textures[i].isRenderTargetTexture = true;
        this.textures[i].renderTarget = this;
      }
      this.depthBuffer = options.depthBuffer;
      this.stencilBuffer = options.stencilBuffer;
      this.resolveDepthBuffer = options.resolveDepthBuffer;
      this.resolveStencilBuffer = options.resolveStencilBuffer;
      this._depthTexture = null;
      this.depthTexture = options.depthTexture;
      this.samples = options.samples;
    }
    get texture() {
      return this.textures[0];
    }
    set texture(value) {
      this.textures[0] = value;
    }
    set depthTexture(current) {
      if (this._depthTexture !== null)
        this._depthTexture.renderTarget = null;
      if (current !== null)
        current.renderTarget = this;
      this._depthTexture = current;
    }
    get depthTexture() {
      return this._depthTexture;
    }
    setSize(width, height, depth = 1) {
      if (this.width !== width || this.height !== height || this.depth !== depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
        for (let i = 0, il = this.textures.length; i < il; i++) {
          this.textures[i].image.width = width;
          this.textures[i].image.height = height;
          this.textures[i].image.depth = depth;
        }
        this.dispose();
      }
      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.scissor.copy(source.scissor);
      this.scissorTest = source.scissorTest;
      this.viewport.copy(source.viewport);
      this.textures.length = 0;
      for (let i = 0, il = source.textures.length; i < il; i++) {
        this.textures[i] = source.textures[i].clone();
        this.textures[i].isRenderTargetTexture = true;
        this.textures[i].renderTarget = this;
      }
      const image = Object.assign({}, source.texture.image);
      this.texture.source = new Source(image);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.resolveDepthBuffer = source.resolveDepthBuffer;
      this.resolveStencilBuffer = source.resolveStencilBuffer;
      if (source.depthTexture !== null)
        this.depthTexture = source.depthTexture.clone();
      this.samples = source.samples;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  var WebGLRenderTarget = class extends RenderTarget {
    constructor(width = 1, height = 1, options = {}) {
      super(width, height, options);
      this.isWebGLRenderTarget = true;
    }
  };
  var DataArrayTexture = class extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1) {
      super(null);
      this.isDataArrayTexture = true;
      this.image = { data, width, height, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
      this.layerUpdates = /* @__PURE__ */ new Set();
    }
    addLayerUpdate(layerIndex) {
      this.layerUpdates.add(layerIndex);
    }
    clearLayerUpdates() {
      this.layerUpdates.clear();
    }
  };
  var Data3DTexture = class extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1) {
      super(null);
      this.isData3DTexture = true;
      this.image = { data, width, height, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  };
  var Quaternion = class {
    constructor(x = 0, y = 0, z = 0, w = 1) {
      this.isQuaternion = true;
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (t === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
        return;
      }
      if (t === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w1;
        return;
      }
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir;
        if (s === 1 - t) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    set(x, y, z, w) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler, update = true) {
      const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x / 2);
      const c2 = cos(y / 2);
      const c3 = cos(z / 2);
      const s1 = sin(x / 2);
      const s2 = sin(y / 2);
      const s3 = sin(z / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update === true)
        this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      let r = vFrom.dot(vTo) + 1;
      if (r < Number.EPSILON) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    angleTo(q) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
      const angle = this.angleTo(q);
      if (angle === 0)
        return this;
      const t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q) {
      return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0)
        return this;
      if (t === 1)
        return this.copy(qb);
      const x = this._x, y = this._y, z = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x;
        this._y = y;
        this._z = z;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z + t * this._z;
        this.normalize();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    slerpQuaternions(qa, qb, t) {
      return this.copy(qa).slerp(qb, t);
    }
    random() {
      const theta1 = 2 * Math.PI * Math.random();
      const theta2 = 2 * Math.PI * Math.random();
      const x0 = Math.random();
      const r1 = Math.sqrt(1 - x0);
      const r2 = Math.sqrt(x0);
      return this.set(
        r1 * Math.sin(theta1),
        r1 * Math.cos(theta1),
        r2 * Math.sin(theta2),
        r2 * Math.cos(theta2)
      );
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      this._onChangeCallback();
      return this;
    }
    toJSON() {
      return this.toArray();
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._w;
    }
  };
  var Vector3 = class {
    constructor(x = 0, y = 0, z = 0) {
      Vector3.prototype.isVector3 = true;
      this.x = x;
      this.y = y;
      this.z = z;
    }
    set(x, y, z) {
      if (z === void 0)
        z = this.z;
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    applyEuler(euler) {
      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6] * z;
      this.y = e[1] * x + e[4] * y + e[7] * z;
      this.z = e[2] * x + e[5] * y + e[8] * z;
      return this;
    }
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
    applyQuaternion(q) {
      const vx = this.x, vy = this.y, vz = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const tx = 2 * (qy * vz - qz * vy);
      const ty = 2 * (qz * vx - qx * vz);
      const tz = 2 * (qx * vy - qy * vx);
      this.x = vx + qw * tx + qy * tz - qz * ty;
      this.y = vy + qw * ty + qz * tx - qx * tz;
      this.z = vz + qw * tz + qx * ty - qy * tx;
      return this;
    }
    project(camera) {
      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z;
      this.y = e[1] * x + e[5] * y + e[9] * z;
      this.z = e[2] * x + e[6] * y + e[10] * z;
      return this.normalize();
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    clamp(min, max) {
      this.x = clamp(this.x, min.x, max.x);
      this.y = clamp(this.y, min.y, max.y);
      this.z = clamp(this.z, min.z, max.z);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v) {
      return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0)
        return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector$c.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector$c);
    }
    reflect(normal) {
      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0)
        return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    setFromEuler(e) {
      this.x = e._x;
      this.y = e._y;
      this.z = e._z;
      return this;
    }
    setFromColor(c) {
      this.x = c.r;
      this.y = c.g;
      this.z = c.b;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
    randomDirection() {
      const theta = Math.random() * Math.PI * 2;
      const u = Math.random() * 2 - 1;
      const c = Math.sqrt(1 - u * u);
      this.x = c * Math.cos(theta);
      this.y = u;
      this.z = c * Math.sin(theta);
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
    }
  };
  var _vector$c = /* @__PURE__ */ new Vector3();
  var _quaternion$4 = /* @__PURE__ */ new Quaternion();
  var Box3 = class {
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
      this.isBox3 = true;
      this.min = min;
      this.max = max;
    }
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    setFromArray(array) {
      this.makeEmpty();
      for (let i = 0, il = array.length; i < il; i += 3) {
        this.expandByPoint(_vector$b.fromArray(array, i));
      }
      return this;
    }
    setFromBufferAttribute(attribute) {
      this.makeEmpty();
      for (let i = 0, il = attribute.count; i < il; i++) {
        this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i));
      }
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i = 0, il = points.length; i < il; i++) {
        this.expandByPoint(points[i]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object, precise = false) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        const positionAttribute = geometry.getAttribute("position");
        if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
          for (let i = 0, l = positionAttribute.count; i < l; i++) {
            if (object.isMesh === true) {
              object.getVertexPosition(i, _vector$b);
            } else {
              _vector$b.fromBufferAttribute(positionAttribute, i);
            }
            _vector$b.applyMatrix4(object.matrixWorld);
            this.expandByPoint(_vector$b);
          }
        } else {
          if (object.boundingBox !== void 0) {
            if (object.boundingBox === null) {
              object.computeBoundingBox();
            }
            _box$4.copy(object.boundingBox);
          } else {
            if (geometry.boundingBox === null) {
              geometry.computeBoundingBox();
            }
            _box$4.copy(geometry.boundingBox);
          }
          _box$4.applyMatrix4(object.matrixWorld);
          this.union(_box$4);
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        this.expandByObject(children[i], precise);
      }
      return this;
    }
    containsPoint(point) {
      return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      return target.set(
        (point.x - this.min.x) / (this.max.x - this.min.x),
        (point.y - this.min.y) / (this.max.y - this.min.y),
        (point.z - this.min.z) / (this.max.z - this.min.z)
      );
    }
    intersectsBox(box) {
      return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$b);
      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0$2.subVectors(triangle.a, _center);
      _v1$7.subVectors(triangle.b, _center);
      _v2$4.subVectors(triangle.c, _center);
      _f0.subVectors(_v1$7, _v0$2);
      _f1.subVectors(_v2$4, _v1$7);
      _f2.subVectors(_v0$2, _v2$4);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
    }
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      return this.clampPoint(point, _vector$b).distanceTo(point);
    }
    getBoundingSphere(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
      } else {
        this.getCenter(target.center);
        target.radius = this.getSize(_vector$b).length() * 0.5;
      }
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty())
        this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty())
        return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  };
  var _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  var _vector$b = /* @__PURE__ */ new Vector3();
  var _box$4 = /* @__PURE__ */ new Box3();
  var _v0$2 = /* @__PURE__ */ new Vector3();
  var _v1$7 = /* @__PURE__ */ new Vector3();
  var _v2$4 = /* @__PURE__ */ new Vector3();
  var _f0 = /* @__PURE__ */ new Vector3();
  var _f1 = /* @__PURE__ */ new Vector3();
  var _f2 = /* @__PURE__ */ new Vector3();
  var _center = /* @__PURE__ */ new Vector3();
  var _extents = /* @__PURE__ */ new Vector3();
  var _triangleNormal = /* @__PURE__ */ new Vector3();
  var _testAxis = /* @__PURE__ */ new Vector3();
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
      _testAxis.fromArray(axes, i);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  var _box$3 = /* @__PURE__ */ new Box3();
  var _v1$6 = /* @__PURE__ */ new Vector3();
  var _v2$3 = /* @__PURE__ */ new Vector3();
  var Sphere = class {
    constructor(center = new Vector3(), radius = -1) {
      this.isSphere = true;
      this.center = center;
      this.radius = radius;
    }
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    setFromPoints(points, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$3.setFromPoints(points).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i = 0, il = points.length; i < il; i++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
      const radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
      return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    getBoundingBox(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    expandByPoint(point) {
      if (this.isEmpty()) {
        this.center.copy(point);
        this.radius = 0;
        return this;
      }
      _v1$6.subVectors(point, this.center);
      const lengthSq = _v1$6.lengthSq();
      if (lengthSq > this.radius * this.radius) {
        const length = Math.sqrt(lengthSq);
        const delta = (length - this.radius) * 0.5;
        this.center.addScaledVector(_v1$6, delta / length);
        this.radius += delta;
      }
      return this;
    }
    union(sphere) {
      if (sphere.isEmpty()) {
        return this;
      }
      if (this.isEmpty()) {
        this.copy(sphere);
        return this;
      }
      if (this.center.equals(sphere.center) === true) {
        this.radius = Math.max(this.radius, sphere.radius);
      } else {
        _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
        this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
        this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
      }
      return this;
    }
    equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _vector$a = /* @__PURE__ */ new Vector3();
  var _segCenter = /* @__PURE__ */ new Vector3();
  var _segDir = /* @__PURE__ */ new Vector3();
  var _diff = /* @__PURE__ */ new Vector3();
  var _edge1 = /* @__PURE__ */ new Vector3();
  var _edge2 = /* @__PURE__ */ new Vector3();
  var _normal$1 = /* @__PURE__ */ new Vector3();
  var Ray = class {
    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
      this.origin = origin;
      this.direction = direction;
    }
    set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    at(t, target) {
      return target.copy(this.origin).addScaledVector(this.direction, t);
    }
    lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
    recast(t) {
      this.origin.copy(this.at(t, _vector$a));
      return this;
    }
    closestPointToPoint(point, target) {
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
    }
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
      const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
      return _vector$a.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
      }
      return sqrDist;
    }
    intersectSphere(sphere, target) {
      _vector$a.subVectors(sphere.center, this.origin);
      const tca = _vector$a.dot(this.direction);
      const d2 = _vector$a.dot(_vector$a) - tca * tca;
      const radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2)
        return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t1 < 0)
        return null;
      if (t0 < 0)
        return this.at(t1, target);
      return this.at(t0, target);
    }
    intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
      const t = this.distanceToPlane(plane);
      if (t === null) {
        return null;
      }
      return this.at(t, target);
    }
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    intersectBox(box, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin = this.origin;
      if (invdirx >= 0) {
        tmin = (box.min.x - origin.x) * invdirx;
        tmax = (box.max.x - origin.x) * invdirx;
      } else {
        tmin = (box.max.x - origin.x) * invdirx;
        tmax = (box.min.x - origin.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box.min.y - origin.y) * invdiry;
        tymax = (box.max.y - origin.y) * invdiry;
      } else {
        tymin = (box.max.y - origin.y) * invdiry;
        tymax = (box.min.y - origin.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax)
        return null;
      if (tymin > tmin || isNaN(tmin))
        tmin = tymin;
      if (tymax < tmax || isNaN(tmax))
        tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box.min.z - origin.z) * invdirz;
        tzmax = (box.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin.z) * invdirz;
        tzmax = (box.min.z - origin.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax)
        return null;
      if (tzmin > tmin || tmin !== tmin)
        tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax)
        tmax = tzmax;
      if (tmax < 0)
        return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
      return this.intersectBox(box, _vector$a) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
      _edge1.subVectors(b, a);
      _edge2.subVectors(c, a);
      _normal$1.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal$1);
      let sign;
      if (DdN > 0) {
        if (backfaceCulling)
          return null;
        sign = 1;
      } else if (DdN < 0) {
        sign = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a);
      const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign * _diff.dot(_normal$1);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var Matrix4 = class {
    constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      Matrix4.prototype.isMatrix4 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
      }
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    clone() {
      return new Matrix4().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
    copyPosition(m) {
      const te = this.elements, me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
    setFromMatrix3(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[3],
        me[6],
        0,
        me[1],
        me[4],
        me[7],
        0,
        me[2],
        me[5],
        me[8],
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(
        xAxis.x,
        yAxis.x,
        zAxis.x,
        0,
        xAxis.y,
        yAxis.y,
        zAxis.y,
        0,
        xAxis.z,
        yAxis.z,
        zAxis.z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractRotation(m) {
      const te = this.elements;
      const me = m.elements;
      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromEuler(euler) {
      const te = this.elements;
      const x = euler.x, y = euler.y, z = euler.z;
      const a = Math.cos(x), b = Math.sin(x);
      const c = Math.cos(y), d = Math.sin(y);
      const e = Math.cos(z), f = Math.sin(z);
      if (euler.order === "XYZ") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === "YXZ") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === "ZXY") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === "ZYX") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = be * d - af;
        te[8] = ae * d + bf;
        te[1] = c * f;
        te[5] = bf * d + ae;
        te[9] = af * d - be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === "YZX") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === "XZY") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = ac * f + bd;
        te[5] = a * e;
        te[9] = ad * f - bc;
        te[2] = bc * f - ad;
        te[6] = b * e;
        te[10] = bd * f + ac;
      }
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
    lookAt(eye, target, up) {
      const te = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
      const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
      const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
      const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
      const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
      const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
      const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
      const te = this.elements;
      let tmp;
      tmp = te[1];
      te[1] = te[4];
      te[4] = tmp;
      tmp = te[2];
      te[2] = te[8];
      te[8] = tmp;
      tmp = te[6];
      te[6] = te[9];
      te[9] = tmp;
      tmp = te[3];
      te[3] = te[12];
      te[12] = tmp;
      tmp = te[7];
      te[7] = te[13];
      te[13] = tmp;
      tmp = te[11];
      te[11] = te[14];
      te[14] = tmp;
      return this;
    }
    setPosition(x, y, z) {
      const te = this.elements;
      if (x.isVector3) {
        te[12] = x.x;
        te[13] = x.y;
        te[14] = x.z;
      } else {
        te[12] = x;
        te[13] = y;
        te[14] = z;
      }
      return this;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    scale(v) {
      const te = this.elements;
      const x = v.x, y = v.y, z = v.z;
      te[0] *= x;
      te[4] *= y;
      te[8] *= z;
      te[1] *= x;
      te[5] *= y;
      te[9] *= z;
      te[2] *= x;
      te[6] *= y;
      te[10] *= z;
      te[3] *= x;
      te[7] *= y;
      te[11] *= z;
      return this;
    }
    getMaxScaleOnAxis() {
      const te = this.elements;
      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x, y, z) {
      if (x.isVector3) {
        this.set(
          1,
          0,
          0,
          x.x,
          0,
          1,
          0,
          x.y,
          0,
          0,
          1,
          x.z,
          0,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          0,
          x,
          0,
          1,
          0,
          y,
          0,
          0,
          1,
          z,
          0,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotationX(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        1,
        0,
        0,
        0,
        0,
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationY(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        0,
        s,
        0,
        0,
        1,
        0,
        0,
        -s,
        0,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationZ(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationAxis(axis, angle) {
      const c = Math.cos(angle);
      const s = Math.sin(angle);
      const t = 1 - c;
      const x = axis.x, y = axis.y, z = axis.z;
      const tx = t * x, ty = t * y;
      this.set(
        tx * x + c,
        tx * y - s * z,
        tx * z + s * y,
        0,
        tx * y + s * z,
        ty * y + c,
        ty * z - s * x,
        0,
        tx * z - s * y,
        ty * z + s * x,
        t * z * z + c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x, y, z) {
      this.set(
        x,
        0,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        0,
        z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
      this.set(
        1,
        yx,
        zx,
        0,
        xy,
        1,
        zy,
        0,
        xz,
        yz,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    compose(position, quaternion, scale) {
      const te = this.elements;
      const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
      const x2 = x + x, y2 = y + y, z2 = z + z;
      const xx = x * x2, xy = x * y2, xz = x * z2;
      const yy = y * y2, yz = y * z2, zz = z * z2;
      const wx = w * x2, wy = w * y2, wz = w * z2;
      const sx = scale.x, sy = scale.y, sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
    decompose(position, quaternion, scale) {
      const te = this.elements;
      let sx = _v1$5.set(te[0], te[1], te[2]).length();
      const sy = _v1$5.set(te[4], te[5], te[6]).length();
      const sz = _v1$5.set(te[8], te[9], te[10]).length();
      const det = this.determinant();
      if (det < 0)
        sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14];
      _m1$2.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1$2.elements[0] *= invSX;
      _m1$2.elements[1] *= invSX;
      _m1$2.elements[2] *= invSX;
      _m1$2.elements[4] *= invSY;
      _m1$2.elements[5] *= invSY;
      _m1$2.elements[6] *= invSY;
      _m1$2.elements[8] *= invSZ;
      _m1$2.elements[9] *= invSZ;
      _m1$2.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1$2);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
    makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const x = 2 * near / (right - left);
      const y = 2 * near / (top - bottom);
      const a = (right + left) / (right - left);
      const b = (top + bottom) / (top - bottom);
      let c, d;
      if (coordinateSystem === WebGLCoordinateSystem) {
        c = -(far + near) / (far - near);
        d = -2 * far * near / (far - near);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        c = -far / (far - near);
        d = -far * near / (far - near);
      } else {
        throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = x;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
    makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const w = 1 / (right - left);
      const h = 1 / (top - bottom);
      const p = 1 / (far - near);
      const x = (right + left) * w;
      const y = (top + bottom) * h;
      let z, zInv;
      if (coordinateSystem === WebGLCoordinateSystem) {
        z = (far + near) * p;
        zInv = -2 * p;
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        z = near * p;
        zInv = -1 * p;
      } else {
        throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = zInv;
      te[14] = -z;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 16; i++) {
        if (te[i] !== me[i])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 16; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  };
  var _v1$5 = /* @__PURE__ */ new Vector3();
  var _m1$2 = /* @__PURE__ */ new Matrix4();
  var _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  var _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  var _x = /* @__PURE__ */ new Vector3();
  var _y = /* @__PURE__ */ new Vector3();
  var _z = /* @__PURE__ */ new Vector3();
  var _matrix$2 = /* @__PURE__ */ new Matrix4();
  var _quaternion$3 = /* @__PURE__ */ new Quaternion();
  var Euler = class {
    constructor(x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER) {
      this.isEuler = true;
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(value) {
      this._order = value;
      this._onChangeCallback();
    }
    set(x, y, z, order = this._order) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m, order = this._order, update = true) {
      const te = m.elements;
      const m11 = te[0], m12 = te[4], m13 = te[8];
      const m21 = te[1], m22 = te[5], m23 = te[9];
      const m31 = te[2], m32 = te[6], m33 = te[10];
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update === true)
        this._onChangeCallback();
      return this;
    }
    setFromQuaternion(q, order, update) {
      _matrix$2.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(_matrix$2, order, update);
    }
    setFromVector3(v, order = this._order) {
      return this.set(v.x, v.y, v.z, order);
    }
    reorder(newOrder) {
      _quaternion$3.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== void 0)
        this._order = array[3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._order;
    }
  };
  Euler.DEFAULT_ORDER = "XYZ";
  var Layers = class {
    constructor() {
      this.mask = 1 | 0;
    }
    set(channel) {
      this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
      this.mask |= 1 << channel | 0;
    }
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
      return (this.mask & (1 << channel | 0)) !== 0;
    }
  };
  var _object3DId = 0;
  var _v1$4 = /* @__PURE__ */ new Vector3();
  var _q1 = /* @__PURE__ */ new Quaternion();
  var _m1$1 = /* @__PURE__ */ new Matrix4();
  var _target = /* @__PURE__ */ new Vector3();
  var _position$3 = /* @__PURE__ */ new Vector3();
  var _scale$2 = /* @__PURE__ */ new Vector3();
  var _quaternion$2 = /* @__PURE__ */ new Quaternion();
  var _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
  var _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
  var _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
  var _addedEvent = { type: "added" };
  var _removedEvent = { type: "removed" };
  var _childaddedEvent = { type: "childadded", child: null };
  var _childremovedEvent = { type: "childremoved", child: null };
  var Object3D = class extends EventDispatcher {
    constructor() {
      super();
      this.isObject3D = true;
      Object.defineProperty(this, "id", { value: _object3DId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Object3D";
      this.parent = null;
      this.children = [];
      this.up = Object3D.DEFAULT_UP.clone();
      const position = new Vector3();
      const rotation = new Euler();
      const quaternion = new Quaternion();
      const scale = new Vector3(1, 1, 1);
      function onRotationChange() {
        quaternion.setFromEuler(rotation, false);
      }
      function onQuaternionChange() {
        rotation.setFromQuaternion(quaternion, void 0, false);
      }
      rotation._onChange(onRotationChange);
      quaternion._onChange(onQuaternionChange);
      Object.defineProperties(this, {
        position: {
          configurable: true,
          enumerable: true,
          value: position
        },
        rotation: {
          configurable: true,
          enumerable: true,
          value: rotation
        },
        quaternion: {
          configurable: true,
          enumerable: true,
          value: quaternion
        },
        scale: {
          configurable: true,
          enumerable: true,
          value: scale
        },
        modelViewMatrix: {
          value: new Matrix4()
        },
        normalMatrix: {
          value: new Matrix3()
        }
      });
      this.matrix = new Matrix4();
      this.matrixWorld = new Matrix4();
      this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
      this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
      this.matrixWorldNeedsUpdate = false;
      this.layers = new Layers();
      this.visible = true;
      this.castShadow = false;
      this.receiveShadow = false;
      this.frustumCulled = true;
      this.renderOrder = 0;
      this.animations = [];
      this.userData = {};
    }
    onBeforeShadow() {
    }
    onAfterShadow() {
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(matrix) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q) {
      this.quaternion.premultiply(q);
      return this;
    }
    setRotationFromAxisAngle(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler) {
      this.quaternion.setFromEuler(euler, true);
    }
    setRotationFromMatrix(m) {
      this.quaternion.setFromRotationMatrix(m);
    }
    setRotationFromQuaternion(q) {
      this.quaternion.copy(q);
    }
    rotateOnAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    }
    rotateOnWorldAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    }
    rotateX(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    }
    rotateY(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    }
    rotateZ(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
      _v1$4.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$4.multiplyScalar(distance));
      return this;
    }
    translateX(distance) {
      return this.translateOnAxis(_xAxis, distance);
    }
    translateY(distance) {
      return this.translateOnAxis(_yAxis, distance);
    }
    translateZ(distance) {
      return this.translateOnAxis(_zAxis, distance);
    }
    localToWorld(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x, y, z) {
      if (x.isVector3) {
        _target.copy(x);
      } else {
        _target.set(x, y, z);
      }
      const parent = this.parent;
      this.updateWorldMatrix(true, false);
      _position$3.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position$3, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position$3, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    }
    add(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.add(arguments[i]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        object.removeFromParent();
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
        _childaddedEvent.child = object;
        this.dispatchEvent(_childaddedEvent);
        _childaddedEvent.child = null;
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    }
    remove(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.remove(arguments[i]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
        _childremovedEvent.child = object;
        this.dispatchEvent(_childremovedEvent);
        _childremovedEvent.child = null;
      }
      return this;
    }
    removeFromParent() {
      const parent = this.parent;
      if (parent !== null) {
        parent.remove(this);
      }
      return this;
    }
    clear() {
      return this.remove(...this.children);
    }
    attach(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      object.removeFromParent();
      object.parent = this;
      this.children.push(object);
      object.updateWorldMatrix(false, true);
      object.dispatchEvent(_addedEvent);
      _childaddedEvent.child = object;
      this.dispatchEvent(_childaddedEvent);
      _childaddedEvent.child = null;
      return this;
    }
    getObjectById(id) {
      return this.getObjectByProperty("id", id);
    }
    getObjectByName(name) {
      return this.getObjectByProperty("name", name);
    }
    getObjectByProperty(name, value) {
      if (this[name] === value)
        return this;
      for (let i = 0, l = this.children.length; i < l; i++) {
        const child = this.children[i];
        const object = child.getObjectByProperty(name, value);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    }
    getObjectsByProperty(name, value, result = []) {
      if (this[name] === value)
        result.push(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].getObjectsByProperty(name, value, result);
      }
      return result;
    }
    getWorldPosition(target) {
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, target, _scale$2);
      return target;
    }
    getWorldScale(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, _quaternion$2, target);
      return target;
    }
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {
    }
    traverse(callback) {
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverse(callback);
      }
    }
    traverseVisible(callback) {
      if (this.visible === false)
        return;
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverseVisible(callback);
      }
    }
    traverseAncestors(callback) {
      const parent = this.parent;
      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    }
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.matrixWorldAutoUpdate === true) {
          if (this.parent === null) {
            this.matrixWorld.copy(this.matrix);
          } else {
            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
          }
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        const child = children[i];
        child.updateMatrixWorld(force);
      }
    }
    updateWorldMatrix(updateParents, updateChildren) {
      const parent = this.parent;
      if (updateParents === true && parent !== null) {
        parent.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      if (updateChildren === true) {
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          const child = children[i];
          child.updateWorldMatrix(false, true);
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      const output = {};
      if (isRootObject) {
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {},
          nodes: {}
        };
        output.metadata = {
          version: 4.6,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "")
        object.name = this.name;
      if (this.castShadow === true)
        object.castShadow = true;
      if (this.receiveShadow === true)
        object.receiveShadow = true;
      if (this.visible === false)
        object.visible = false;
      if (this.frustumCulled === false)
        object.frustumCulled = false;
      if (this.renderOrder !== 0)
        object.renderOrder = this.renderOrder;
      if (Object.keys(this.userData).length > 0)
        object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      object.up = this.up.toArray();
      if (this.matrixAutoUpdate === false)
        object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
        if (this.instanceColor !== null)
          object.instanceColor = this.instanceColor.toJSON();
      }
      if (this.isBatchedMesh) {
        object.type = "BatchedMesh";
        object.perObjectFrustumCulled = this.perObjectFrustumCulled;
        object.sortObjects = this.sortObjects;
        object.drawRanges = this._drawRanges;
        object.reservedRanges = this._reservedRanges;
        object.visibility = this._visibility;
        object.active = this._active;
        object.bounds = this._bounds.map((bound) => ({
          boxInitialized: bound.boxInitialized,
          boxMin: bound.box.min.toArray(),
          boxMax: bound.box.max.toArray(),
          sphereInitialized: bound.sphereInitialized,
          sphereRadius: bound.sphere.radius,
          sphereCenter: bound.sphere.center.toArray()
        }));
        object.maxInstanceCount = this._maxInstanceCount;
        object.maxVertexCount = this._maxVertexCount;
        object.maxIndexCount = this._maxIndexCount;
        object.geometryInitialized = this._geometryInitialized;
        object.geometryCount = this._geometryCount;
        object.matricesTexture = this._matricesTexture.toJSON(meta);
        if (this._colorsTexture !== null)
          object.colorsTexture = this._colorsTexture.toJSON(meta);
        if (this.boundingSphere !== null) {
          object.boundingSphere = {
            center: object.boundingSphere.center.toArray(),
            radius: object.boundingSphere.radius
          };
        }
        if (this.boundingBox !== null) {
          object.boundingBox = {
            min: object.boundingBox.min.toArray(),
            max: object.boundingBox.max.toArray()
          };
        }
      }
      function serialize(library, element) {
        if (library[element.uuid] === void 0) {
          library[element.uuid] = element.toJSON(meta);
        }
        return element.uuid;
      }
      if (this.isScene) {
        if (this.background) {
          if (this.background.isColor) {
            object.background = this.background.toJSON();
          } else if (this.background.isTexture) {
            object.background = this.background.toJSON(meta).uuid;
          }
        }
        if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
          object.environment = this.environment.toJSON(meta).uuid;
        }
      } else if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i = 0, l = shapes.length; i < l; i++) {
              const shape = shapes[i];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i = 0, l = this.material.length; i < l; i++) {
            uuids.push(serialize(meta.materials, this.material[i]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i = 0; i < this.children.length; i++) {
          object.children.push(this.children[i].toJSON(meta).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i = 0; i < this.animations.length; i++) {
          const animation = this.animations[i];
          object.animations.push(serialize(meta.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta.geometries);
        const materials = extractFromCache(meta.materials);
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        const shapes = extractFromCache(meta.shapes);
        const skeletons = extractFromCache(meta.skeletons);
        const animations = extractFromCache(meta.animations);
        const nodes = extractFromCache(meta.nodes);
        if (geometries.length > 0)
          output.geometries = geometries;
        if (materials.length > 0)
          output.materials = materials;
        if (textures.length > 0)
          output.textures = textures;
        if (images.length > 0)
          output.images = images;
        if (shapes.length > 0)
          output.shapes = shapes;
        if (skeletons.length > 0)
          output.skeletons = skeletons;
        if (animations.length > 0)
          output.animations = animations;
        if (nodes.length > 0)
          output.nodes = nodes;
      }
      output.object = object;
      return output;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data = cache[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    }
    clone(recursive) {
      return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.animations = source.animations.slice();
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i = 0; i < source.children.length; i++) {
          const child = source.children[i];
          this.add(child.clone());
        }
      }
      return this;
    }
  };
  Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
  var _v0$1 = /* @__PURE__ */ new Vector3();
  var _v1$3 = /* @__PURE__ */ new Vector3();
  var _v2$2 = /* @__PURE__ */ new Vector3();
  var _v3$2 = /* @__PURE__ */ new Vector3();
  var _vab = /* @__PURE__ */ new Vector3();
  var _vac = /* @__PURE__ */ new Vector3();
  var _vbc = /* @__PURE__ */ new Vector3();
  var _vap = /* @__PURE__ */ new Vector3();
  var _vbp = /* @__PURE__ */ new Vector3();
  var _vcp = /* @__PURE__ */ new Vector3();
  var _v40 = /* @__PURE__ */ new Vector4();
  var _v41 = /* @__PURE__ */ new Vector4();
  var _v42 = /* @__PURE__ */ new Vector4();
  var Triangle = class {
    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
      this.a = a;
      this.b = b;
      this.c = c;
    }
    static getNormal(a, b, c, target) {
      target.subVectors(c, b);
      _v0$1.subVectors(a, b);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);
      _v1$3.subVectors(b, a);
      _v2$2.subVectors(point, a);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$2);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$2);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (denom === 0) {
        target.set(0, 0, 0);
        return null;
      }
      const invDenom = 1 / denom;
      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
      if (this.getBarycoord(point, a, b, c, _v3$2) === null) {
        return false;
      }
      return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
    }
    static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
      if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {
        target.x = 0;
        target.y = 0;
        if ("z" in target)
          target.z = 0;
        if ("w" in target)
          target.w = 0;
        return null;
      }
      target.setScalar(0);
      target.addScaledVector(v1, _v3$2.x);
      target.addScaledVector(v2, _v3$2.y);
      target.addScaledVector(v3, _v3$2.z);
      return target;
    }
    static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {
      _v40.setScalar(0);
      _v41.setScalar(0);
      _v42.setScalar(0);
      _v40.fromBufferAttribute(attr, i1);
      _v41.fromBufferAttribute(attr, i2);
      _v42.fromBufferAttribute(attr, i3);
      target.setScalar(0);
      target.addScaledVector(_v40, barycoord.x);
      target.addScaledVector(_v41, barycoord.y);
      target.addScaledVector(_v42, barycoord.z);
      return target;
    }
    static isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);
      _v1$3.subVectors(a, b);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
      this.a.fromBufferAttribute(attribute, i0);
      this.b.fromBufferAttribute(attribute, i1);
      this.c.fromBufferAttribute(attribute, i2);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
      return Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getInterpolation(point, v1, v2, v3, target) {
      return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
    }
    containsPoint(point) {
      return Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
      const a = this.a, b = this.b, c = this.c;
      let v, w;
      _vab.subVectors(b, a);
      _vac.subVectors(c, a);
      _vap.subVectors(p, a);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a);
      }
      _vbp.subVectors(p, b);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3);
        return target.copy(a).addScaledVector(_vab, v);
      }
      _vcp.subVectors(p, c);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6);
        return target.copy(a).addScaledVector(_vac, w);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b).addScaledVector(_vbc, w);
      }
      const denom = 1 / (va + vb + vc);
      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  };
  var _colorKeywords = {
    "aliceblue": 15792383,
    "antiquewhite": 16444375,
    "aqua": 65535,
    "aquamarine": 8388564,
    "azure": 15794175,
    "beige": 16119260,
    "bisque": 16770244,
    "black": 0,
    "blanchedalmond": 16772045,
    "blue": 255,
    "blueviolet": 9055202,
    "brown": 10824234,
    "burlywood": 14596231,
    "cadetblue": 6266528,
    "chartreuse": 8388352,
    "chocolate": 13789470,
    "coral": 16744272,
    "cornflowerblue": 6591981,
    "cornsilk": 16775388,
    "crimson": 14423100,
    "cyan": 65535,
    "darkblue": 139,
    "darkcyan": 35723,
    "darkgoldenrod": 12092939,
    "darkgray": 11119017,
    "darkgreen": 25600,
    "darkgrey": 11119017,
    "darkkhaki": 12433259,
    "darkmagenta": 9109643,
    "darkolivegreen": 5597999,
    "darkorange": 16747520,
    "darkorchid": 10040012,
    "darkred": 9109504,
    "darksalmon": 15308410,
    "darkseagreen": 9419919,
    "darkslateblue": 4734347,
    "darkslategray": 3100495,
    "darkslategrey": 3100495,
    "darkturquoise": 52945,
    "darkviolet": 9699539,
    "deeppink": 16716947,
    "deepskyblue": 49151,
    "dimgray": 6908265,
    "dimgrey": 6908265,
    "dodgerblue": 2003199,
    "firebrick": 11674146,
    "floralwhite": 16775920,
    "forestgreen": 2263842,
    "fuchsia": 16711935,
    "gainsboro": 14474460,
    "ghostwhite": 16316671,
    "gold": 16766720,
    "goldenrod": 14329120,
    "gray": 8421504,
    "green": 32768,
    "greenyellow": 11403055,
    "grey": 8421504,
    "honeydew": 15794160,
    "hotpink": 16738740,
    "indianred": 13458524,
    "indigo": 4915330,
    "ivory": 16777200,
    "khaki": 15787660,
    "lavender": 15132410,
    "lavenderblush": 16773365,
    "lawngreen": 8190976,
    "lemonchiffon": 16775885,
    "lightblue": 11393254,
    "lightcoral": 15761536,
    "lightcyan": 14745599,
    "lightgoldenrodyellow": 16448210,
    "lightgray": 13882323,
    "lightgreen": 9498256,
    "lightgrey": 13882323,
    "lightpink": 16758465,
    "lightsalmon": 16752762,
    "lightseagreen": 2142890,
    "lightskyblue": 8900346,
    "lightslategray": 7833753,
    "lightslategrey": 7833753,
    "lightsteelblue": 11584734,
    "lightyellow": 16777184,
    "lime": 65280,
    "limegreen": 3329330,
    "linen": 16445670,
    "magenta": 16711935,
    "maroon": 8388608,
    "mediumaquamarine": 6737322,
    "mediumblue": 205,
    "mediumorchid": 12211667,
    "mediumpurple": 9662683,
    "mediumseagreen": 3978097,
    "mediumslateblue": 8087790,
    "mediumspringgreen": 64154,
    "mediumturquoise": 4772300,
    "mediumvioletred": 13047173,
    "midnightblue": 1644912,
    "mintcream": 16121850,
    "mistyrose": 16770273,
    "moccasin": 16770229,
    "navajowhite": 16768685,
    "navy": 128,
    "oldlace": 16643558,
    "olive": 8421376,
    "olivedrab": 7048739,
    "orange": 16753920,
    "orangered": 16729344,
    "orchid": 14315734,
    "palegoldenrod": 15657130,
    "palegreen": 10025880,
    "paleturquoise": 11529966,
    "palevioletred": 14381203,
    "papayawhip": 16773077,
    "peachpuff": 16767673,
    "peru": 13468991,
    "pink": 16761035,
    "plum": 14524637,
    "powderblue": 11591910,
    "purple": 8388736,
    "rebeccapurple": 6697881,
    "red": 16711680,
    "rosybrown": 12357519,
    "royalblue": 4286945,
    "saddlebrown": 9127187,
    "salmon": 16416882,
    "sandybrown": 16032864,
    "seagreen": 3050327,
    "seashell": 16774638,
    "sienna": 10506797,
    "silver": 12632256,
    "skyblue": 8900331,
    "slateblue": 6970061,
    "slategray": 7372944,
    "slategrey": 7372944,
    "snow": 16775930,
    "springgreen": 65407,
    "steelblue": 4620980,
    "tan": 13808780,
    "teal": 32896,
    "thistle": 14204888,
    "tomato": 16737095,
    "turquoise": 4251856,
    "violet": 15631086,
    "wheat": 16113331,
    "white": 16777215,
    "whitesmoke": 16119285,
    "yellow": 16776960,
    "yellowgreen": 10145074
  };
  var _hslA = { h: 0, s: 0, l: 0 };
  var _hslB = { h: 0, s: 0, l: 0 };
  function hue2rgb(p, q, t) {
    if (t < 0)
      t += 1;
    if (t > 1)
      t -= 1;
    if (t < 1 / 6)
      return p + (q - p) * 6 * t;
    if (t < 1 / 2)
      return q;
    if (t < 2 / 3)
      return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  var Color = class {
    constructor(r, g, b) {
      this.isColor = true;
      this.r = 1;
      this.g = 1;
      this.b = 1;
      return this.set(r, g, b);
    }
    set(r, g, b) {
      if (g === void 0 && b === void 0) {
        const value = r;
        if (value && value.isColor) {
          this.copy(value);
        } else if (typeof value === "number") {
          this.setHex(value);
        } else if (typeof value === "string") {
          this.setStyle(value);
        }
      } else {
        this.setRGB(r, g, b);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex, colorSpace = SRGBColorSpace) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
      this.r = r;
      this.g = g;
      this.b = b;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
      h = euclideanModulo(h, 1);
      s = clamp(s, 0, 1);
      l = clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setStyle(style, colorSpace = SRGBColorSpace) {
      function handleAlpha(string) {
        if (string === void 0)
          return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
        let color;
        const name = m[1];
        const components = m[2];
        switch (name) {
          case "rgb":
          case "rgba":
            if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(255, parseInt(color[1], 10)) / 255,
                Math.min(255, parseInt(color[2], 10)) / 255,
                Math.min(255, parseInt(color[3], 10)) / 255,
                colorSpace
              );
            }
            if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(100, parseInt(color[1], 10)) / 100,
                Math.min(100, parseInt(color[2], 10)) / 100,
                Math.min(100, parseInt(color[3], 10)) / 100,
                colorSpace
              );
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setHSL(
                parseFloat(color[1]) / 360,
                parseFloat(color[2]) / 100,
                parseFloat(color[3]) / 100,
                colorSpace
              );
            }
            break;
          default:
            console.warn("THREE.Color: Unknown color model " + style);
        }
      } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          return this.setRGB(
            parseInt(hex.charAt(0), 16) / 15,
            parseInt(hex.charAt(1), 16) / 15,
            parseInt(hex.charAt(2), 16) / 15,
            colorSpace
          );
        } else if (size === 6) {
          return this.setHex(parseInt(hex, 16), colorSpace);
        } else {
          console.warn("THREE.Color: Invalid hex color " + style);
        }
      } else if (style && style.length > 0) {
        return this.setColorName(style, colorSpace);
      }
      return this;
    }
    setColorName(style, colorSpace = SRGBColorSpace) {
      const hex = _colorKeywords[style.toLowerCase()];
      if (hex !== void 0) {
        this.setHex(hex, colorSpace);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
    }
    getHexString(colorSpace = SRGBColorSpace) {
      return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
    }
    getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max) / 2;
      if (min === max) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max - min;
        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
        switch (max) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      target.r = _color.r;
      target.g = _color.g;
      target.b = _color.b;
      return target;
    }
    getStyle(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      if (colorSpace !== SRGBColorSpace) {
        return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
      }
      return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;
    }
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h = lerp(_hslA.h, _hslB.h, alpha);
      const s = lerp(_hslA.s, _hslB.s, alpha);
      const l = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    setFromVector3(v) {
      this.r = v.x;
      this.g = v.y;
      this.b = v.z;
      return this;
    }
    applyMatrix3(m) {
      const r = this.r, g = this.g, b = this.b;
      const e = m.elements;
      this.r = e[0] * r + e[3] * g + e[6] * b;
      this.g = e[1] * r + e[4] * g + e[7] * b;
      this.b = e[2] * r + e[5] * g + e[8] * b;
      return this;
    }
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      return this;
    }
    toJSON() {
      return this.getHex();
    }
    *[Symbol.iterator]() {
      yield this.r;
      yield this.g;
      yield this.b;
    }
  };
  var _color = /* @__PURE__ */ new Color();
  Color.NAMES = _colorKeywords;
  var _materialId = 0;
  var Material = class extends EventDispatcher {
    constructor() {
      super();
      this.isMaterial = true;
      Object.defineProperty(this, "id", { value: _materialId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Material";
      this.blending = NormalBlending;
      this.side = FrontSide;
      this.vertexColors = false;
      this.opacity = 1;
      this.transparent = false;
      this.alphaHash = false;
      this.blendSrc = SrcAlphaFactor;
      this.blendDst = OneMinusSrcAlphaFactor;
      this.blendEquation = AddEquation;
      this.blendSrcAlpha = null;
      this.blendDstAlpha = null;
      this.blendEquationAlpha = null;
      this.blendColor = new Color(0, 0, 0);
      this.blendAlpha = 0;
      this.depthFunc = LessEqualDepth;
      this.depthTest = true;
      this.depthWrite = true;
      this.stencilWriteMask = 255;
      this.stencilFunc = AlwaysStencilFunc;
      this.stencilRef = 0;
      this.stencilFuncMask = 255;
      this.stencilFail = KeepStencilOp;
      this.stencilZFail = KeepStencilOp;
      this.stencilZPass = KeepStencilOp;
      this.stencilWrite = false;
      this.clippingPlanes = null;
      this.clipIntersection = false;
      this.clipShadows = false;
      this.shadowSide = null;
      this.colorWrite = true;
      this.precision = null;
      this.polygonOffset = false;
      this.polygonOffsetFactor = 0;
      this.polygonOffsetUnits = 0;
      this.dithering = false;
      this.alphaToCoverage = false;
      this.premultipliedAlpha = false;
      this.forceSinglePass = false;
      this.visible = true;
      this.toneMapped = true;
      this.userData = {};
      this.version = 0;
      this._alphaTest = 0;
    }
    get alphaTest() {
      return this._alphaTest;
    }
    set alphaTest(value) {
      if (this._alphaTest > 0 !== value > 0) {
        this.version++;
      }
      this._alphaTest = value;
    }
    // onBeforeRender and onBeforeCompile only supported in WebGLRenderer
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
    setValues(values) {
      if (values === void 0)
        return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (isRootObject) {
        meta = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.6,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (this.color && this.color.isColor)
        data.color = this.color.getHex();
      if (this.roughness !== void 0)
        data.roughness = this.roughness;
      if (this.metalness !== void 0)
        data.metalness = this.metalness;
      if (this.sheen !== void 0)
        data.sheen = this.sheen;
      if (this.sheenColor && this.sheenColor.isColor)
        data.sheenColor = this.sheenColor.getHex();
      if (this.sheenRoughness !== void 0)
        data.sheenRoughness = this.sheenRoughness;
      if (this.emissive && this.emissive.isColor)
        data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1)
        data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor)
        data.specular = this.specular.getHex();
      if (this.specularIntensity !== void 0)
        data.specularIntensity = this.specularIntensity;
      if (this.specularColor && this.specularColor.isColor)
        data.specularColor = this.specularColor.getHex();
      if (this.shininess !== void 0)
        data.shininess = this.shininess;
      if (this.clearcoat !== void 0)
        data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0)
        data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.dispersion !== void 0)
        data.dispersion = this.dispersion;
      if (this.iridescence !== void 0)
        data.iridescence = this.iridescence;
      if (this.iridescenceIOR !== void 0)
        data.iridescenceIOR = this.iridescenceIOR;
      if (this.iridescenceThicknessRange !== void 0)
        data.iridescenceThicknessRange = this.iridescenceThicknessRange;
      if (this.iridescenceMap && this.iridescenceMap.isTexture) {
        data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
      }
      if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
        data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
      }
      if (this.anisotropy !== void 0)
        data.anisotropy = this.anisotropy;
      if (this.anisotropyRotation !== void 0)
        data.anisotropyRotation = this.anisotropyRotation;
      if (this.anisotropyMap && this.anisotropyMap.isTexture) {
        data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
      }
      if (this.map && this.map.isTexture)
        data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture)
        data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture)
        data.alphaMap = this.alphaMap.toJSON(meta).uuid;
      if (this.lightMap && this.lightMap.isTexture) {
        data.lightMap = this.lightMap.toJSON(meta).uuid;
        data.lightMapIntensity = this.lightMapIntensity;
      }
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture)
        data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture)
        data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture)
        data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture)
        data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.specularIntensityMap && this.specularIntensityMap.isTexture)
        data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
      if (this.specularColorMap && this.specularColorMap.isTexture)
        data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        if (this.combine !== void 0)
          data.combine = this.combine;
      }
      if (this.envMapRotation !== void 0)
        data.envMapRotation = this.envMapRotation.toArray();
      if (this.envMapIntensity !== void 0)
        data.envMapIntensity = this.envMapIntensity;
      if (this.reflectivity !== void 0)
        data.reflectivity = this.reflectivity;
      if (this.refractionRatio !== void 0)
        data.refractionRatio = this.refractionRatio;
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }
      if (this.transmission !== void 0)
        data.transmission = this.transmission;
      if (this.transmissionMap && this.transmissionMap.isTexture)
        data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
      if (this.thickness !== void 0)
        data.thickness = this.thickness;
      if (this.thicknessMap && this.thicknessMap.isTexture)
        data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
      if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity)
        data.attenuationDistance = this.attenuationDistance;
      if (this.attenuationColor !== void 0)
        data.attenuationColor = this.attenuationColor.getHex();
      if (this.size !== void 0)
        data.size = this.size;
      if (this.shadowSide !== null)
        data.shadowSide = this.shadowSide;
      if (this.sizeAttenuation !== void 0)
        data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending)
        data.blending = this.blending;
      if (this.side !== FrontSide)
        data.side = this.side;
      if (this.vertexColors === true)
        data.vertexColors = true;
      if (this.opacity < 1)
        data.opacity = this.opacity;
      if (this.transparent === true)
        data.transparent = true;
      if (this.blendSrc !== SrcAlphaFactor)
        data.blendSrc = this.blendSrc;
      if (this.blendDst !== OneMinusSrcAlphaFactor)
        data.blendDst = this.blendDst;
      if (this.blendEquation !== AddEquation)
        data.blendEquation = this.blendEquation;
      if (this.blendSrcAlpha !== null)
        data.blendSrcAlpha = this.blendSrcAlpha;
      if (this.blendDstAlpha !== null)
        data.blendDstAlpha = this.blendDstAlpha;
      if (this.blendEquationAlpha !== null)
        data.blendEquationAlpha = this.blendEquationAlpha;
      if (this.blendColor && this.blendColor.isColor)
        data.blendColor = this.blendColor.getHex();
      if (this.blendAlpha !== 0)
        data.blendAlpha = this.blendAlpha;
      if (this.depthFunc !== LessEqualDepth)
        data.depthFunc = this.depthFunc;
      if (this.depthTest === false)
        data.depthTest = this.depthTest;
      if (this.depthWrite === false)
        data.depthWrite = this.depthWrite;
      if (this.colorWrite === false)
        data.colorWrite = this.colorWrite;
      if (this.stencilWriteMask !== 255)
        data.stencilWriteMask = this.stencilWriteMask;
      if (this.stencilFunc !== AlwaysStencilFunc)
        data.stencilFunc = this.stencilFunc;
      if (this.stencilRef !== 0)
        data.stencilRef = this.stencilRef;
      if (this.stencilFuncMask !== 255)
        data.stencilFuncMask = this.stencilFuncMask;
      if (this.stencilFail !== KeepStencilOp)
        data.stencilFail = this.stencilFail;
      if (this.stencilZFail !== KeepStencilOp)
        data.stencilZFail = this.stencilZFail;
      if (this.stencilZPass !== KeepStencilOp)
        data.stencilZPass = this.stencilZPass;
      if (this.stencilWrite === true)
        data.stencilWrite = this.stencilWrite;
      if (this.rotation !== void 0 && this.rotation !== 0)
        data.rotation = this.rotation;
      if (this.polygonOffset === true)
        data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0)
        data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0)
        data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth !== void 0 && this.linewidth !== 1)
        data.linewidth = this.linewidth;
      if (this.dashSize !== void 0)
        data.dashSize = this.dashSize;
      if (this.gapSize !== void 0)
        data.gapSize = this.gapSize;
      if (this.scale !== void 0)
        data.scale = this.scale;
      if (this.dithering === true)
        data.dithering = true;
      if (this.alphaTest > 0)
        data.alphaTest = this.alphaTest;
      if (this.alphaHash === true)
        data.alphaHash = true;
      if (this.alphaToCoverage === true)
        data.alphaToCoverage = true;
      if (this.premultipliedAlpha === true)
        data.premultipliedAlpha = true;
      if (this.forceSinglePass === true)
        data.forceSinglePass = true;
      if (this.wireframe === true)
        data.wireframe = true;
      if (this.wireframeLinewidth > 1)
        data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round")
        data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round")
        data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.flatShading === true)
        data.flatShading = true;
      if (this.visible === false)
        data.visible = false;
      if (this.toneMapped === false)
        data.toneMapped = false;
      if (this.fog === false)
        data.fog = false;
      if (Object.keys(this.userData).length > 0)
        data.userData = this.userData;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data2 = cache[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRootObject) {
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        if (textures.length > 0)
          data.textures = textures;
        if (images.length > 0)
          data.images = images;
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.blending = source.blending;
      this.side = source.side;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.blendColor.copy(source.blendColor);
      this.blendAlpha = source.blendAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n = srcPlanes.length;
        dstPlanes = new Array(n);
        for (let i = 0; i !== n; ++i) {
          dstPlanes[i] = srcPlanes[i].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.alphaHash = source.alphaHash;
      this.alphaToCoverage = source.alphaToCoverage;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.forceSinglePass = source.forceSinglePass;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
    onBuild() {
      console.warn("Material: onBuild() has been removed.");
    }
  };
  var MeshBasicMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshBasicMaterial = true;
      this.type = "MeshBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.fog = source.fog;
      return this;
    }
  };
  var _vector$9 = /* @__PURE__ */ new Vector3();
  var _vector2$1 = /* @__PURE__ */ new Vector2();
  var _id$2 = 0;
  var BufferAttribute = class {
    constructor(array, itemSize, normalized = false) {
      if (Array.isArray(array)) {
        throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      }
      this.isBufferAttribute = true;
      Object.defineProperty(this, "id", { value: _id$2++ });
      this.name = "";
      this.array = array;
      this.itemSize = itemSize;
      this.count = array !== void 0 ? array.length / itemSize : 0;
      this.normalized = normalized;
      this.usage = StaticDrawUsage;
      this.updateRanges = [];
      this.gpuType = FloatType;
      this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
    setUsage(value) {
      this.usage = value;
      return this;
    }
    addUpdateRange(start, count) {
      this.updateRanges.push({ start, count });
    }
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    copy(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      this.gpuType = source.gpuType;
      return this;
    }
    copyAt(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;
      for (let i = 0, l = this.itemSize; i < l; i++) {
        this.array[index1 + i] = attribute.array[index2 + i];
      }
      return this;
    }
    copyArray(array) {
      this.array.set(array);
      return this;
    }
    applyMatrix3(m) {
      if (this.itemSize === 2) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector2$1.fromBufferAttribute(this, i);
          _vector2$1.applyMatrix3(m);
          this.setXY(i, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$9.fromBufferAttribute(this, i);
          _vector$9.applyMatrix3(m);
          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
        }
      }
      return this;
    }
    applyMatrix4(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.applyMatrix4(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    applyNormalMatrix(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.applyNormalMatrix(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    transformDirection(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.transformDirection(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
    getComponent(index, component) {
      let value = this.array[index * this.itemSize + component];
      if (this.normalized)
        value = denormalize(value, this.array);
      return value;
    }
    setComponent(index, component, value) {
      if (this.normalized)
        value = normalize(value, this.array);
      this.array[index * this.itemSize + component] = value;
      return this;
    }
    getX(index) {
      let x = this.array[index * this.itemSize];
      if (this.normalized)
        x = denormalize(x, this.array);
      return x;
    }
    setX(index, x) {
      if (this.normalized)
        x = normalize(x, this.array);
      this.array[index * this.itemSize] = x;
      return this;
    }
    getY(index) {
      let y = this.array[index * this.itemSize + 1];
      if (this.normalized)
        y = denormalize(y, this.array);
      return y;
    }
    setY(index, y) {
      if (this.normalized)
        y = normalize(y, this.array);
      this.array[index * this.itemSize + 1] = y;
      return this;
    }
    getZ(index) {
      let z = this.array[index * this.itemSize + 2];
      if (this.normalized)
        z = denormalize(z, this.array);
      return z;
    }
    setZ(index, z) {
      if (this.normalized)
        z = normalize(z, this.array);
      this.array[index * this.itemSize + 2] = z;
      return this;
    }
    getW(index) {
      let w = this.array[index * this.itemSize + 3];
      if (this.normalized)
        w = denormalize(w, this.array);
      return w;
    }
    setW(index, w) {
      if (this.normalized)
        w = normalize(w, this.array);
      this.array[index * this.itemSize + 3] = w;
      return this;
    }
    setXY(index, x, y) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      return this;
    }
    setXYZ(index, x, y, z) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      return this;
    }
    setXYZW(index, x, y, z, w) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
        w = normalize(w, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      this.array[index + 3] = w;
      return this;
    }
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
      const data = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.from(this.array),
        normalized: this.normalized
      };
      if (this.name !== "")
        data.name = this.name;
      if (this.usage !== StaticDrawUsage)
        data.usage = this.usage;
      return data;
    }
  };
  var Uint16BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint16Array(array), itemSize, normalized);
    }
  };
  var Uint32BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint32Array(array), itemSize, normalized);
    }
  };
  var Float32BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Float32Array(array), itemSize, normalized);
    }
  };
  var _id$1 = 0;
  var _m1 = /* @__PURE__ */ new Matrix4();
  var _obj = /* @__PURE__ */ new Object3D();
  var _offset = /* @__PURE__ */ new Vector3();
  var _box$2 = /* @__PURE__ */ new Box3();
  var _boxMorphTargets = /* @__PURE__ */ new Box3();
  var _vector$8 = /* @__PURE__ */ new Vector3();
  var BufferGeometry = class extends EventDispatcher {
    constructor() {
      super();
      this.isBufferGeometry = true;
      Object.defineProperty(this, "id", { value: _id$1++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "BufferGeometry";
      this.index = null;
      this.indirect = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.morphTargetsRelative = false;
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.drawRange = { start: 0, count: Infinity };
      this.userData = {};
    }
    getIndex() {
      return this.index;
    }
    setIndex(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    }
    setIndirect(indirect) {
      this.indirect = indirect;
      return this;
    }
    getIndirect() {
      return this.indirect;
    }
    getAttribute(name) {
      return this.attributes[name];
    }
    setAttribute(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    }
    deleteAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    hasAttribute(name) {
      return this.attributes[name] !== void 0;
    }
    addGroup(start, count, materialIndex = 0) {
      this.groups.push({
        start,
        count,
        materialIndex
      });
    }
    clearGroups() {
      this.groups = [];
    }
    setDrawRange(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal = this.attributes.normal;
      if (normal !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    }
    applyQuaternion(q) {
      _m1.makeRotationFromQuaternion(q);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateX(angle) {
      _m1.makeRotationX(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateY(angle) {
      _m1.makeRotationY(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateZ(angle) {
      _m1.makeRotationZ(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    translate(x, y, z) {
      _m1.makeTranslation(x, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    scale(x, y, z) {
      _m1.makeScale(x, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    lookAt(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    }
    center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    }
    setFromPoints(points) {
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute === void 0) {
        const position = [];
        for (let i = 0, l = points.length; i < l; i++) {
          const point = points[i];
          position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new Float32BufferAttribute(position, 3));
      } else {
        const l = Math.min(points.length, positionAttribute.count);
        for (let i = 0; i < l; i++) {
          const point = points[i];
          positionAttribute.setXYZ(i, point.x, point.y, point.z || 0);
        }
        if (points.length > positionAttribute.count) {
          console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.");
        }
        positionAttribute.needsUpdate = true;
      }
      return this;
    }
    computeBoundingBox() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
        this.boundingBox.set(
          new Vector3(-Infinity, -Infinity, -Infinity),
          new Vector3(Infinity, Infinity, Infinity)
        );
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _box$2.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(this.boundingBox.min, _box$2.min);
              this.boundingBox.expandByPoint(_vector$8);
              _vector$8.addVectors(this.boundingBox.max, _box$2.max);
              this.boundingBox.expandByPoint(_vector$8);
            } else {
              this.boundingBox.expandByPoint(_box$2.min);
              this.boundingBox.expandByPoint(_box$2.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }
    computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$2.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
              _box$2.expandByPoint(_vector$8);
              _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
              _box$2.expandByPoint(_vector$8);
            } else {
              _box$2.expandByPoint(_boxMorphTargets.min);
              _box$2.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$2.getCenter(center);
        let maxRadiusSq = 0;
        for (let i = 0, il = position.count; i < il; i++) {
          _vector$8.fromBufferAttribute(position, i);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
        }
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
              _vector$8.fromBufferAttribute(morphAttribute, j);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);
                _vector$8.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }
    computeTangents() {
      const index = this.index;
      const attributes = this.attributes;
      if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
        console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        return;
      }
      const positionAttribute = attributes.position;
      const normalAttribute = attributes.normal;
      const uvAttribute = attributes.uv;
      if (this.hasAttribute("tangent") === false) {
        this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
      }
      const tangentAttribute = this.getAttribute("tangent");
      const tan1 = [], tan2 = [];
      for (let i = 0; i < positionAttribute.count; i++) {
        tan1[i] = new Vector3();
        tan2[i] = new Vector3();
      }
      const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
      function handleTriangle(a, b, c) {
        vA.fromBufferAttribute(positionAttribute, a);
        vB.fromBufferAttribute(positionAttribute, b);
        vC.fromBufferAttribute(positionAttribute, c);
        uvA.fromBufferAttribute(uvAttribute, a);
        uvB.fromBufferAttribute(uvAttribute, b);
        uvC.fromBufferAttribute(uvAttribute, c);
        vB.sub(vA);
        vC.sub(vA);
        uvB.sub(uvA);
        uvC.sub(uvA);
        const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
        if (!isFinite(r))
          return;
        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
        tan1[a].add(sdir);
        tan1[b].add(sdir);
        tan1[c].add(sdir);
        tan2[a].add(tdir);
        tan2[b].add(tdir);
        tan2[c].add(tdir);
      }
      let groups = this.groups;
      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: index.count
        }];
      }
      for (let i = 0, il = groups.length; i < il; ++i) {
        const group = groups[i];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleTriangle(
            index.getX(j + 0),
            index.getX(j + 1),
            index.getX(j + 2)
          );
        }
      }
      const tmp = new Vector3(), tmp2 = new Vector3();
      const n = new Vector3(), n2 = new Vector3();
      function handleVertex(v) {
        n.fromBufferAttribute(normalAttribute, v);
        n2.copy(n);
        const t = tan1[v];
        tmp.copy(t);
        tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
        tmp2.crossVectors(n2, t);
        const test = tmp2.dot(tan2[v]);
        const w = test < 0 ? -1 : 1;
        tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);
      }
      for (let i = 0, il = groups.length; i < il; ++i) {
        const group = groups[i];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleVertex(index.getX(j + 0));
          handleVertex(index.getX(j + 1));
          handleVertex(index.getX(j + 2));
        }
      }
    }
    computeVertexNormals() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i = 0, il = normalAttribute.count; i < il; i++) {
            normalAttribute.setXYZ(i, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i = 0, il = index.count; i < il; i += 3) {
            const vA = index.getX(i + 0);
            const vB = index.getX(i + 1);
            const vC = index.getX(i + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
            pA.fromBufferAttribute(positionAttribute, i + 0);
            pB.fromBufferAttribute(positionAttribute, i + 1);
            pC.fromBufferAttribute(positionAttribute, i + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    }
    normalizeNormals() {
      const normals = this.attributes.normal;
      for (let i = 0, il = normals.count; i < il; i++) {
        _vector$8.fromBufferAttribute(normals, i);
        _vector$8.normalize();
        normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
      }
    }
    toNonIndexed() {
      function convertBufferAttribute(attribute, indices2) {
        const array = attribute.array;
        const itemSize = attribute.itemSize;
        const normalized = attribute.normalized;
        const array2 = new array.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i = 0, l = indices2.length; i < l; i++) {
          if (attribute.isInterleavedBufferAttribute) {
            index = indices2[i] * attribute.data.stride + attribute.offset;
          } else {
            index = indices2[i] * itemSize;
          }
          for (let j = 0; j < itemSize; j++) {
            array2[index2++] = array[index++];
          }
        }
        return new BufferAttribute(array2, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
        return this;
      }
      const geometry2 = new BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        const newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name];
        for (let i = 0, il = morphAttribute.length; i < il; i++) {
          const attribute = morphAttribute[i];
          const newAttribute = convertBufferAttribute(attribute, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group = groups[i];
        geometry2.addGroup(group.start, group.count, group.materialIndex);
      }
      return geometry2;
    }
    toJSON() {
      const data = {
        metadata: {
          version: 4.6,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (Object.keys(this.userData).length > 0)
        data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0)
            data[key] = parameters[key];
        }
        return data;
      }
      data.data = { attributes: {} };
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        data.data.attributes[key] = attribute.toJSON(data.data);
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array = [];
        for (let i = 0, il = attributeArray.length; i < il; i++) {
          const attribute = attributeArray[i];
          array.push(attribute.toJSON(data.data));
        }
        if (array.length > 0) {
          morphAttributes[key] = array;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone(data));
      }
      const attributes = source.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        this.setAttribute(name, attribute.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name in morphAttributes) {
        const array = [];
        const morphAttribute = morphAttributes[name];
        for (let i = 0, l = morphAttribute.length; i < l; i++) {
          array.push(morphAttribute[i].clone(data));
        }
        this.morphAttributes[name] = array;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group = groups[i];
        this.addGroup(group.start, group.count, group.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  var _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
  var _ray$3 = /* @__PURE__ */ new Ray();
  var _sphere$6 = /* @__PURE__ */ new Sphere();
  var _sphereHitAt = /* @__PURE__ */ new Vector3();
  var _vA$1 = /* @__PURE__ */ new Vector3();
  var _vB$1 = /* @__PURE__ */ new Vector3();
  var _vC$1 = /* @__PURE__ */ new Vector3();
  var _tempA = /* @__PURE__ */ new Vector3();
  var _morphA = /* @__PURE__ */ new Vector3();
  var _intersectionPoint = /* @__PURE__ */ new Vector3();
  var _intersectionPointWorld = /* @__PURE__ */ new Vector3();
  var Mesh = class extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
      super();
      this.isMesh = true;
      this.type = "Mesh";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
      this.geometry = source.geometry;
      return this;
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m;
          }
        }
      }
    }
    getVertexPosition(index, target) {
      const geometry = this.geometry;
      const position = geometry.attributes.position;
      const morphPosition = geometry.morphAttributes.position;
      const morphTargetsRelative = geometry.morphTargetsRelative;
      target.fromBufferAttribute(position, index);
      const morphInfluences = this.morphTargetInfluences;
      if (morphPosition && morphInfluences) {
        _morphA.set(0, 0, 0);
        for (let i = 0, il = morphPosition.length; i < il; i++) {
          const influence = morphInfluences[i];
          const morphAttribute = morphPosition[i];
          if (influence === 0)
            continue;
          _tempA.fromBufferAttribute(morphAttribute, index);
          if (morphTargetsRelative) {
            _morphA.addScaledVector(_tempA, influence);
          } else {
            _morphA.addScaledVector(_tempA.sub(target), influence);
          }
        }
        target.add(_morphA);
      }
      return target;
    }
    raycast(raycaster, intersects) {
      const geometry = this.geometry;
      const material = this.material;
      const matrixWorld = this.matrixWorld;
      if (material === void 0)
        return;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$6.copy(geometry.boundingSphere);
      _sphere$6.applyMatrix4(matrixWorld);
      _ray$3.copy(raycaster.ray).recast(raycaster.near);
      if (_sphere$6.containsPoint(_ray$3.origin) === false) {
        if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null)
          return;
        if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2)
          return;
      }
      _inverseMatrix$3.copy(matrixWorld).invert();
      _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
      if (geometry.boundingBox !== null) {
        if (_ray$3.intersectsBox(geometry.boundingBox) === false)
          return;
      }
      this._computeIntersections(raycaster, intersects, _ray$3);
    }
    _computeIntersections(raycaster, intersects, rayLocalSpace) {
      let intersection;
      const geometry = this.geometry;
      const material = this.material;
      const index = geometry.index;
      const position = geometry.attributes.position;
      const uv = geometry.attributes.uv;
      const uv1 = geometry.attributes.uv1;
      const normal = geometry.attributes.normal;
      const groups = geometry.groups;
      const drawRange = geometry.drawRange;
      if (index !== null) {
        if (Array.isArray(material)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = index.getX(j);
              const b = index.getX(j + 1);
              const c = index.getX(j + 2);
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = index.getX(i);
            const b = index.getX(i + 1);
            const c = index.getX(i + 2);
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects.push(intersection);
            }
          }
        }
      } else if (position !== void 0) {
        if (Array.isArray(material)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = j;
              const b = j + 1;
              const c = j + 2;
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(position.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = i;
            const b = i + 1;
            const c = i + 2;
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects.push(intersection);
            }
          }
        }
      }
    }
  };
  function checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
    }
    if (intersect === null)
      return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far)
      return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
    object.getVertexPosition(a, _vA$1);
    object.getVertexPosition(b, _vB$1);
    object.getVertexPosition(c, _vC$1);
    const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
      const barycoord = new Vector3();
      Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);
      if (uv) {
        intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());
      }
      if (uv1) {
        intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());
      }
      if (normal) {
        intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());
        if (intersection.normal.dot(ray.direction) > 0) {
          intersection.normal.multiplyScalar(-1);
        }
      }
      const face = {
        a,
        b,
        c,
        normal: new Vector3(),
        materialIndex: 0
      };
      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
      intersection.face = face;
      intersection.barycoord = barycoord;
    }
    return intersection;
  }
  var BoxGeometry = class extends BufferGeometry {
    constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
      super();
      this.type = "BoxGeometry";
      this.parameters = {
        width,
        height,
        depth,
        widthSegments,
        heightSegments,
        depthSegments
      };
      const scope = this;
      widthSegments = Math.floor(widthSegments);
      heightSegments = Math.floor(heightSegments);
      depthSegments = Math.floor(depthSegments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let numberOfVertices = 0;
      let groupStart = 0;
      buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
      buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
      buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
      buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
      buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
      buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
        const segmentWidth = width2 / gridX;
        const segmentHeight = height2 / gridY;
        const widthHalf = width2 / 2;
        const heightHalf = height2 / 2;
        const depthHalf = depth2 / 2;
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        let vertexCounter = 0;
        let groupCount = 0;
        const vector = new Vector3();
        for (let iy = 0; iy < gridY1; iy++) {
          const y = iy * segmentHeight - heightHalf;
          for (let ix = 0; ix < gridX1; ix++) {
            const x = ix * segmentWidth - widthHalf;
            vector[u] = x * udir;
            vector[v] = y * vdir;
            vector[w] = depthHalf;
            vertices.push(vector.x, vector.y, vector.z);
            vector[u] = 0;
            vector[v] = 0;
            vector[w] = depth2 > 0 ? 1 : -1;
            normals.push(vector.x, vector.y, vector.z);
            uvs.push(ix / gridX);
            uvs.push(1 - iy / gridY);
            vertexCounter += 1;
          }
        }
        for (let iy = 0; iy < gridY; iy++) {
          for (let ix = 0; ix < gridX; ix++) {
            const a = numberOfVertices + ix + gridX1 * iy;
            const b = numberOfVertices + ix + gridX1 * (iy + 1);
            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
            const d = numberOfVertices + (ix + 1) + gridX1 * iy;
            indices.push(a, b, d);
            indices.push(b, c, d);
            groupCount += 6;
          }
        }
        scope.addGroup(groupStart, groupCount, materialIndex);
        groupStart += groupCount;
        numberOfVertices += vertexCounter;
      }
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
    }
  };
  function cloneUniforms(src) {
    const dst = {};
    for (const u in src) {
      dst[u] = {};
      for (const p in src[u]) {
        const property = src[u][p];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
          if (property.isRenderTargetTexture) {
            console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
            dst[u][p] = null;
          } else {
            dst[u][p] = property.clone();
          }
        } else if (Array.isArray(property)) {
          dst[u][p] = property.slice();
        } else {
          dst[u][p] = property;
        }
      }
    }
    return dst;
  }
  function mergeUniforms(uniforms) {
    const merged = {};
    for (let u = 0; u < uniforms.length; u++) {
      const tmp = cloneUniforms(uniforms[u]);
      for (const p in tmp) {
        merged[p] = tmp[p];
      }
    }
    return merged;
  }
  function cloneUniformsGroups(src) {
    const dst = [];
    for (let u = 0; u < src.length; u++) {
      dst.push(src[u].clone());
    }
    return dst;
  }
  function getUnlitUniformColorSpace(renderer) {
    const currentRenderTarget = renderer.getRenderTarget();
    if (currentRenderTarget === null) {
      return renderer.outputColorSpace;
    }
    if (currentRenderTarget.isXRRenderTarget === true) {
      return currentRenderTarget.texture.colorSpace;
    }
    return ColorManagement.workingColorSpace;
  }
  var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
  var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
  var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
  var ShaderMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isShaderMaterial = true;
      this.type = "ShaderMaterial";
      this.defines = {};
      this.uniforms = {};
      this.uniformsGroups = [];
      this.vertexShader = default_vertex;
      this.fragmentShader = default_fragment;
      this.linewidth = 1;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.lights = false;
      this.clipping = false;
      this.forceSinglePass = true;
      this.extensions = {
        clipCullDistance: false,
        // set to use vertex shader clipping
        multiDraw: false
        // set to use vertex shader multi_draw / enable gl_DrawID
      };
      this.defaultAttributeValues = {
        "color": [1, 1, 1],
        "uv": [0, 0],
        "uv1": [0, 0]
      };
      this.index0AttributeName = void 0;
      this.uniformsNeedUpdate = false;
      this.glslVersion = null;
      if (parameters !== void 0) {
        this.setValues(parameters);
      }
    }
    copy(source) {
      super.copy(source);
      this.fragmentShader = source.fragmentShader;
      this.vertexShader = source.vertexShader;
      this.uniforms = cloneUniforms(source.uniforms);
      this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
      this.defines = Object.assign({}, source.defines);
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.fog = source.fog;
      this.lights = source.lights;
      this.clipping = source.clipping;
      this.extensions = Object.assign({}, source.extensions);
      this.glslVersion = source.glslVersion;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.glslVersion = this.glslVersion;
      data.uniforms = {};
      for (const name in this.uniforms) {
        const uniform = this.uniforms[name];
        const value = uniform.value;
        if (value && value.isTexture) {
          data.uniforms[name] = {
            type: "t",
            value: value.toJSON(meta).uuid
          };
        } else if (value && value.isColor) {
          data.uniforms[name] = {
            type: "c",
            value: value.getHex()
          };
        } else if (value && value.isVector2) {
          data.uniforms[name] = {
            type: "v2",
            value: value.toArray()
          };
        } else if (value && value.isVector3) {
          data.uniforms[name] = {
            type: "v3",
            value: value.toArray()
          };
        } else if (value && value.isVector4) {
          data.uniforms[name] = {
            type: "v4",
            value: value.toArray()
          };
        } else if (value && value.isMatrix3) {
          data.uniforms[name] = {
            type: "m3",
            value: value.toArray()
          };
        } else if (value && value.isMatrix4) {
          data.uniforms[name] = {
            type: "m4",
            value: value.toArray()
          };
        } else {
          data.uniforms[name] = {
            value
          };
        }
      }
      if (Object.keys(this.defines).length > 0)
        data.defines = this.defines;
      data.vertexShader = this.vertexShader;
      data.fragmentShader = this.fragmentShader;
      data.lights = this.lights;
      data.clipping = this.clipping;
      const extensions = {};
      for (const key in this.extensions) {
        if (this.extensions[key] === true)
          extensions[key] = true;
      }
      if (Object.keys(extensions).length > 0)
        data.extensions = extensions;
      return data;
    }
  };
  var Camera = class extends Object3D {
    constructor() {
      super();
      this.isCamera = true;
      this.type = "Camera";
      this.matrixWorldInverse = new Matrix4();
      this.projectionMatrix = new Matrix4();
      this.projectionMatrixInverse = new Matrix4();
      this.coordinateSystem = WebGLCoordinateSystem;
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      this.coordinateSystem = source.coordinateSystem;
      return this;
    }
    getWorldDirection(target) {
      return super.getWorldDirection(target).negate();
    }
    updateMatrixWorld(force) {
      super.updateMatrixWorld(force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
      super.updateWorldMatrix(updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _v3$1 = /* @__PURE__ */ new Vector3();
  var _minTarget = /* @__PURE__ */ new Vector2();
  var _maxTarget = /* @__PURE__ */ new Vector2();
  var PerspectiveCamera = class extends Camera {
    constructor(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
      super();
      this.isPerspectiveCamera = true;
      this.type = "PerspectiveCamera";
      this.fov = fov2;
      this.zoom = 1;
      this.near = near;
      this.far = far;
      this.focus = 10;
      this.aspect = aspect2;
      this.view = null;
      this.filmGauge = 35;
      this.filmOffset = 0;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.fov = source.fov;
      this.zoom = source.zoom;
      this.near = source.near;
      this.far = source.far;
      this.focus = source.focus;
      this.aspect = source.aspect;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      this.filmGauge = source.filmGauge;
      this.filmOffset = source.filmOffset;
      return this;
    }
    /**
     * Sets the FOV by focal length in respect to the current .filmGauge.
     *
     * The default film gauge is 35, so that the focal length can be specified for
     * a 35mm (full frame) camera.
     *
     * @param {number} focalLength - Values for focal length and film gauge must have the same unit.
     */
    setFocalLength(focalLength) {
      const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
      this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
      this.updateProjectionMatrix();
    }
    /**
     * Calculates the focal length from the current .fov and .filmGauge.
     *
     * @returns {number}
     */
    getFocalLength() {
      const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
      return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    getEffectiveFOV() {
      return RAD2DEG * 2 * Math.atan(
        Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
      );
    }
    getFilmWidth() {
      return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
      return this.filmGauge / Math.max(this.aspect, 1);
    }
    /**
     * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
     * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
     *
     * @param {number} distance
     * @param {Vector2} minTarget
     * @param {Vector2} maxTarget
     */
    getViewBounds(distance, minTarget, maxTarget) {
      _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);
      minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);
      _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);
      maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);
    }
    /**
     * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
     *
     * @param {number} distance
     * @param {Vector2} target - Vector2 target used to store result where x is width and y is height.
     * @returns {Vector2}
     */
    getViewSize(distance, target) {
      this.getViewBounds(distance, _minTarget, _maxTarget);
      return target.subVectors(_maxTarget, _minTarget);
    }
    /**
     * Sets an offset in a larger frustum. This is useful for multi-window or
     * multi-monitor/multi-machine setups.
     *
     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
     * the monitors are in grid like this
     *
     *   +---+---+---+
     *   | A | B | C |
     *   +---+---+---+
     *   | D | E | F |
     *   +---+---+---+
     *
     * then for each monitor you would call it like this
     *
     *   const w = 1920;
     *   const h = 1080;
     *   const fullWidth = w * 3;
     *   const fullHeight = h * 2;
     *
     *   --A--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
     *   --B--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
     *   --C--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
     *   --D--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
     *   --E--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
     *   --F--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
     *
     *   Note there is no reason monitors have to be the same size or in a grid.
     *
     * @param {number} fullWidth
     * @param {number} fullHeight
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     */
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      this.aspect = fullWidth / fullHeight;
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const near = this.near;
      let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
      let height = 2 * top;
      let width = this.aspect * height;
      let left = -0.5 * width;
      const view = this.view;
      if (this.view !== null && this.view.enabled) {
        const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
        left += view.offsetX * width / fullWidth;
        top -= view.offsetY * height / fullHeight;
        width *= view.width / fullWidth;
        height *= view.height / fullHeight;
      }
      const skew = this.filmOffset;
      if (skew !== 0)
        left += near * skew / this.getFilmWidth();
      this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.fov = this.fov;
      data.object.zoom = this.zoom;
      data.object.near = this.near;
      data.object.far = this.far;
      data.object.focus = this.focus;
      data.object.aspect = this.aspect;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      data.object.filmGauge = this.filmGauge;
      data.object.filmOffset = this.filmOffset;
      return data;
    }
  };
  var fov = -90;
  var aspect = 1;
  var CubeCamera = class extends Object3D {
    constructor(near, far, renderTarget) {
      super();
      this.type = "CubeCamera";
      this.renderTarget = renderTarget;
      this.coordinateSystem = null;
      this.activeMipmapLevel = 0;
      const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
      cameraPX.layers = this.layers;
      this.add(cameraPX);
      const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
      cameraNX.layers = this.layers;
      this.add(cameraNX);
      const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
      cameraPY.layers = this.layers;
      this.add(cameraPY);
      const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
      cameraNY.layers = this.layers;
      this.add(cameraNY);
      const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraPZ.layers = this.layers;
      this.add(cameraPZ);
      const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraNZ.layers = this.layers;
      this.add(cameraNZ);
    }
    updateCoordinateSystem() {
      const coordinateSystem = this.coordinateSystem;
      const cameras = this.children.concat();
      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
      for (const camera of cameras)
        this.remove(camera);
      if (coordinateSystem === WebGLCoordinateSystem) {
        cameraPX.up.set(0, 1, 0);
        cameraPX.lookAt(1, 0, 0);
        cameraNX.up.set(0, 1, 0);
        cameraNX.lookAt(-1, 0, 0);
        cameraPY.up.set(0, 0, -1);
        cameraPY.lookAt(0, 1, 0);
        cameraNY.up.set(0, 0, 1);
        cameraNY.lookAt(0, -1, 0);
        cameraPZ.up.set(0, 1, 0);
        cameraPZ.lookAt(0, 0, 1);
        cameraNZ.up.set(0, 1, 0);
        cameraNZ.lookAt(0, 0, -1);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        cameraPX.up.set(0, -1, 0);
        cameraPX.lookAt(-1, 0, 0);
        cameraNX.up.set(0, -1, 0);
        cameraNX.lookAt(1, 0, 0);
        cameraPY.up.set(0, 0, 1);
        cameraPY.lookAt(0, 1, 0);
        cameraNY.up.set(0, 0, -1);
        cameraNY.lookAt(0, -1, 0);
        cameraPZ.up.set(0, -1, 0);
        cameraPZ.lookAt(0, 0, 1);
        cameraNZ.up.set(0, -1, 0);
        cameraNZ.lookAt(0, 0, -1);
      } else {
        throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
      }
      for (const camera of cameras) {
        this.add(camera);
        camera.updateMatrixWorld();
      }
    }
    update(renderer, scene) {
      if (this.parent === null)
        this.updateMatrixWorld();
      const { renderTarget, activeMipmapLevel } = this;
      if (this.coordinateSystem !== renderer.coordinateSystem) {
        this.coordinateSystem = renderer.coordinateSystem;
        this.updateCoordinateSystem();
      }
      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
      const currentRenderTarget = renderer.getRenderTarget();
      const currentActiveCubeFace = renderer.getActiveCubeFace();
      const currentActiveMipmapLevel = renderer.getActiveMipmapLevel();
      const currentXrEnabled = renderer.xr.enabled;
      renderer.xr.enabled = false;
      const generateMipmaps = renderTarget.texture.generateMipmaps;
      renderTarget.texture.generateMipmaps = false;
      renderer.setRenderTarget(renderTarget, 0, activeMipmapLevel);
      renderer.render(scene, cameraPX);
      renderer.setRenderTarget(renderTarget, 1, activeMipmapLevel);
      renderer.render(scene, cameraNX);
      renderer.setRenderTarget(renderTarget, 2, activeMipmapLevel);
      renderer.render(scene, cameraPY);
      renderer.setRenderTarget(renderTarget, 3, activeMipmapLevel);
      renderer.render(scene, cameraNY);
      renderer.setRenderTarget(renderTarget, 4, activeMipmapLevel);
      renderer.render(scene, cameraPZ);
      renderTarget.texture.generateMipmaps = generateMipmaps;
      renderer.setRenderTarget(renderTarget, 5, activeMipmapLevel);
      renderer.render(scene, cameraNZ);
      renderer.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);
      renderer.xr.enabled = currentXrEnabled;
      renderTarget.texture.needsPMREMUpdate = true;
    }
  };
  var CubeTexture = class extends Texture {
    constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace) {
      images = images !== void 0 ? images : [];
      mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
      super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
      this.isCubeTexture = true;
      this.flipY = false;
    }
    get images() {
      return this.image;
    }
    set images(value) {
      this.image = value;
    }
  };
  var WebGLCubeRenderTarget = class extends WebGLRenderTarget {
    constructor(size = 1, options = {}) {
      super(size, size, options);
      this.isWebGLCubeRenderTarget = true;
      const image = { width: size, height: size, depth: 1 };
      const images = [image, image, image, image, image, image];
      this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
      this.texture.isRenderTargetTexture = true;
      this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
      this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
    }
    fromEquirectangularTexture(renderer, texture) {
      this.texture.type = texture.type;
      this.texture.colorSpace = texture.colorSpace;
      this.texture.generateMipmaps = texture.generateMipmaps;
      this.texture.minFilter = texture.minFilter;
      this.texture.magFilter = texture.magFilter;
      const shader = {
        uniforms: {
          tEquirect: { value: null }
        },
        vertexShader: (
          /* glsl */
          `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
        ),
        fragmentShader: (
          /* glsl */
          `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        )
      };
      const geometry = new BoxGeometry(5, 5, 5);
      const material = new ShaderMaterial({
        name: "CubemapFromEquirect",
        uniforms: cloneUniforms(shader.uniforms),
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader,
        side: BackSide,
        blending: NoBlending
      });
      material.uniforms.tEquirect.value = texture;
      const mesh = new Mesh(geometry, material);
      const currentMinFilter = texture.minFilter;
      if (texture.minFilter === LinearMipmapLinearFilter)
        texture.minFilter = LinearFilter;
      const camera = new CubeCamera(1, 10, this);
      camera.update(renderer, mesh);
      texture.minFilter = currentMinFilter;
      mesh.geometry.dispose();
      mesh.material.dispose();
      return this;
    }
    clear(renderer, color, depth, stencil) {
      const currentRenderTarget = renderer.getRenderTarget();
      for (let i = 0; i < 6; i++) {
        renderer.setRenderTarget(this, i);
        renderer.clear(color, depth, stencil);
      }
      renderer.setRenderTarget(currentRenderTarget);
    }
  };
  var Group = class extends Object3D {
    constructor() {
      super();
      this.isGroup = true;
      this.type = "Group";
    }
  };
  var _moveEvent = { type: "move" };
  var WebXRController = class {
    constructor() {
      this._targetRay = null;
      this._grip = null;
      this._hand = null;
    }
    getHandSpace() {
      if (this._hand === null) {
        this._hand = new Group();
        this._hand.matrixAutoUpdate = false;
        this._hand.visible = false;
        this._hand.joints = {};
        this._hand.inputState = { pinching: false };
      }
      return this._hand;
    }
    getTargetRaySpace() {
      if (this._targetRay === null) {
        this._targetRay = new Group();
        this._targetRay.matrixAutoUpdate = false;
        this._targetRay.visible = false;
        this._targetRay.hasLinearVelocity = false;
        this._targetRay.linearVelocity = new Vector3();
        this._targetRay.hasAngularVelocity = false;
        this._targetRay.angularVelocity = new Vector3();
      }
      return this._targetRay;
    }
    getGripSpace() {
      if (this._grip === null) {
        this._grip = new Group();
        this._grip.matrixAutoUpdate = false;
        this._grip.visible = false;
        this._grip.hasLinearVelocity = false;
        this._grip.linearVelocity = new Vector3();
        this._grip.hasAngularVelocity = false;
        this._grip.angularVelocity = new Vector3();
      }
      return this._grip;
    }
    dispatchEvent(event) {
      if (this._targetRay !== null) {
        this._targetRay.dispatchEvent(event);
      }
      if (this._grip !== null) {
        this._grip.dispatchEvent(event);
      }
      if (this._hand !== null) {
        this._hand.dispatchEvent(event);
      }
      return this;
    }
    connect(inputSource) {
      if (inputSource && inputSource.hand) {
        const hand = this._hand;
        if (hand) {
          for (const inputjoint of inputSource.hand.values()) {
            this._getHandJoint(hand, inputjoint);
          }
        }
      }
      this.dispatchEvent({ type: "connected", data: inputSource });
      return this;
    }
    disconnect(inputSource) {
      this.dispatchEvent({ type: "disconnected", data: inputSource });
      if (this._targetRay !== null) {
        this._targetRay.visible = false;
      }
      if (this._grip !== null) {
        this._grip.visible = false;
      }
      if (this._hand !== null) {
        this._hand.visible = false;
      }
      return this;
    }
    update(inputSource, frame, referenceSpace) {
      let inputPose = null;
      let gripPose = null;
      let handPose = null;
      const targetRay = this._targetRay;
      const grip = this._grip;
      const hand = this._hand;
      if (inputSource && frame.session.visibilityState !== "visible-blurred") {
        if (hand && inputSource.hand) {
          handPose = true;
          for (const inputjoint of inputSource.hand.values()) {
            const jointPose = frame.getJointPose(inputjoint, referenceSpace);
            const joint = this._getHandJoint(hand, inputjoint);
            if (jointPose !== null) {
              joint.matrix.fromArray(jointPose.transform.matrix);
              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
              joint.matrixWorldNeedsUpdate = true;
              joint.jointRadius = jointPose.radius;
            }
            joint.visible = jointPose !== null;
          }
          const indexTip = hand.joints["index-finger-tip"];
          const thumbTip = hand.joints["thumb-tip"];
          const distance = indexTip.position.distanceTo(thumbTip.position);
          const distanceToPinch = 0.02;
          const threshold = 5e-3;
          if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
            hand.inputState.pinching = false;
            this.dispatchEvent({
              type: "pinchend",
              handedness: inputSource.handedness,
              target: this
            });
          } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
            hand.inputState.pinching = true;
            this.dispatchEvent({
              type: "pinchstart",
              handedness: inputSource.handedness,
              target: this
            });
          }
        } else {
          if (grip !== null && inputSource.gripSpace) {
            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
            if (gripPose !== null) {
              grip.matrix.fromArray(gripPose.transform.matrix);
              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
              grip.matrixWorldNeedsUpdate = true;
              if (gripPose.linearVelocity) {
                grip.hasLinearVelocity = true;
                grip.linearVelocity.copy(gripPose.linearVelocity);
              } else {
                grip.hasLinearVelocity = false;
              }
              if (gripPose.angularVelocity) {
                grip.hasAngularVelocity = true;
                grip.angularVelocity.copy(gripPose.angularVelocity);
              } else {
                grip.hasAngularVelocity = false;
              }
            }
          }
        }
        if (targetRay !== null) {
          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
          if (inputPose === null && gripPose !== null) {
            inputPose = gripPose;
          }
          if (inputPose !== null) {
            targetRay.matrix.fromArray(inputPose.transform.matrix);
            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
            targetRay.matrixWorldNeedsUpdate = true;
            if (inputPose.linearVelocity) {
              targetRay.hasLinearVelocity = true;
              targetRay.linearVelocity.copy(inputPose.linearVelocity);
            } else {
              targetRay.hasLinearVelocity = false;
            }
            if (inputPose.angularVelocity) {
              targetRay.hasAngularVelocity = true;
              targetRay.angularVelocity.copy(inputPose.angularVelocity);
            } else {
              targetRay.hasAngularVelocity = false;
            }
            this.dispatchEvent(_moveEvent);
          }
        }
      }
      if (targetRay !== null) {
        targetRay.visible = inputPose !== null;
      }
      if (grip !== null) {
        grip.visible = gripPose !== null;
      }
      if (hand !== null) {
        hand.visible = handPose !== null;
      }
      return this;
    }
    // private method
    _getHandJoint(hand, inputjoint) {
      if (hand.joints[inputjoint.jointName] === void 0) {
        const joint = new Group();
        joint.matrixAutoUpdate = false;
        joint.visible = false;
        hand.joints[inputjoint.jointName] = joint;
        hand.add(joint);
      }
      return hand.joints[inputjoint.jointName];
    }
  };
  var Scene = class extends Object3D {
    constructor() {
      super();
      this.isScene = true;
      this.type = "Scene";
      this.background = null;
      this.environment = null;
      this.fog = null;
      this.backgroundBlurriness = 0;
      this.backgroundIntensity = 1;
      this.backgroundRotation = new Euler();
      this.environmentIntensity = 1;
      this.environmentRotation = new Euler();
      this.overrideMaterial = null;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.background !== null)
        this.background = source.background.clone();
      if (source.environment !== null)
        this.environment = source.environment.clone();
      if (source.fog !== null)
        this.fog = source.fog.clone();
      this.backgroundBlurriness = source.backgroundBlurriness;
      this.backgroundIntensity = source.backgroundIntensity;
      this.backgroundRotation.copy(source.backgroundRotation);
      this.environmentIntensity = source.environmentIntensity;
      this.environmentRotation.copy(source.environmentRotation);
      if (source.overrideMaterial !== null)
        this.overrideMaterial = source.overrideMaterial.clone();
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.fog !== null)
        data.object.fog = this.fog.toJSON();
      if (this.backgroundBlurriness > 0)
        data.object.backgroundBlurriness = this.backgroundBlurriness;
      if (this.backgroundIntensity !== 1)
        data.object.backgroundIntensity = this.backgroundIntensity;
      data.object.backgroundRotation = this.backgroundRotation.toArray();
      if (this.environmentIntensity !== 1)
        data.object.environmentIntensity = this.environmentIntensity;
      data.object.environmentRotation = this.environmentRotation.toArray();
      return data;
    }
  };
  var _vector1 = /* @__PURE__ */ new Vector3();
  var _vector2 = /* @__PURE__ */ new Vector3();
  var _normalMatrix = /* @__PURE__ */ new Matrix3();
  var Plane = class {
    constructor(normal = new Vector3(1, 0, 0), constant = 0) {
      this.isPlane = true;
      this.normal = normal;
      this.constant = constant;
    }
    set(normal, constant) {
      this.normal.copy(normal);
      this.constant = constant;
      return this;
    }
    setComponents(x, y, z, w) {
      this.normal.set(x, y, z);
      this.constant = w;
      return this;
    }
    setFromNormalAndCoplanarPoint(normal, point) {
      this.normal.copy(normal);
      this.constant = -point.dot(this.normal);
      return this;
    }
    setFromCoplanarPoints(a, b, c) {
      const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
      this.setFromNormalAndCoplanarPoint(normal, a);
      return this;
    }
    copy(plane) {
      this.normal.copy(plane.normal);
      this.constant = plane.constant;
      return this;
    }
    normalize() {
      const inverseNormalLength = 1 / this.normal.length();
      this.normal.multiplyScalar(inverseNormalLength);
      this.constant *= inverseNormalLength;
      return this;
    }
    negate() {
      this.constant *= -1;
      this.normal.negate();
      return this;
    }
    distanceToPoint(point) {
      return this.normal.dot(point) + this.constant;
    }
    distanceToSphere(sphere) {
      return this.distanceToPoint(sphere.center) - sphere.radius;
    }
    projectPoint(point, target) {
      return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
    }
    intersectLine(line, target) {
      const direction = line.delta(_vector1);
      const denominator = this.normal.dot(direction);
      if (denominator === 0) {
        if (this.distanceToPoint(line.start) === 0) {
          return target.copy(line.start);
        }
        return null;
      }
      const t = -(line.start.dot(this.normal) + this.constant) / denominator;
      if (t < 0 || t > 1) {
        return null;
      }
      return target.copy(line.start).addScaledVector(direction, t);
    }
    intersectsLine(line) {
      const startSign = this.distanceToPoint(line.start);
      const endSign = this.distanceToPoint(line.end);
      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box) {
      return box.intersectsPlane(this);
    }
    intersectsSphere(sphere) {
      return sphere.intersectsPlane(this);
    }
    coplanarPoint(target) {
      return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix, optionalNormalMatrix) {
      const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
      const normal = this.normal.applyMatrix3(normalMatrix).normalize();
      this.constant = -referencePoint.dot(normal);
      return this;
    }
    translate(offset) {
      this.constant -= offset.dot(this.normal);
      return this;
    }
    equals(plane) {
      return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _sphere$3 = /* @__PURE__ */ new Sphere();
  var _vector$6 = /* @__PURE__ */ new Vector3();
  var Frustum = class {
    constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
      this.planes = [p0, p1, p2, p3, p4, p5];
    }
    set(p0, p1, p2, p3, p4, p5) {
      const planes = this.planes;
      planes[0].copy(p0);
      planes[1].copy(p1);
      planes[2].copy(p2);
      planes[3].copy(p3);
      planes[4].copy(p4);
      planes[5].copy(p5);
      return this;
    }
    copy(frustum) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        planes[i].copy(frustum.planes[i]);
      }
      return this;
    }
    setFromProjectionMatrix(m, coordinateSystem = WebGLCoordinateSystem) {
      const planes = this.planes;
      const me = m.elements;
      const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
      const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
      const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
      const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
      if (coordinateSystem === WebGLCoordinateSystem) {
        planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        planes[5].setComponents(me2, me6, me10, me14).normalize();
      } else {
        throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
      }
      return this;
    }
    intersectsObject(object) {
      if (object.boundingSphere !== void 0) {
        if (object.boundingSphere === null)
          object.computeBoundingSphere();
        _sphere$3.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
      } else {
        const geometry = object.geometry;
        if (geometry.boundingSphere === null)
          geometry.computeBoundingSphere();
        _sphere$3.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
      }
      return this.intersectsSphere(_sphere$3);
    }
    intersectsSprite(sprite) {
      _sphere$3.center.set(0, 0, 0);
      _sphere$3.radius = 0.7071067811865476;
      _sphere$3.applyMatrix4(sprite.matrixWorld);
      return this.intersectsSphere(_sphere$3);
    }
    intersectsSphere(sphere) {
      const planes = this.planes;
      const center = sphere.center;
      const negRadius = -sphere.radius;
      for (let i = 0; i < 6; i++) {
        const distance = planes[i].distanceToPoint(center);
        if (distance < negRadius) {
          return false;
        }
      }
      return true;
    }
    intersectsBox(box) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        const plane = planes[i];
        _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
        _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
        _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;
        if (plane.distanceToPoint(_vector$6) < 0) {
          return false;
        }
      }
      return true;
    }
    containsPoint(point) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        if (planes[i].distanceToPoint(point) < 0) {
          return false;
        }
      }
      return true;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var DepthTexture = class extends Texture {
    constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format = DepthFormat) {
      if (format !== DepthFormat && format !== DepthStencilFormat) {
        throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
      }
      if (type === void 0 && format === DepthFormat)
        type = UnsignedIntType;
      if (type === void 0 && format === DepthStencilFormat)
        type = UnsignedInt248Type;
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
      this.isDepthTexture = true;
      this.image = { width, height };
      this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
      this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
      this.flipY = false;
      this.generateMipmaps = false;
      this.compareFunction = null;
    }
    copy(source) {
      super.copy(source);
      this.compareFunction = source.compareFunction;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.compareFunction !== null)
        data.compareFunction = this.compareFunction;
      return data;
    }
  };
  var PlaneGeometry = class extends BufferGeometry {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneGeometry";
      this.parameters = {
        width,
        height,
        widthSegments,
        heightSegments
      };
      const width_half = width / 2;
      const height_half = height / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width / gridX;
      const segment_height = height / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segment_width - width_half;
          vertices.push(x, -y, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = ix + gridX1 * iy;
          const b = ix + gridX1 * (iy + 1);
          const c = ix + 1 + gridX1 * (iy + 1);
          const d = ix + 1 + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
  };
  var MeshDepthMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshDepthMaterial = true;
      this.type = "MeshDepthMaterial";
      this.depthPacking = BasicDepthPacking;
      this.map = null;
      this.alphaMap = null;
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.depthPacking = source.depthPacking;
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      return this;
    }
  };
  var MeshDistanceMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshDistanceMaterial = true;
      this.type = "MeshDistanceMaterial";
      this.map = null;
      this.alphaMap = null;
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      return this;
    }
  };
  function convertArray(array, type, forceClone) {
    if (!array || // let 'undefined' and 'null' pass
    !forceClone && array.constructor === type)
      return array;
    if (typeof type.BYTES_PER_ELEMENT === "number") {
      return new type(array);
    }
    return Array.prototype.slice.call(array);
  }
  function isTypedArray(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
  }
  var Interpolant = class {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      this.parameterPositions = parameterPositions;
      this._cachedIndex = 0;
      this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
      this.sampleValues = sampleValues;
      this.valueSize = sampleSize;
      this.settings = null;
      this.DefaultSettings_ = {};
    }
    evaluate(t) {
      const pp = this.parameterPositions;
      let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
      validate_interval: {
        seek: {
          let right;
          linear_scan: {
            forward_scan:
              if (!(t < t1)) {
                for (let giveUpAt = i1 + 2; ; ) {
                  if (t1 === void 0) {
                    if (t < t0)
                      break forward_scan;
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.copySampleValue_(i1 - 1);
                  }
                  if (i1 === giveUpAt)
                    break;
                  t0 = t1;
                  t1 = pp[++i1];
                  if (t < t1) {
                    break seek;
                  }
                }
                right = pp.length;
                break linear_scan;
              }
            if (!(t >= t0)) {
              const t1global = pp[1];
              if (t < t1global) {
                i1 = 2;
                t0 = t1global;
              }
              for (let giveUpAt = i1 - 2; ; ) {
                if (t0 === void 0) {
                  this._cachedIndex = 0;
                  return this.copySampleValue_(0);
                }
                if (i1 === giveUpAt)
                  break;
                t1 = t0;
                t0 = pp[--i1 - 1];
                if (t >= t0) {
                  break seek;
                }
              }
              right = i1;
              i1 = 0;
              break linear_scan;
            }
            break validate_interval;
          }
          while (i1 < right) {
            const mid = i1 + right >>> 1;
            if (t < pp[mid]) {
              right = mid;
            } else {
              i1 = mid + 1;
            }
          }
          t1 = pp[i1];
          t0 = pp[i1 - 1];
          if (t0 === void 0) {
            this._cachedIndex = 0;
            return this.copySampleValue_(0);
          }
          if (t1 === void 0) {
            i1 = pp.length;
            this._cachedIndex = i1;
            return this.copySampleValue_(i1 - 1);
          }
        }
        this._cachedIndex = i1;
        this.intervalChanged_(i1, t0, t1);
      }
      return this.interpolate_(i1, t0, t, t1);
    }
    getSettings_() {
      return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(index) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset + i];
      }
      return result;
    }
    // Template methods for derived classes:
    interpolate_() {
      throw new Error("call to abstract method");
    }
    intervalChanged_() {
    }
  };
  var CubicInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      this._weightPrev = -0;
      this._offsetPrev = -0;
      this._weightNext = -0;
      this._offsetNext = -0;
      this.DefaultSettings_ = {
        endingStart: ZeroCurvatureEnding,
        endingEnd: ZeroCurvatureEnding
      };
    }
    intervalChanged_(i1, t0, t1) {
      const pp = this.parameterPositions;
      let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
      if (tPrev === void 0) {
        switch (this.getSettings_().endingStart) {
          case ZeroSlopeEnding:
            iPrev = i1;
            tPrev = 2 * t0 - t1;
            break;
          case WrapAroundEnding:
            iPrev = pp.length - 2;
            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
            break;
          default:
            iPrev = i1;
            tPrev = t1;
        }
      }
      if (tNext === void 0) {
        switch (this.getSettings_().endingEnd) {
          case ZeroSlopeEnding:
            iNext = i1;
            tNext = 2 * t1 - t0;
            break;
          case WrapAroundEnding:
            iNext = 1;
            tNext = t1 + pp[1] - pp[0];
            break;
          default:
            iNext = i1 - 1;
            tNext = t0;
        }
      }
      const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
      this._weightPrev = halfDt / (t0 - tPrev);
      this._weightNext = halfDt / (tNext - t1);
      this._offsetPrev = iPrev * stride;
      this._offsetNext = iNext * stride;
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
      const sP = -wP * ppp + 2 * wP * pp - wP * p;
      const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
      const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
      const sN = wN * ppp - wN * pp;
      for (let i = 0; i !== stride; ++i) {
        result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
      }
      return result;
    }
  };
  var LinearInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
      }
      return result;
    }
  };
  var DiscreteInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1) {
      return this.copySampleValue_(i1 - 1);
    }
  };
  var KeyframeTrack = class {
    constructor(name, times, values, interpolation) {
      if (name === void 0)
        throw new Error("THREE.KeyframeTrack: track name is undefined");
      if (times === void 0 || times.length === 0)
        throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
      this.name = name;
      this.times = convertArray(times, this.TimeBufferType);
      this.values = convertArray(values, this.ValueBufferType);
      this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    // Serialization (in static context, because of constructor invocation
    // and automatic invocation of .toJSON):
    static toJSON(track) {
      const trackType = track.constructor;
      let json;
      if (trackType.toJSON !== this.toJSON) {
        json = trackType.toJSON(track);
      } else {
        json = {
          "name": track.name,
          "times": convertArray(track.times, Array),
          "values": convertArray(track.values, Array)
        };
        const interpolation = track.getInterpolation();
        if (interpolation !== track.DefaultInterpolation) {
          json.interpolation = interpolation;
        }
      }
      json.type = track.ValueTypeName;
      return json;
    }
    InterpolantFactoryMethodDiscrete(result) {
      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodLinear(result) {
      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodSmooth(result) {
      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    setInterpolation(interpolation) {
      let factoryMethod;
      switch (interpolation) {
        case InterpolateDiscrete:
          factoryMethod = this.InterpolantFactoryMethodDiscrete;
          break;
        case InterpolateLinear:
          factoryMethod = this.InterpolantFactoryMethodLinear;
          break;
        case InterpolateSmooth:
          factoryMethod = this.InterpolantFactoryMethodSmooth;
          break;
      }
      if (factoryMethod === void 0) {
        const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
        if (this.createInterpolant === void 0) {
          if (interpolation !== this.DefaultInterpolation) {
            this.setInterpolation(this.DefaultInterpolation);
          } else {
            throw new Error(message);
          }
        }
        console.warn("THREE.KeyframeTrack:", message);
        return this;
      }
      this.createInterpolant = factoryMethod;
      return this;
    }
    getInterpolation() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return InterpolateDiscrete;
        case this.InterpolantFactoryMethodLinear:
          return InterpolateLinear;
        case this.InterpolantFactoryMethodSmooth:
          return InterpolateSmooth;
      }
    }
    getValueSize() {
      return this.values.length / this.times.length;
    }
    // move all keyframes either forwards or backwards in time
    shift(timeOffset) {
      if (timeOffset !== 0) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] += timeOffset;
        }
      }
      return this;
    }
    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
    scale(timeScale) {
      if (timeScale !== 1) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] *= timeScale;
        }
      }
      return this;
    }
    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
    trim(startTime, endTime) {
      const times = this.times, nKeys = times.length;
      let from = 0, to = nKeys - 1;
      while (from !== nKeys && times[from] < startTime) {
        ++from;
      }
      while (to !== -1 && times[to] > endTime) {
        --to;
      }
      ++to;
      if (from !== 0 || to !== nKeys) {
        if (from >= to) {
          to = Math.max(to, 1);
          from = to - 1;
        }
        const stride = this.getValueSize();
        this.times = times.slice(from, to);
        this.values = this.values.slice(from * stride, to * stride);
      }
      return this;
    }
    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
    validate() {
      let valid = true;
      const valueSize = this.getValueSize();
      if (valueSize - Math.floor(valueSize) !== 0) {
        console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
        valid = false;
      }
      const times = this.times, values = this.values, nKeys = times.length;
      if (nKeys === 0) {
        console.error("THREE.KeyframeTrack: Track is empty.", this);
        valid = false;
      }
      let prevTime = null;
      for (let i = 0; i !== nKeys; i++) {
        const currTime = times[i];
        if (typeof currTime === "number" && isNaN(currTime)) {
          console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
          valid = false;
          break;
        }
        if (prevTime !== null && prevTime > currTime) {
          console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
          valid = false;
          break;
        }
        prevTime = currTime;
      }
      if (values !== void 0) {
        if (isTypedArray(values)) {
          for (let i = 0, n = values.length; i !== n; ++i) {
            const value = values[i];
            if (isNaN(value)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
              valid = false;
              break;
            }
          }
        }
      }
      return valid;
    }
    // removes equivalent sequential keys as common in morph target sequences
    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
    optimize() {
      const times = this.times.slice(), values = this.values.slice(), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
      let writeIndex = 1;
      for (let i = 1; i < lastIndex; ++i) {
        let keep = false;
        const time = times[i];
        const timeNext = times[i + 1];
        if (time !== timeNext && (i !== 1 || time !== times[0])) {
          if (!smoothInterpolation) {
            const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
            for (let j = 0; j !== stride; ++j) {
              const value = values[offset + j];
              if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                keep = true;
                break;
              }
            }
          } else {
            keep = true;
          }
        }
        if (keep) {
          if (i !== writeIndex) {
            times[writeIndex] = times[i];
            const readOffset = i * stride, writeOffset = writeIndex * stride;
            for (let j = 0; j !== stride; ++j) {
              values[writeOffset + j] = values[readOffset + j];
            }
          }
          ++writeIndex;
        }
      }
      if (lastIndex > 0) {
        times[writeIndex] = times[lastIndex];
        for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
          values[writeOffset + j] = values[readOffset + j];
        }
        ++writeIndex;
      }
      if (writeIndex !== times.length) {
        this.times = times.slice(0, writeIndex);
        this.values = values.slice(0, writeIndex * stride);
      } else {
        this.times = times;
        this.values = values;
      }
      return this;
    }
    clone() {
      const times = this.times.slice();
      const values = this.values.slice();
      const TypedKeyframeTrack = this.constructor;
      const track = new TypedKeyframeTrack(this.name, times, values);
      track.createInterpolant = this.createInterpolant;
      return track;
    }
  };
  KeyframeTrack.prototype.TimeBufferType = Float32Array;
  KeyframeTrack.prototype.ValueBufferType = Float32Array;
  KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
  var BooleanKeyframeTrack = class extends KeyframeTrack {
    // No interpolation parameter because only InterpolateDiscrete is valid.
    constructor(name, times, values) {
      super(name, times, values);
    }
  };
  BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
  BooleanKeyframeTrack.prototype.ValueBufferType = Array;
  BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var ColorKeyframeTrack = class extends KeyframeTrack {
  };
  ColorKeyframeTrack.prototype.ValueTypeName = "color";
  var NumberKeyframeTrack = class extends KeyframeTrack {
  };
  NumberKeyframeTrack.prototype.ValueTypeName = "number";
  var QuaternionLinearInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
      let offset = i1 * stride;
      for (let end = offset + stride; offset !== end; offset += 4) {
        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
      }
      return result;
    }
  };
  var QuaternionKeyframeTrack = class extends KeyframeTrack {
    InterpolantFactoryMethodLinear(result) {
      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
  };
  QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
  QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var StringKeyframeTrack = class extends KeyframeTrack {
    // No interpolation parameter because only InterpolateDiscrete is valid.
    constructor(name, times, values) {
      super(name, times, values);
    }
  };
  StringKeyframeTrack.prototype.ValueTypeName = "string";
  StringKeyframeTrack.prototype.ValueBufferType = Array;
  StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var VectorKeyframeTrack = class extends KeyframeTrack {
  };
  VectorKeyframeTrack.prototype.ValueTypeName = "vector";
  var Cache = {
    enabled: false,
    files: {},
    add: function(key, file) {
      if (this.enabled === false)
        return;
      this.files[key] = file;
    },
    get: function(key) {
      if (this.enabled === false)
        return;
      return this.files[key];
    },
    remove: function(key) {
      delete this.files[key];
    },
    clear: function() {
      this.files = {};
    }
  };
  var LoadingManager = class {
    constructor(onLoad, onProgress, onError) {
      const scope = this;
      let isLoading = false;
      let itemsLoaded = 0;
      let itemsTotal = 0;
      let urlModifier = void 0;
      const handlers = [];
      this.onStart = void 0;
      this.onLoad = onLoad;
      this.onProgress = onProgress;
      this.onError = onError;
      this.itemStart = function(url) {
        itemsTotal++;
        if (isLoading === false) {
          if (scope.onStart !== void 0) {
            scope.onStart(url, itemsLoaded, itemsTotal);
          }
        }
        isLoading = true;
      };
      this.itemEnd = function(url) {
        itemsLoaded++;
        if (scope.onProgress !== void 0) {
          scope.onProgress(url, itemsLoaded, itemsTotal);
        }
        if (itemsLoaded === itemsTotal) {
          isLoading = false;
          if (scope.onLoad !== void 0) {
            scope.onLoad();
          }
        }
      };
      this.itemError = function(url) {
        if (scope.onError !== void 0) {
          scope.onError(url);
        }
      };
      this.resolveURL = function(url) {
        if (urlModifier) {
          return urlModifier(url);
        }
        return url;
      };
      this.setURLModifier = function(transform) {
        urlModifier = transform;
        return this;
      };
      this.addHandler = function(regex, loader) {
        handlers.push(regex, loader);
        return this;
      };
      this.removeHandler = function(regex) {
        const index = handlers.indexOf(regex);
        if (index !== -1) {
          handlers.splice(index, 2);
        }
        return this;
      };
      this.getHandler = function(file) {
        for (let i = 0, l = handlers.length; i < l; i += 2) {
          const regex = handlers[i];
          const loader = handlers[i + 1];
          if (regex.global)
            regex.lastIndex = 0;
          if (regex.test(file)) {
            return loader;
          }
        }
        return null;
      };
    }
  };
  var DefaultLoadingManager = /* @__PURE__ */ new LoadingManager();
  var Loader = class {
    constructor(manager) {
      this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
      this.crossOrigin = "anonymous";
      this.withCredentials = false;
      this.path = "";
      this.resourcePath = "";
      this.requestHeader = {};
    }
    load() {
    }
    loadAsync(url, onProgress) {
      const scope = this;
      return new Promise(function(resolve, reject) {
        scope.load(url, resolve, onProgress, reject);
      });
    }
    parse() {
    }
    setCrossOrigin(crossOrigin) {
      this.crossOrigin = crossOrigin;
      return this;
    }
    setWithCredentials(value) {
      this.withCredentials = value;
      return this;
    }
    setPath(path) {
      this.path = path;
      return this;
    }
    setResourcePath(resourcePath) {
      this.resourcePath = resourcePath;
      return this;
    }
    setRequestHeader(requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }
  };
  Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
  var ImageLoader = class extends Loader {
    constructor(manager) {
      super(manager);
    }
    load(url, onLoad, onProgress, onError) {
      if (this.path !== void 0)
        url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad)
            onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      const image = createElementNS("img");
      function onImageLoad() {
        removeEventListeners();
        Cache.add(url, this);
        if (onLoad)
          onLoad(this);
        scope.manager.itemEnd(url);
      }
      function onImageError(event) {
        removeEventListeners();
        if (onError)
          onError(event);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }
      function removeEventListeners() {
        image.removeEventListener("load", onImageLoad, false);
        image.removeEventListener("error", onImageError, false);
      }
      image.addEventListener("load", onImageLoad, false);
      image.addEventListener("error", onImageError, false);
      if (url.slice(0, 5) !== "data:") {
        if (this.crossOrigin !== void 0)
          image.crossOrigin = this.crossOrigin;
      }
      scope.manager.itemStart(url);
      image.src = url;
      return image;
    }
  };
  var TextureLoader = class extends Loader {
    constructor(manager) {
      super(manager);
    }
    load(url, onLoad, onProgress, onError) {
      const texture = new Texture();
      const loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      loader.load(url, function(image) {
        texture.image = image;
        texture.needsUpdate = true;
        if (onLoad !== void 0) {
          onLoad(texture);
        }
      }, onProgress, onError);
      return texture;
    }
  };
  var OrthographicCamera = class extends Camera {
    constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
      super();
      this.isOrthographicCamera = true;
      this.type = "OrthographicCamera";
      this.zoom = 1;
      this.view = null;
      this.left = left;
      this.right = right;
      this.top = top;
      this.bottom = bottom;
      this.near = near;
      this.far = far;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.left = source.left;
      this.right = source.right;
      this.top = source.top;
      this.bottom = source.bottom;
      this.near = source.near;
      this.far = source.far;
      this.zoom = source.zoom;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      return this;
    }
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const dx = (this.right - this.left) / (2 * this.zoom);
      const dy = (this.top - this.bottom) / (2 * this.zoom);
      const cx = (this.right + this.left) / 2;
      const cy = (this.top + this.bottom) / 2;
      let left = cx - dx;
      let right = cx + dx;
      let top = cy + dy;
      let bottom = cy - dy;
      if (this.view !== null && this.view.enabled) {
        const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
        const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
        left += scaleW * this.view.offsetX;
        right = left + scaleW * this.view.width;
        top -= scaleH * this.view.offsetY;
        bottom = top - scaleH * this.view.height;
      }
      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.zoom = this.zoom;
      data.object.left = this.left;
      data.object.right = this.right;
      data.object.top = this.top;
      data.object.bottom = this.bottom;
      data.object.near = this.near;
      data.object.far = this.far;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      return data;
    }
  };
  var ArrayCamera = class extends PerspectiveCamera {
    constructor(array = []) {
      super();
      this.isArrayCamera = true;
      this.cameras = array;
      this.index = 0;
    }
  };
  var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
  var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
  var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
  var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
  var _directoryRe = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
  var _nodeRe = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
  var _objectRe = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
  var _propertyRe = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
  var _trackRe = new RegExp(
    "^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$"
  );
  var _supportedObjectNames = ["material", "materials", "bones", "map"];
  var Composite = class {
    constructor(targetGroup, path, optionalParsedPath) {
      const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
      this._targetGroup = targetGroup;
      this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    getValue(array, offset) {
      this.bind();
      const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
      if (binding !== void 0)
        binding.getValue(array, offset);
    }
    setValue(array, offset) {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].setValue(array, offset);
      }
    }
    bind() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].bind();
      }
    }
    unbind() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].unbind();
      }
    }
  };
  var PropertyBinding = class {
    constructor(rootNode, path, parsedPath) {
      this.path = path;
      this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
      this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
      this.rootNode = rootNode;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
    static create(root, path, parsedPath) {
      if (!(root && root.isAnimationObjectGroup)) {
        return new PropertyBinding(root, path, parsedPath);
      } else {
        return new PropertyBinding.Composite(root, path, parsedPath);
      }
    }
    /**
     * Replaces spaces with underscores and removes unsupported characters from
     * node names, to ensure compatibility with parseTrackName().
     *
     * @param {string} name Node name to be sanitized.
     * @return {string}
     */
    static sanitizeNodeName(name) {
      return name.replace(/\s/g, "_").replace(_reservedRe, "");
    }
    static parseTrackName(trackName) {
      const matches = _trackRe.exec(trackName);
      if (matches === null) {
        throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
      }
      const results = {
        // directoryName: matches[ 1 ], // (tschw) currently unused
        nodeName: matches[2],
        objectName: matches[3],
        objectIndex: matches[4],
        propertyName: matches[5],
        // required
        propertyIndex: matches[6]
      };
      const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
      if (lastDot !== void 0 && lastDot !== -1) {
        const objectName = results.nodeName.substring(lastDot + 1);
        if (_supportedObjectNames.indexOf(objectName) !== -1) {
          results.nodeName = results.nodeName.substring(0, lastDot);
          results.objectName = objectName;
        }
      }
      if (results.propertyName === null || results.propertyName.length === 0) {
        throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
      }
      return results;
    }
    static findNode(root, nodeName) {
      if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
        return root;
      }
      if (root.skeleton) {
        const bone = root.skeleton.getBoneByName(nodeName);
        if (bone !== void 0) {
          return bone;
        }
      }
      if (root.children) {
        const searchNodeSubtree = function(children) {
          for (let i = 0; i < children.length; i++) {
            const childNode = children[i];
            if (childNode.name === nodeName || childNode.uuid === nodeName) {
              return childNode;
            }
            const result = searchNodeSubtree(childNode.children);
            if (result)
              return result;
          }
          return null;
        };
        const subTreeNode = searchNodeSubtree(root.children);
        if (subTreeNode) {
          return subTreeNode;
        }
      }
      return null;
    }
    // these are used to "bind" a nonexistent property
    _getValue_unavailable() {
    }
    _setValue_unavailable() {
    }
    // Getters
    _getValue_direct(buffer, offset) {
      buffer[offset] = this.targetObject[this.propertyName];
    }
    _getValue_array(buffer, offset) {
      const source = this.resolvedProperty;
      for (let i = 0, n = source.length; i !== n; ++i) {
        buffer[offset++] = source[i];
      }
    }
    _getValue_arrayElement(buffer, offset) {
      buffer[offset] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(buffer, offset) {
      this.resolvedProperty.toArray(buffer, offset);
    }
    // Direct
    _setValue_direct(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
    }
    _setValue_direct_setNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // EntireArray
    _setValue_array(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer[offset++];
      }
    }
    _setValue_array_setNeedsUpdate(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer[offset++];
      }
      this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer[offset++];
      }
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // ArrayElement
    _setValue_arrayElement(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
    }
    _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // HasToFromArray
    _setValue_fromArray(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
    }
    _setValue_fromArray_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(targetArray, offset) {
      this.bind();
      this.getValue(targetArray, offset);
    }
    _setValue_unbound(sourceArray, offset) {
      this.bind();
      this.setValue(sourceArray, offset);
    }
    // create getter / setter pair for a property in the scene graph
    bind() {
      let targetObject = this.node;
      const parsedPath = this.parsedPath;
      const objectName = parsedPath.objectName;
      const propertyName = parsedPath.propertyName;
      let propertyIndex = parsedPath.propertyIndex;
      if (!targetObject) {
        targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
        this.node = targetObject;
      }
      this.getValue = this._getValue_unavailable;
      this.setValue = this._setValue_unavailable;
      if (!targetObject) {
        console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
        return;
      }
      if (objectName) {
        let objectIndex = parsedPath.objectIndex;
        switch (objectName) {
          case "materials":
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            targetObject = targetObject.material.materials;
            break;
          case "bones":
            if (!targetObject.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            targetObject = targetObject.skeleton.bones;
            for (let i = 0; i < targetObject.length; i++) {
              if (targetObject[i].name === objectIndex) {
                objectIndex = i;
                break;
              }
            }
            break;
          case "map":
            if ("map" in targetObject) {
              targetObject = targetObject.map;
              break;
            }
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.map) {
              console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
              return;
            }
            targetObject = targetObject.material.map;
            break;
          default:
            if (targetObject[objectName] === void 0) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            targetObject = targetObject[objectName];
        }
        if (objectIndex !== void 0) {
          if (targetObject[objectIndex] === void 0) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
            return;
          }
          targetObject = targetObject[objectIndex];
        }
      }
      const nodeProperty = targetObject[propertyName];
      if (nodeProperty === void 0) {
        const nodeName = parsedPath.nodeName;
        console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
        return;
      }
      let versioning = this.Versioning.None;
      this.targetObject = targetObject;
      if (targetObject.isMaterial === true) {
        versioning = this.Versioning.NeedsUpdate;
      } else if (targetObject.isObject3D === true) {
        versioning = this.Versioning.MatrixWorldNeedsUpdate;
      }
      let bindingType = this.BindingType.Direct;
      if (propertyIndex !== void 0) {
        if (propertyName === "morphTargetInfluences") {
          if (!targetObject.geometry) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            return;
          }
          if (!targetObject.geometry.morphAttributes) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
            return;
          }
          if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
            propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
          }
        }
        bindingType = this.BindingType.ArrayElement;
        this.resolvedProperty = nodeProperty;
        this.propertyIndex = propertyIndex;
      } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
        bindingType = this.BindingType.HasFromToArray;
        this.resolvedProperty = nodeProperty;
      } else if (Array.isArray(nodeProperty)) {
        bindingType = this.BindingType.EntireArray;
        this.resolvedProperty = nodeProperty;
      } else {
        this.propertyName = propertyName;
      }
      this.getValue = this.GetterByBindingType[bindingType];
      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
    unbind() {
      this.node = null;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
  };
  PropertyBinding.Composite = Composite;
  PropertyBinding.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  };
  PropertyBinding.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  };
  PropertyBinding.prototype.GetterByBindingType = [
    PropertyBinding.prototype._getValue_direct,
    PropertyBinding.prototype._getValue_array,
    PropertyBinding.prototype._getValue_arrayElement,
    PropertyBinding.prototype._getValue_toArray
  ];
  PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
    [
      // Direct
      PropertyBinding.prototype._setValue_direct,
      PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
      PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
      // EntireArray
      PropertyBinding.prototype._setValue_array,
      PropertyBinding.prototype._setValue_array_setNeedsUpdate,
      PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
      // ArrayElement
      PropertyBinding.prototype._setValue_arrayElement,
      PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
      PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
      // HasToFromArray
      PropertyBinding.prototype._setValue_fromArray,
      PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
      PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
  ];
  var _controlInterpolantsResultBuffer = new Float32Array(1);
  function getByteLength(width, height, format, type) {
    const typeByteLength = getTextureTypeByteLength(type);
    switch (format) {
      case AlphaFormat:
        return width * height;
      case LuminanceFormat:
        return width * height;
      case LuminanceAlphaFormat:
        return width * height * 2;
      case RedFormat:
        return width * height / typeByteLength.components * typeByteLength.byteLength;
      case RedIntegerFormat:
        return width * height / typeByteLength.components * typeByteLength.byteLength;
      case RGFormat:
        return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
      case RGIntegerFormat:
        return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
      case RGBFormat:
        return width * height * 3 / typeByteLength.components * typeByteLength.byteLength;
      case RGBAFormat:
        return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
      case RGBAIntegerFormat:
        return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
      case RGB_S3TC_DXT1_Format:
      case RGBA_S3TC_DXT1_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
      case RGBA_S3TC_DXT3_Format:
      case RGBA_S3TC_DXT5_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
      case RGB_PVRTC_2BPPV1_Format:
      case RGBA_PVRTC_2BPPV1_Format:
        return Math.max(width, 16) * Math.max(height, 8) / 4;
      case RGB_PVRTC_4BPPV1_Format:
      case RGBA_PVRTC_4BPPV1_Format:
        return Math.max(width, 8) * Math.max(height, 8) / 2;
      case RGB_ETC1_Format:
      case RGB_ETC2_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
      case RGBA_ETC2_EAC_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
      case RGBA_ASTC_4x4_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
      case RGBA_ASTC_5x4_Format:
        return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;
      case RGBA_ASTC_5x5_Format:
        return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;
      case RGBA_ASTC_6x5_Format:
        return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;
      case RGBA_ASTC_6x6_Format:
        return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;
      case RGBA_ASTC_8x5_Format:
        return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;
      case RGBA_ASTC_8x6_Format:
        return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;
      case RGBA_ASTC_8x8_Format:
        return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;
      case RGBA_ASTC_10x5_Format:
        return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;
      case RGBA_ASTC_10x6_Format:
        return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;
      case RGBA_ASTC_10x8_Format:
        return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;
      case RGBA_ASTC_10x10_Format:
        return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;
      case RGBA_ASTC_12x10_Format:
        return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;
      case RGBA_ASTC_12x12_Format:
        return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;
      case RGBA_BPTC_Format:
      case RGB_BPTC_SIGNED_Format:
      case RGB_BPTC_UNSIGNED_Format:
        return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
      case RED_RGTC1_Format:
      case SIGNED_RED_RGTC1_Format:
        return Math.ceil(width / 4) * Math.ceil(height / 4) * 8;
      case RED_GREEN_RGTC2_Format:
      case SIGNED_RED_GREEN_RGTC2_Format:
        return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
    }
    throw new Error(
      `Unable to determine texture byte length for ${format} format.`
    );
  }
  function getTextureTypeByteLength(type) {
    switch (type) {
      case UnsignedByteType:
      case ByteType:
        return { byteLength: 1, components: 1 };
      case UnsignedShortType:
      case ShortType:
      case HalfFloatType:
        return { byteLength: 2, components: 1 };
      case UnsignedShort4444Type:
      case UnsignedShort5551Type:
        return { byteLength: 2, components: 4 };
      case UnsignedIntType:
      case IntType:
      case FloatType:
        return { byteLength: 4, components: 1 };
      case UnsignedInt5999Type:
        return { byteLength: 4, components: 3 };
    }
    throw new Error(`Unknown texture type ${type}.`);
  }
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
      revision: REVISION
    } }));
  }
  if (typeof window !== "undefined") {
    if (window.__THREE__) {
      console.warn("WARNING: Multiple instances of Three.js being imported.");
    } else {
      window.__THREE__ = REVISION;
    }
  }

  // node_modules/.pnpm/three@0.173.0/node_modules/three/build/three.module.js
  function WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
      animationLoop(time, frame);
      requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
      start: function() {
        if (isAnimating === true)
          return;
        if (animationLoop === null)
          return;
        requestId = context.requestAnimationFrame(onAnimationFrame);
        isAnimating = true;
      },
      stop: function() {
        context.cancelAnimationFrame(requestId);
        isAnimating = false;
      },
      setAnimationLoop: function(callback) {
        animationLoop = callback;
      },
      setContext: function(value) {
        context = value;
      }
    };
  }
  function WebGLAttributes(gl) {
    const buffers = /* @__PURE__ */ new WeakMap();
    function createBuffer(attribute, bufferType) {
      const array = attribute.array;
      const usage = attribute.usage;
      const size = array.byteLength;
      const buffer = gl.createBuffer();
      gl.bindBuffer(bufferType, buffer);
      gl.bufferData(bufferType, array, usage);
      attribute.onUploadCallback();
      let type;
      if (array instanceof Float32Array) {
        type = gl.FLOAT;
      } else if (array instanceof Uint16Array) {
        if (attribute.isFloat16BufferAttribute) {
          type = gl.HALF_FLOAT;
        } else {
          type = gl.UNSIGNED_SHORT;
        }
      } else if (array instanceof Int16Array) {
        type = gl.SHORT;
      } else if (array instanceof Uint32Array) {
        type = gl.UNSIGNED_INT;
      } else if (array instanceof Int32Array) {
        type = gl.INT;
      } else if (array instanceof Int8Array) {
        type = gl.BYTE;
      } else if (array instanceof Uint8Array) {
        type = gl.UNSIGNED_BYTE;
      } else if (array instanceof Uint8ClampedArray) {
        type = gl.UNSIGNED_BYTE;
      } else {
        throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array);
      }
      return {
        buffer,
        type,
        bytesPerElement: array.BYTES_PER_ELEMENT,
        version: attribute.version,
        size
      };
    }
    function updateBuffer(buffer, attribute, bufferType) {
      const array = attribute.array;
      const updateRanges = attribute.updateRanges;
      gl.bindBuffer(bufferType, buffer);
      if (updateRanges.length === 0) {
        gl.bufferSubData(bufferType, 0, array);
      } else {
        updateRanges.sort((a, b) => a.start - b.start);
        let mergeIndex = 0;
        for (let i = 1; i < updateRanges.length; i++) {
          const previousRange = updateRanges[mergeIndex];
          const range = updateRanges[i];
          if (range.start <= previousRange.start + previousRange.count + 1) {
            previousRange.count = Math.max(
              previousRange.count,
              range.start + range.count - previousRange.start
            );
          } else {
            ++mergeIndex;
            updateRanges[mergeIndex] = range;
          }
        }
        updateRanges.length = mergeIndex + 1;
        for (let i = 0, l = updateRanges.length; i < l; i++) {
          const range = updateRanges[i];
          gl.bufferSubData(
            bufferType,
            range.start * array.BYTES_PER_ELEMENT,
            array,
            range.start,
            range.count
          );
        }
        attribute.clearUpdateRanges();
      }
      attribute.onUploadCallback();
    }
    function get(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      return buffers.get(attribute);
    }
    function remove(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data) {
        gl.deleteBuffer(data.buffer);
        buffers.delete(attribute);
      }
    }
    function update(attribute, bufferType) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      if (attribute.isGLBufferAttribute) {
        const cached = buffers.get(attribute);
        if (!cached || cached.version < attribute.version) {
          buffers.set(attribute, {
            buffer: attribute.buffer,
            type: attribute.type,
            bytesPerElement: attribute.elementSize,
            version: attribute.version
          });
        }
        return;
      }
      const data = buffers.get(attribute);
      if (data === void 0) {
        buffers.set(attribute, createBuffer(attribute, bufferType));
      } else if (data.version < attribute.version) {
        if (data.size !== attribute.array.byteLength) {
          throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
        }
        updateBuffer(data.buffer, attribute, bufferType);
        data.version = attribute.version;
      }
    }
    return {
      get,
      remove,
      update
    };
  }
  var alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
  var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var alphatest_fragment = "#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif";
  var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
  var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
  var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
  var batching_pars_vertex = "#ifdef USE_BATCHING\n	#if ! defined( GL_ANGLE_multi_draw )\n	#define gl_DrawID _gl_DrawID\n	uniform int _gl_DrawID;\n	#endif\n	uniform highp sampler2D batchingTexture;\n	uniform highp usampler2D batchingIdTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n	float getIndirectIndex( const in int i ) {\n		int size = textureSize( batchingIdTexture, 0 ).x;\n		int x = i % size;\n		int y = i / size;\n		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n	}\n#endif\n#ifdef USE_BATCHING_COLOR\n	uniform sampler2D batchingColorTexture;\n	vec3 getBatchingColor( const in float i ) {\n		int size = textureSize( batchingColorTexture, 0 ).x;\n		int j = int( i );\n		int x = j % size;\n		int y = j / size;\n		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n	}\n#endif";
  var batching_vertex = "#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";
  var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
  var bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
  var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif";
  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
  var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
  var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n	vColor.xyz *= batchingColor.xyz;\n#endif";
  var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n		emissiveColor = sRGBTransferEOTF( emissiveColor );\n	#endif\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
  var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
  var colorspace_pars_fragment = "vec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
  var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
  var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
  var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
  var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
  var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
  var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
  var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
  var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if ( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
  var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n	material.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";
  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	float dispersion;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
  var lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";
  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF )\n	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	vFragDepth = 1.0 + gl_Position.w;\n	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";
  var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
  var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
  var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
  var morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif";
  var morphcolor_vertex = "#if defined( USE_MORPHCOLORS )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	#endif\n	uniform sampler2DArray morphTargetsTexture;\n	uniform ivec2 morphTargetsTextureSize;\n	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n		int y = texelIndex / morphTargetsTextureSize.x;\n		int x = texelIndex - y * morphTargetsTextureSize.x;\n		ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n		return texelFetch( morphTargetsTexture, morphUV, 0 );\n	}\n#endif";
  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
  var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";
  var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
  var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
  var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";
  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
  var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
  var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n	if( v <= 0.0 )\n		return vec4( 0., 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec4( 1., 1., 1., 1. );\n	float vuf;\n	float af = modf( v * PackFactors.a, vuf );\n	float bf = modf( vuf * ShiftRight8, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n	if( v <= 0.0 )\n		return vec3( 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec3( 1., 1., 1. );\n	float vuf;\n	float bf = modf( v * PackFactors.b, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n	if( v <= 0.0 )\n		return vec2( 0., 0. );\n	if( v >= 1.0 )\n		return vec2( 1., 1. );\n	float vuf;\n	float gf = modf( v * 256., vuf );\n	return vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n	return dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
  var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
  var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
  var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		float shadow = 1.0;\n		vec3 lightToPosition = shadowCoord.xyz;\n		\n		float lightToPositionLength = length( lightToPosition );\n		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;\n			vec3 bd3D = normalize( lightToPosition );\n			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n				shadow = (\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n				) * ( 1.0 / 9.0 );\n			#else\n				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n			#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n#endif";
  var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
  var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
  var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
  var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
  var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";
  var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
  var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	const float StartCompression = 0.8 - 0.04;\n	const float Desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min( color.r, min( color.g, color.b ) );\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max( color.r, max( color.g, color.b ) );\n	if ( peak < StartCompression ) return color;\n	float d = 1. - StartCompression;\n	float newPeak = 1. - d * d / ( peak + d - StartCompression );\n	color *= newPeak / peak;\n	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n	return mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
  var transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
  var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec4 transmittedLight;\n		vec3 transmittance;\n		#ifdef USE_DISPERSION\n			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n			for ( int i = 0; i < 3; i ++ ) {\n				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n				vec3 refractedRayExit = position + transmissionRay;\n				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n				vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n				refractionCoords += 1.0;\n				refractionCoords /= 2.0;\n				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n				transmittedLight[ i ] = transmissionSample[ i ];\n				transmittedLight.a += transmissionSample.a;\n				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n			}\n			transmittedLight.a /= 3.0;\n		#else\n			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n			vec3 refractedRayExit = position + transmissionRay;\n			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n			vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n			refractionCoords += 1.0;\n			refractionCoords /= 2.0;\n			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		#endif\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
  var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
  var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
  var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
  var vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
  var fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
  var fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#elif DEPTH_PACKING == 3202\n		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n	#elif DEPTH_PACKING == 3203\n		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n	#endif\n}";
  var vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
  var fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
  var vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
  var fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
  var fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
  var fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
  var vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
  var fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n	uniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
  var fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
  var vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix[ 3 ];\n	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
  var ShaderChunk = {
    alphahash_fragment,
    alphahash_pars_fragment,
    alphamap_fragment,
    alphamap_pars_fragment,
    alphatest_fragment,
    alphatest_pars_fragment,
    aomap_fragment,
    aomap_pars_fragment,
    batching_pars_vertex,
    batching_vertex,
    begin_vertex,
    beginnormal_vertex,
    bsdfs,
    iridescence_fragment,
    bumpmap_pars_fragment,
    clipping_planes_fragment,
    clipping_planes_pars_fragment,
    clipping_planes_pars_vertex,
    clipping_planes_vertex,
    color_fragment,
    color_pars_fragment,
    color_pars_vertex,
    color_vertex,
    common,
    cube_uv_reflection_fragment,
    defaultnormal_vertex,
    displacementmap_pars_vertex,
    displacementmap_vertex,
    emissivemap_fragment,
    emissivemap_pars_fragment,
    colorspace_fragment,
    colorspace_pars_fragment,
    envmap_fragment,
    envmap_common_pars_fragment,
    envmap_pars_fragment,
    envmap_pars_vertex,
    envmap_physical_pars_fragment,
    envmap_vertex,
    fog_vertex,
    fog_pars_vertex,
    fog_fragment,
    fog_pars_fragment,
    gradientmap_pars_fragment,
    lightmap_pars_fragment,
    lights_lambert_fragment,
    lights_lambert_pars_fragment,
    lights_pars_begin,
    lights_toon_fragment,
    lights_toon_pars_fragment,
    lights_phong_fragment,
    lights_phong_pars_fragment,
    lights_physical_fragment,
    lights_physical_pars_fragment,
    lights_fragment_begin,
    lights_fragment_maps,
    lights_fragment_end,
    logdepthbuf_fragment,
    logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex,
    logdepthbuf_vertex,
    map_fragment,
    map_pars_fragment,
    map_particle_fragment,
    map_particle_pars_fragment,
    metalnessmap_fragment,
    metalnessmap_pars_fragment,
    morphinstance_vertex,
    morphcolor_vertex,
    morphnormal_vertex,
    morphtarget_pars_vertex,
    morphtarget_vertex,
    normal_fragment_begin,
    normal_fragment_maps,
    normal_pars_fragment,
    normal_pars_vertex,
    normal_vertex,
    normalmap_pars_fragment,
    clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment,
    iridescence_pars_fragment,
    opaque_fragment,
    packing,
    premultiplied_alpha_fragment,
    project_vertex,
    dithering_fragment,
    dithering_pars_fragment,
    roughnessmap_fragment,
    roughnessmap_pars_fragment,
    shadowmap_pars_fragment,
    shadowmap_pars_vertex,
    shadowmap_vertex,
    shadowmask_pars_fragment,
    skinbase_vertex,
    skinning_pars_vertex,
    skinning_vertex,
    skinnormal_vertex,
    specularmap_fragment,
    specularmap_pars_fragment,
    tonemapping_fragment,
    tonemapping_pars_fragment,
    transmission_fragment,
    transmission_pars_fragment,
    uv_pars_fragment,
    uv_pars_vertex,
    uv_vertex,
    worldpos_vertex,
    background_vert: vertex$h,
    background_frag: fragment$h,
    backgroundCube_vert: vertex$g,
    backgroundCube_frag: fragment$g,
    cube_vert: vertex$f,
    cube_frag: fragment$f,
    depth_vert: vertex$e,
    depth_frag: fragment$e,
    distanceRGBA_vert: vertex$d,
    distanceRGBA_frag: fragment$d,
    equirect_vert: vertex$c,
    equirect_frag: fragment$c,
    linedashed_vert: vertex$b,
    linedashed_frag: fragment$b,
    meshbasic_vert: vertex$a,
    meshbasic_frag: fragment$a,
    meshlambert_vert: vertex$9,
    meshlambert_frag: fragment$9,
    meshmatcap_vert: vertex$8,
    meshmatcap_frag: fragment$8,
    meshnormal_vert: vertex$7,
    meshnormal_frag: fragment$7,
    meshphong_vert: vertex$6,
    meshphong_frag: fragment$6,
    meshphysical_vert: vertex$5,
    meshphysical_frag: fragment$5,
    meshtoon_vert: vertex$4,
    meshtoon_frag: fragment$4,
    points_vert: vertex$3,
    points_frag: fragment$3,
    shadow_vert: vertex$2,
    shadow_frag: fragment$2,
    sprite_vert: vertex$1,
    sprite_frag: fragment$1
  };
  var UniformsLib = {
    common: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      map: { value: null },
      mapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 }
    },
    specularmap: {
      specularMap: { value: null },
      specularMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    envmap: {
      envMap: { value: null },
      envMapRotation: { value: /* @__PURE__ */ new Matrix3() },
      flipEnvMap: { value: -1 },
      reflectivity: { value: 1 },
      // basic, lambert, phong
      ior: { value: 1.5 },
      // physical
      refractionRatio: { value: 0.98 }
      // basic, lambert, phong
    },
    aomap: {
      aoMap: { value: null },
      aoMapIntensity: { value: 1 },
      aoMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    lightmap: {
      lightMap: { value: null },
      lightMapIntensity: { value: 1 },
      lightMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    bumpmap: {
      bumpMap: { value: null },
      bumpMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      bumpScale: { value: 1 }
    },
    normalmap: {
      normalMap: { value: null },
      normalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      normalScale: { value: /* @__PURE__ */ new Vector2(1, 1) }
    },
    displacementmap: {
      displacementMap: { value: null },
      displacementMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      displacementScale: { value: 1 },
      displacementBias: { value: 0 }
    },
    emissivemap: {
      emissiveMap: { value: null },
      emissiveMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    metalnessmap: {
      metalnessMap: { value: null },
      metalnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    roughnessmap: {
      roughnessMap: { value: null },
      roughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    gradientmap: {
      gradientMap: { value: null }
    },
    fog: {
      fogDensity: { value: 25e-5 },
      fogNear: { value: 1 },
      fogFar: { value: 2e3 },
      fogColor: { value: /* @__PURE__ */ new Color(16777215) }
    },
    lights: {
      ambientLightColor: { value: [] },
      lightProbe: { value: [] },
      directionalLights: { value: [], properties: {
        direction: {},
        color: {}
      } },
      directionalLightShadows: { value: [], properties: {
        shadowIntensity: 1,
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      directionalShadowMap: { value: [] },
      directionalShadowMatrix: { value: [] },
      spotLights: { value: [], properties: {
        color: {},
        position: {},
        direction: {},
        distance: {},
        coneCos: {},
        penumbraCos: {},
        decay: {}
      } },
      spotLightShadows: { value: [], properties: {
        shadowIntensity: 1,
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      spotLightMap: { value: [] },
      spotShadowMap: { value: [] },
      spotLightMatrix: { value: [] },
      pointLights: { value: [], properties: {
        color: {},
        position: {},
        decay: {},
        distance: {}
      } },
      pointLightShadows: { value: [], properties: {
        shadowIntensity: 1,
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {},
        shadowCameraNear: {},
        shadowCameraFar: {}
      } },
      pointShadowMap: { value: [] },
      pointShadowMatrix: { value: [] },
      hemisphereLights: { value: [], properties: {
        direction: {},
        skyColor: {},
        groundColor: {}
      } },
      // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
      rectAreaLights: { value: [], properties: {
        color: {},
        position: {},
        width: {},
        height: {}
      } },
      ltc_1: { value: null },
      ltc_2: { value: null }
    },
    points: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      size: { value: 1 },
      scale: { value: 1 },
      map: { value: null },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 },
      uvTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    sprite: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      center: { value: /* @__PURE__ */ new Vector2(0.5, 0.5) },
      rotation: { value: 0 },
      map: { value: null },
      mapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 }
    }
  };
  var ShaderLib = {
    basic: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.meshbasic_vert,
      fragmentShader: ShaderChunk.meshbasic_frag
    },
    lambert: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshlambert_vert,
      fragmentShader: ShaderChunk.meshlambert_frag
    },
    phong: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) },
          specular: { value: /* @__PURE__ */ new Color(1118481) },
          shininess: { value: 30 }
        }
      ]),
      vertexShader: ShaderChunk.meshphong_vert,
      fragmentShader: ShaderChunk.meshphong_frag
    },
    standard: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.roughnessmap,
        UniformsLib.metalnessmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) },
          roughness: { value: 1 },
          metalness: { value: 0 },
          envMapIntensity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.meshphysical_vert,
      fragmentShader: ShaderChunk.meshphysical_frag
    },
    toon: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.gradientmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshtoon_vert,
      fragmentShader: ShaderChunk.meshtoon_frag
    },
    matcap: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        {
          matcap: { value: null }
        }
      ]),
      vertexShader: ShaderChunk.meshmatcap_vert,
      fragmentShader: ShaderChunk.meshmatcap_frag
    },
    points: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.points,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.points_vert,
      fragmentShader: ShaderChunk.points_frag
    },
    dashed: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.fog,
        {
          scale: { value: 1 },
          dashSize: { value: 1 },
          totalSize: { value: 2 }
        }
      ]),
      vertexShader: ShaderChunk.linedashed_vert,
      fragmentShader: ShaderChunk.linedashed_frag
    },
    depth: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap
      ]),
      vertexShader: ShaderChunk.depth_vert,
      fragmentShader: ShaderChunk.depth_frag
    },
    normal: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        {
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.meshnormal_vert,
      fragmentShader: ShaderChunk.meshnormal_frag
    },
    sprite: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.sprite,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.sprite_vert,
      fragmentShader: ShaderChunk.sprite_frag
    },
    background: {
      uniforms: {
        uvTransform: { value: /* @__PURE__ */ new Matrix3() },
        t2D: { value: null },
        backgroundIntensity: { value: 1 }
      },
      vertexShader: ShaderChunk.background_vert,
      fragmentShader: ShaderChunk.background_frag
    },
    backgroundCube: {
      uniforms: {
        envMap: { value: null },
        flipEnvMap: { value: -1 },
        backgroundBlurriness: { value: 0 },
        backgroundIntensity: { value: 1 },
        backgroundRotation: { value: /* @__PURE__ */ new Matrix3() }
      },
      vertexShader: ShaderChunk.backgroundCube_vert,
      fragmentShader: ShaderChunk.backgroundCube_frag
    },
    cube: {
      uniforms: {
        tCube: { value: null },
        tFlip: { value: -1 },
        opacity: { value: 1 }
      },
      vertexShader: ShaderChunk.cube_vert,
      fragmentShader: ShaderChunk.cube_frag
    },
    equirect: {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: ShaderChunk.equirect_vert,
      fragmentShader: ShaderChunk.equirect_frag
    },
    distanceRGBA: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap,
        {
          referencePosition: { value: /* @__PURE__ */ new Vector3() },
          nearDistance: { value: 1 },
          farDistance: { value: 1e3 }
        }
      ]),
      vertexShader: ShaderChunk.distanceRGBA_vert,
      fragmentShader: ShaderChunk.distanceRGBA_frag
    },
    shadow: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.lights,
        UniformsLib.fog,
        {
          color: { value: /* @__PURE__ */ new Color(0) },
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.shadow_vert,
      fragmentShader: ShaderChunk.shadow_frag
    }
  };
  ShaderLib.physical = {
    uniforms: /* @__PURE__ */ mergeUniforms([
      ShaderLib.standard.uniforms,
      {
        clearcoat: { value: 0 },
        clearcoatMap: { value: null },
        clearcoatMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        clearcoatNormalMap: { value: null },
        clearcoatNormalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        clearcoatNormalScale: { value: /* @__PURE__ */ new Vector2(1, 1) },
        clearcoatRoughness: { value: 0 },
        clearcoatRoughnessMap: { value: null },
        clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        dispersion: { value: 0 },
        iridescence: { value: 0 },
        iridescenceMap: { value: null },
        iridescenceMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        iridescenceIOR: { value: 1.3 },
        iridescenceThicknessMinimum: { value: 100 },
        iridescenceThicknessMaximum: { value: 400 },
        iridescenceThicknessMap: { value: null },
        iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        sheen: { value: 0 },
        sheenColor: { value: /* @__PURE__ */ new Color(0) },
        sheenColorMap: { value: null },
        sheenColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        sheenRoughness: { value: 1 },
        sheenRoughnessMap: { value: null },
        sheenRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        transmission: { value: 0 },
        transmissionMap: { value: null },
        transmissionMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        transmissionSamplerSize: { value: /* @__PURE__ */ new Vector2() },
        transmissionSamplerMap: { value: null },
        thickness: { value: 0 },
        thicknessMap: { value: null },
        thicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        attenuationDistance: { value: 0 },
        attenuationColor: { value: /* @__PURE__ */ new Color(0) },
        specularColor: { value: /* @__PURE__ */ new Color(1, 1, 1) },
        specularColorMap: { value: null },
        specularColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        specularIntensity: { value: 1 },
        specularIntensityMap: { value: null },
        specularIntensityMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        anisotropyVector: { value: /* @__PURE__ */ new Vector2() },
        anisotropyMap: { value: null },
        anisotropyMapTransform: { value: /* @__PURE__ */ new Matrix3() }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  };
  var _rgb = { r: 0, b: 0, g: 0 };
  var _e1$1 = /* @__PURE__ */ new Euler();
  var _m1$12 = /* @__PURE__ */ new Matrix4();
  function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
    const clearColor = new Color(0);
    let clearAlpha = alpha === true ? 0 : 1;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function getBackground(scene) {
      let background = scene.isScene === true ? scene.background : null;
      if (background && background.isTexture) {
        const usePMREM = scene.backgroundBlurriness > 0;
        background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
      }
      return background;
    }
    function render(scene) {
      let forceClear = false;
      const background = getBackground(scene);
      if (background === null) {
        setClear(clearColor, clearAlpha);
      } else if (background && background.isColor) {
        setClear(background, 1);
        forceClear = true;
      }
      const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();
      if (environmentBlendMode === "additive") {
        state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);
      } else if (environmentBlendMode === "alpha-blend") {
        state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);
      }
      if (renderer.autoClear || forceClear) {
        state.buffers.depth.setTest(true);
        state.buffers.depth.setMask(true);
        state.buffers.color.setMask(true);
        renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
      }
    }
    function addToRenderList(renderList, scene) {
      const background = getBackground(scene);
      if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
        if (boxMesh === void 0) {
          boxMesh = new Mesh(
            new BoxGeometry(1, 1, 1),
            new ShaderMaterial({
              name: "BackgroundCubeMaterial",
              uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),
              vertexShader: ShaderLib.backgroundCube.vertexShader,
              fragmentShader: ShaderLib.backgroundCube.fragmentShader,
              side: BackSide,
              depthTest: false,
              depthWrite: false,
              fog: false
            })
          );
          boxMesh.geometry.deleteAttribute("normal");
          boxMesh.geometry.deleteAttribute("uv");
          boxMesh.onBeforeRender = function(renderer2, scene2, camera) {
            this.matrixWorld.copyPosition(camera.matrixWorld);
          };
          Object.defineProperty(boxMesh.material, "envMap", {
            get: function() {
              return this.uniforms.envMap.value;
            }
          });
          objects.update(boxMesh);
        }
        _e1$1.copy(scene.backgroundRotation);
        _e1$1.x *= -1;
        _e1$1.y *= -1;
        _e1$1.z *= -1;
        if (background.isCubeTexture && background.isRenderTargetTexture === false) {
          _e1$1.y *= -1;
          _e1$1.z *= -1;
        }
        boxMesh.material.uniforms.envMap.value = background;
        boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
        boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
        boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
        boxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4(_m1$12.makeRotationFromEuler(_e1$1));
        boxMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          boxMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        boxMesh.layers.enableAll();
        renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
      } else if (background && background.isTexture) {
        if (planeMesh === void 0) {
          planeMesh = new Mesh(
            new PlaneGeometry(2, 2),
            new ShaderMaterial({
              name: "BackgroundMaterial",
              uniforms: cloneUniforms(ShaderLib.background.uniforms),
              vertexShader: ShaderLib.background.vertexShader,
              fragmentShader: ShaderLib.background.fragmentShader,
              side: FrontSide,
              depthTest: false,
              depthWrite: false,
              fog: false
            })
          );
          planeMesh.geometry.deleteAttribute("normal");
          Object.defineProperty(planeMesh.material, "map", {
            get: function() {
              return this.uniforms.t2D.value;
            }
          });
          objects.update(planeMesh);
        }
        planeMesh.material.uniforms.t2D.value = background;
        planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
        planeMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
        if (background.matrixAutoUpdate === true) {
          background.updateMatrix();
        }
        planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          planeMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        planeMesh.layers.enableAll();
        renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
      }
    }
    function setClear(color, alpha2) {
      color.getRGB(_rgb, getUnlitUniformColorSpace(renderer));
      state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha2, premultipliedAlpha);
    }
    function dispose() {
      if (boxMesh !== void 0) {
        boxMesh.geometry.dispose();
        boxMesh.material.dispose();
        boxMesh = void 0;
      }
      if (planeMesh !== void 0) {
        planeMesh.geometry.dispose();
        planeMesh.material.dispose();
        planeMesh = void 0;
      }
    }
    return {
      getClearColor: function() {
        return clearColor;
      },
      setClearColor: function(color, alpha2 = 1) {
        clearColor.set(color);
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      getClearAlpha: function() {
        return clearAlpha;
      },
      setClearAlpha: function(alpha2) {
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      render,
      addToRenderList,
      dispose
    };
  }
  function WebGLBindingStates(gl, attributes) {
    const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const bindingStates = {};
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    let forceUpdate = false;
    function setup(object, material, program, geometry, index) {
      let updateBuffers = false;
      const state = getBindingState(geometry, program, material);
      if (currentState !== state) {
        currentState = state;
        bindVertexArrayObject(currentState.object);
      }
      updateBuffers = needsUpdate(object, geometry, program, index);
      if (updateBuffers)
        saveCache(object, geometry, program, index);
      if (index !== null) {
        attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
      }
      if (updateBuffers || forceUpdate) {
        forceUpdate = false;
        setupVertexAttributes(object, material, program, geometry);
        if (index !== null) {
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
        }
      }
    }
    function createVertexArrayObject() {
      return gl.createVertexArray();
    }
    function bindVertexArrayObject(vao) {
      return gl.bindVertexArray(vao);
    }
    function deleteVertexArrayObject(vao) {
      return gl.deleteVertexArray(vao);
    }
    function getBindingState(geometry, program, material) {
      const wireframe = material.wireframe === true;
      let programMap = bindingStates[geometry.id];
      if (programMap === void 0) {
        programMap = {};
        bindingStates[geometry.id] = programMap;
      }
      let stateMap = programMap[program.id];
      if (stateMap === void 0) {
        stateMap = {};
        programMap[program.id] = stateMap;
      }
      let state = stateMap[wireframe];
      if (state === void 0) {
        state = createBindingState(createVertexArrayObject());
        stateMap[wireframe] = state;
      }
      return state;
    }
    function createBindingState(vao) {
      const newAttributes = [];
      const enabledAttributes = [];
      const attributeDivisors = [];
      for (let i = 0; i < maxVertexAttributes; i++) {
        newAttributes[i] = 0;
        enabledAttributes[i] = 0;
        attributeDivisors[i] = 0;
      }
      return {
        // for backward compatibility on non-VAO support browser
        geometry: null,
        program: null,
        wireframe: false,
        newAttributes,
        enabledAttributes,
        attributeDivisors,
        object: vao,
        attributes: {},
        index: null
      };
    }
    function needsUpdate(object, geometry, program, index) {
      const cachedAttributes = currentState.attributes;
      const geometryAttributes = geometry.attributes;
      let attributesNum = 0;
      const programAttributes = program.getAttributes();
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          const cachedAttribute = cachedAttributes[name];
          let geometryAttribute = geometryAttributes[name];
          if (geometryAttribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              geometryAttribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              geometryAttribute = object.instanceColor;
          }
          if (cachedAttribute === void 0)
            return true;
          if (cachedAttribute.attribute !== geometryAttribute)
            return true;
          if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data)
            return true;
          attributesNum++;
        }
      }
      if (currentState.attributesNum !== attributesNum)
        return true;
      if (currentState.index !== index)
        return true;
      return false;
    }
    function saveCache(object, geometry, program, index) {
      const cache = {};
      const attributes2 = geometry.attributes;
      let attributesNum = 0;
      const programAttributes = program.getAttributes();
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          let attribute = attributes2[name];
          if (attribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              attribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              attribute = object.instanceColor;
          }
          const data = {};
          data.attribute = attribute;
          if (attribute && attribute.data) {
            data.data = attribute.data;
          }
          cache[name] = data;
          attributesNum++;
        }
      }
      currentState.attributes = cache;
      currentState.attributesNum = attributesNum;
      currentState.index = index;
    }
    function initAttributes() {
      const newAttributes = currentState.newAttributes;
      for (let i = 0, il = newAttributes.length; i < il; i++) {
        newAttributes[i] = 0;
      }
    }
    function enableAttribute(attribute) {
      enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      const attributeDivisors = currentState.attributeDivisors;
      newAttributes[attribute] = 1;
      if (enabledAttributes[attribute] === 0) {
        gl.enableVertexAttribArray(attribute);
        enabledAttributes[attribute] = 1;
      }
      if (attributeDivisors[attribute] !== meshPerAttribute) {
        gl.vertexAttribDivisor(attribute, meshPerAttribute);
        attributeDivisors[attribute] = meshPerAttribute;
      }
    }
    function disableUnusedAttributes() {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      for (let i = 0, il = enabledAttributes.length; i < il; i++) {
        if (enabledAttributes[i] !== newAttributes[i]) {
          gl.disableVertexAttribArray(i);
          enabledAttributes[i] = 0;
        }
      }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset, integer) {
      if (integer === true) {
        gl.vertexAttribIPointer(index, size, type, stride, offset);
      } else {
        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
      }
    }
    function setupVertexAttributes(object, material, program, geometry) {
      initAttributes();
      const geometryAttributes = geometry.attributes;
      const programAttributes = program.getAttributes();
      const materialDefaultAttributeValues = material.defaultAttributeValues;
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          let geometryAttribute = geometryAttributes[name];
          if (geometryAttribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              geometryAttribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              geometryAttribute = object.instanceColor;
          }
          if (geometryAttribute !== void 0) {
            const normalized = geometryAttribute.normalized;
            const size = geometryAttribute.itemSize;
            const attribute = attributes.get(geometryAttribute);
            if (attribute === void 0)
              continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            const bytesPerElement = attribute.bytesPerElement;
            const integer = type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType;
            if (geometryAttribute.isInterleavedBufferAttribute) {
              const data = geometryAttribute.data;
              const stride = data.stride;
              const offset = geometryAttribute.offset;
              if (data.isInstancedInterleavedBuffer) {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                }
              } else {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttribute(programAttribute.location + i);
                }
              }
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              for (let i = 0; i < programAttribute.locationSize; i++) {
                vertexAttribPointer(
                  programAttribute.location + i,
                  size / programAttribute.locationSize,
                  type,
                  normalized,
                  stride * bytesPerElement,
                  (offset + size / programAttribute.locationSize * i) * bytesPerElement,
                  integer
                );
              }
            } else {
              if (geometryAttribute.isInstancedBufferAttribute) {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                }
              } else {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttribute(programAttribute.location + i);
                }
              }
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              for (let i = 0; i < programAttribute.locationSize; i++) {
                vertexAttribPointer(
                  programAttribute.location + i,
                  size / programAttribute.locationSize,
                  type,
                  normalized,
                  size * bytesPerElement,
                  size / programAttribute.locationSize * i * bytesPerElement,
                  integer
                );
              }
            }
          } else if (materialDefaultAttributeValues !== void 0) {
            const value = materialDefaultAttributeValues[name];
            if (value !== void 0) {
              switch (value.length) {
                case 2:
                  gl.vertexAttrib2fv(programAttribute.location, value);
                  break;
                case 3:
                  gl.vertexAttrib3fv(programAttribute.location, value);
                  break;
                case 4:
                  gl.vertexAttrib4fv(programAttribute.location, value);
                  break;
                default:
                  gl.vertexAttrib1fv(programAttribute.location, value);
              }
            }
          }
        }
      }
      disableUnusedAttributes();
    }
    function dispose() {
      reset();
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        for (const programId in programMap) {
          const stateMap = programMap[programId];
          for (const wireframe in stateMap) {
            deleteVertexArrayObject(stateMap[wireframe].object);
            delete stateMap[wireframe];
          }
          delete programMap[programId];
        }
        delete bindingStates[geometryId];
      }
    }
    function releaseStatesOfGeometry(geometry) {
      if (bindingStates[geometry.id] === void 0)
        return;
      const programMap = bindingStates[geometry.id];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        if (programMap[program.id] === void 0)
          continue;
        const stateMap = programMap[program.id];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[program.id];
      }
    }
    function reset() {
      resetDefaultState();
      forceUpdate = true;
      if (currentState === defaultState)
        return;
      currentState = defaultState;
      bindVertexArrayObject(currentState.object);
    }
    function resetDefaultState() {
      defaultState.geometry = null;
      defaultState.program = null;
      defaultState.wireframe = false;
    }
    return {
      setup,
      reset,
      resetDefaultState,
      dispose,
      releaseStatesOfGeometry,
      releaseStatesOfProgram,
      initAttributes,
      enableAttribute,
      disableUnusedAttributes
    };
  }
  function WebGLBufferRenderer(gl, extensions, info) {
    let mode;
    function setMode(value) {
      mode = value;
    }
    function render(start, count) {
      gl.drawArrays(mode, start, count);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      gl.drawArraysInstanced(mode, start, count, primcount);
      info.update(count, mode, primcount);
    }
    function renderMultiDraw(starts, counts, drawCount) {
      if (drawCount === 0)
        return;
      const extension = extensions.get("WEBGL_multi_draw");
      extension.multiDrawArraysWEBGL(mode, starts, 0, counts, 0, drawCount);
      let elementCount = 0;
      for (let i = 0; i < drawCount; i++) {
        elementCount += counts[i];
      }
      info.update(elementCount, mode, 1);
    }
    function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
      if (drawCount === 0)
        return;
      const extension = extensions.get("WEBGL_multi_draw");
      if (extension === null) {
        for (let i = 0; i < starts.length; i++) {
          renderInstances(starts[i], counts[i], primcount[i]);
        }
      } else {
        extension.multiDrawArraysInstancedWEBGL(mode, starts, 0, counts, 0, primcount, 0, drawCount);
        let elementCount = 0;
        for (let i = 0; i < drawCount; i++) {
          elementCount += counts[i] * primcount[i];
        }
        info.update(elementCount, mode, 1);
      }
    }
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
    this.renderMultiDraw = renderMultiDraw;
    this.renderMultiDrawInstances = renderMultiDrawInstances;
  }
  function WebGLCapabilities(gl, extensions, parameters, utils) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
      if (maxAnisotropy !== void 0)
        return maxAnisotropy;
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      } else {
        maxAnisotropy = 0;
      }
      return maxAnisotropy;
    }
    function textureFormatReadable(textureFormat) {
      if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
        return false;
      }
      return true;
    }
    function textureTypeReadable(textureType) {
      const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float"));
      if (textureType !== UnsignedByteType && utils.convert(textureType) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
      textureType !== FloatType && !halfFloatSupportedByExt) {
        return false;
      }
      return true;
    }
    function getMaxPrecision(precision2) {
      if (precision2 === "highp") {
        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
          return "highp";
        }
        precision2 = "mediump";
      }
      if (precision2 === "mediump") {
        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
          return "mediump";
        }
      }
      return "lowp";
    }
    let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
    const maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
      console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
      precision = maxPrecision;
    }
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const reverseDepthBuffer = parameters.reverseDepthBuffer === true && extensions.has("EXT_clip_control");
    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
    const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
    const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
    const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
    const vertexTextures = maxVertexTextures > 0;
    const maxSamples = gl.getParameter(gl.MAX_SAMPLES);
    return {
      isWebGL2: true,
      // keeping this for backwards compatibility
      getMaxAnisotropy,
      getMaxPrecision,
      textureFormatReadable,
      textureTypeReadable,
      precision,
      logarithmicDepthBuffer,
      reverseDepthBuffer,
      maxTextures,
      maxVertexTextures,
      maxTextureSize,
      maxCubemapSize,
      maxAttributes,
      maxVertexUniforms,
      maxVaryings,
      maxFragmentUniforms,
      vertexTextures,
      maxSamples
    };
  }
  function WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping) {
      const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
      // run another frame in order to reset the state:
      numGlobalPlanes !== 0 || localClippingEnabled;
      localClippingEnabled = enableLocalClipping;
      numGlobalPlanes = planes.length;
      return enabled;
    };
    this.beginShadows = function() {
      renderingShadows = true;
      projectPlanes(null);
    };
    this.endShadows = function() {
      renderingShadows = false;
    };
    this.setGlobalState = function(planes, camera) {
      globalState = projectPlanes(planes, camera, 0);
    };
    this.setState = function(material, camera, useCache) {
      const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
      const materialProperties = properties.get(material);
      if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
        if (renderingShadows) {
          projectPlanes(null);
        } else {
          resetGlobalState();
        }
      } else {
        const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
        let dstArray = materialProperties.clippingState || null;
        uniform.value = dstArray;
        dstArray = projectPlanes(planes, camera, lGlobal, useCache);
        for (let i = 0; i !== lGlobal; ++i) {
          dstArray[i] = globalState[i];
        }
        materialProperties.clippingState = dstArray;
        this.numIntersection = clipIntersection ? this.numPlanes : 0;
        this.numPlanes += nGlobal;
      }
    };
    function resetGlobalState() {
      if (uniform.value !== globalState) {
        uniform.value = globalState;
        uniform.needsUpdate = numGlobalPlanes > 0;
      }
      scope.numPlanes = numGlobalPlanes;
      scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera, dstOffset, skipTransform) {
      const nPlanes = planes !== null ? planes.length : 0;
      let dstArray = null;
      if (nPlanes !== 0) {
        dstArray = uniform.value;
        if (skipTransform !== true || dstArray === null) {
          const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
          viewNormalMatrix.getNormalMatrix(viewMatrix);
          if (dstArray === null || dstArray.length < flatSize) {
            dstArray = new Float32Array(flatSize);
          }
          for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
            plane.normal.toArray(dstArray, i4);
            dstArray[i4 + 3] = plane.constant;
          }
        }
        uniform.value = dstArray;
        uniform.needsUpdate = true;
      }
      scope.numPlanes = nPlanes;
      scope.numIntersection = 0;
      return dstArray;
    }
  }
  function WebGLCubeMaps(renderer) {
    let cubemaps = /* @__PURE__ */ new WeakMap();
    function mapTextureMapping(texture, mapping) {
      if (mapping === EquirectangularReflectionMapping) {
        texture.mapping = CubeReflectionMapping;
      } else if (mapping === EquirectangularRefractionMapping) {
        texture.mapping = CubeRefractionMapping;
      }
      return texture;
    }
    function get(texture) {
      if (texture && texture.isTexture) {
        const mapping = texture.mapping;
        if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
          if (cubemaps.has(texture)) {
            const cubemap = cubemaps.get(texture).texture;
            return mapTextureMapping(cubemap, texture.mapping);
          } else {
            const image = texture.image;
            if (image && image.height > 0) {
              const renderTarget = new WebGLCubeRenderTarget(image.height);
              renderTarget.fromEquirectangularTexture(renderer, texture);
              cubemaps.set(texture, renderTarget);
              texture.addEventListener("dispose", onTextureDispose);
              return mapTextureMapping(renderTarget.texture, texture.mapping);
            } else {
              return null;
            }
          }
        }
      }
      return texture;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemap = cubemaps.get(texture);
      if (cubemap !== void 0) {
        cubemaps.delete(texture);
        cubemap.dispose();
      }
    }
    function dispose() {
      cubemaps = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  var LOD_MIN = 4;
  var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
  var MAX_SAMPLES = 20;
  var _flatCamera = /* @__PURE__ */ new OrthographicCamera();
  var _clearColor = /* @__PURE__ */ new Color();
  var _oldTarget = null;
  var _oldActiveCubeFace = 0;
  var _oldActiveMipmapLevel = 0;
  var _oldXrEnabled = false;
  var PHI = (1 + Math.sqrt(5)) / 2;
  var INV_PHI = 1 / PHI;
  var _axisDirections = [
    /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
    /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
    /* @__PURE__ */ new Vector3(-1, 1, -1),
    /* @__PURE__ */ new Vector3(1, 1, -1),
    /* @__PURE__ */ new Vector3(-1, 1, 1),
    /* @__PURE__ */ new Vector3(1, 1, 1)
  ];
  var PMREMGenerator = class {
    constructor(renderer) {
      this._renderer = renderer;
      this._pingPongRenderTarget = null;
      this._lodMax = 0;
      this._cubeSize = 0;
      this._lodPlanes = [];
      this._sizeLods = [];
      this._sigmas = [];
      this._blurMaterial = null;
      this._cubemapMaterial = null;
      this._equirectMaterial = null;
      this._compileMaterial(this._blurMaterial);
    }
    /**
     * Generates a PMREM from a supplied Scene, which can be faster than using an
     * image if networking bandwidth is low. Optional sigma specifies a blur radius
     * in radians to be applied to the scene before PMREM generation. Optional near
     * and far planes ensure the scene is rendered in its entirety (the cubeCamera
     * is placed at the origin).
     *
     * @param {Scene} scene
     * @param {number} sigma
     * @param {number} near
     * @param {number} far
     * @return {WebGLRenderTarget}
     */
    fromScene(scene, sigma = 0, near = 0.1, far = 100) {
      _oldTarget = this._renderer.getRenderTarget();
      _oldActiveCubeFace = this._renderer.getActiveCubeFace();
      _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
      _oldXrEnabled = this._renderer.xr.enabled;
      this._renderer.xr.enabled = false;
      this._setSize(256);
      const cubeUVRenderTarget = this._allocateTargets();
      cubeUVRenderTarget.depthBuffer = true;
      this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
      if (sigma > 0) {
        this._blur(cubeUVRenderTarget, 0, 0, sigma);
      }
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    /**
     * Generates a PMREM from an equirectangular texture, which can be either LDR
     * or HDR. The ideal input image size is 1k (1024 x 512),
     * as this matches best with the 256 x 256 cubemap output.
     * The smallest supported equirectangular image size is 64 x 32.
     *
     * @param {Texture} equirectangular
     * @param {WebGLRenderTarget} [renderTarget=null] - Optional render target.
     * @return {WebGLRenderTarget}
     */
    fromEquirectangular(equirectangular, renderTarget = null) {
      return this._fromTexture(equirectangular, renderTarget);
    }
    /**
     * Generates a PMREM from an cubemap texture, which can be either LDR
     * or HDR. The ideal input cube size is 256 x 256,
     * as this matches best with the 256 x 256 cubemap output.
     * The smallest supported cube size is 16 x 16.
     *
     * @param {Texture} cubemap
     * @param {null} [renderTarget=null] - Optional render target.
     * @return {WebGLRenderTarget}
     */
    fromCubemap(cubemap, renderTarget = null) {
      return this._fromTexture(cubemap, renderTarget);
    }
    /**
     * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     */
    compileCubemapShader() {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial();
        this._compileMaterial(this._cubemapMaterial);
      }
    }
    /**
     * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     */
    compileEquirectangularShader() {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial();
        this._compileMaterial(this._equirectMaterial);
      }
    }
    /**
     * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
     * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
     * one of them will cause any others to also become unusable.
     */
    dispose() {
      this._dispose();
      if (this._cubemapMaterial !== null)
        this._cubemapMaterial.dispose();
      if (this._equirectMaterial !== null)
        this._equirectMaterial.dispose();
    }
    // private interface
    _setSize(cubeSize) {
      this._lodMax = Math.floor(Math.log2(cubeSize));
      this._cubeSize = Math.pow(2, this._lodMax);
    }
    _dispose() {
      if (this._blurMaterial !== null)
        this._blurMaterial.dispose();
      if (this._pingPongRenderTarget !== null)
        this._pingPongRenderTarget.dispose();
      for (let i = 0; i < this._lodPlanes.length; i++) {
        this._lodPlanes[i].dispose();
      }
    }
    _cleanup(outputTarget) {
      this._renderer.setRenderTarget(_oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel);
      this._renderer.xr.enabled = _oldXrEnabled;
      outputTarget.scissorTest = false;
      _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
    _fromTexture(texture, renderTarget) {
      if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
        this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
      } else {
        this._setSize(texture.image.width / 4);
      }
      _oldTarget = this._renderer.getRenderTarget();
      _oldActiveCubeFace = this._renderer.getActiveCubeFace();
      _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
      _oldXrEnabled = this._renderer.xr.enabled;
      this._renderer.xr.enabled = false;
      const cubeUVRenderTarget = renderTarget || this._allocateTargets();
      this._textureToCubeUV(texture, cubeUVRenderTarget);
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    _allocateTargets() {
      const width = 3 * Math.max(this._cubeSize, 16 * 7);
      const height = 4 * this._cubeSize;
      const params = {
        magFilter: LinearFilter,
        minFilter: LinearFilter,
        generateMipmaps: false,
        type: HalfFloatType,
        format: RGBAFormat,
        colorSpace: LinearSRGBColorSpace,
        depthBuffer: false
      };
      const cubeUVRenderTarget = _createRenderTarget(width, height, params);
      if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
        if (this._pingPongRenderTarget !== null) {
          this._dispose();
        }
        this._pingPongRenderTarget = _createRenderTarget(width, height, params);
        const { _lodMax } = this;
        ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax));
        this._blurMaterial = _getBlurShader(_lodMax, width, height);
      }
      return cubeUVRenderTarget;
    }
    _compileMaterial(material) {
      const tmpMesh = new Mesh(this._lodPlanes[0], material);
      this._renderer.compile(tmpMesh, _flatCamera);
    }
    _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
      const fov2 = 90;
      const aspect2 = 1;
      const cubeCamera = new PerspectiveCamera(fov2, aspect2, near, far);
      const upSign = [1, -1, 1, 1, 1, 1];
      const forwardSign = [1, 1, 1, -1, -1, -1];
      const renderer = this._renderer;
      const originalAutoClear = renderer.autoClear;
      const toneMapping = renderer.toneMapping;
      renderer.getClearColor(_clearColor);
      renderer.toneMapping = NoToneMapping;
      renderer.autoClear = false;
      const backgroundMaterial = new MeshBasicMaterial({
        name: "PMREM.Background",
        side: BackSide,
        depthWrite: false,
        depthTest: false
      });
      const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
      let useSolidColor = false;
      const background = scene.background;
      if (background) {
        if (background.isColor) {
          backgroundMaterial.color.copy(background);
          scene.background = null;
          useSolidColor = true;
        }
      } else {
        backgroundMaterial.color.copy(_clearColor);
        useSolidColor = true;
      }
      for (let i = 0; i < 6; i++) {
        const col = i % 3;
        if (col === 0) {
          cubeCamera.up.set(0, upSign[i], 0);
          cubeCamera.lookAt(forwardSign[i], 0, 0);
        } else if (col === 1) {
          cubeCamera.up.set(0, 0, upSign[i]);
          cubeCamera.lookAt(0, forwardSign[i], 0);
        } else {
          cubeCamera.up.set(0, upSign[i], 0);
          cubeCamera.lookAt(0, 0, forwardSign[i]);
        }
        const size = this._cubeSize;
        _setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
        renderer.setRenderTarget(cubeUVRenderTarget);
        if (useSolidColor) {
          renderer.render(backgroundBox, cubeCamera);
        }
        renderer.render(scene, cubeCamera);
      }
      backgroundBox.geometry.dispose();
      backgroundBox.material.dispose();
      renderer.toneMapping = toneMapping;
      renderer.autoClear = originalAutoClear;
      scene.background = background;
    }
    _textureToCubeUV(texture, cubeUVRenderTarget) {
      const renderer = this._renderer;
      const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
      if (isCubeTexture) {
        if (this._cubemapMaterial === null) {
          this._cubemapMaterial = _getCubemapMaterial();
        }
        this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
      } else {
        if (this._equirectMaterial === null) {
          this._equirectMaterial = _getEquirectMaterial();
        }
      }
      const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
      const mesh = new Mesh(this._lodPlanes[0], material);
      const uniforms = material.uniforms;
      uniforms["envMap"].value = texture;
      const size = this._cubeSize;
      _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
      renderer.setRenderTarget(cubeUVRenderTarget);
      renderer.render(mesh, _flatCamera);
    }
    _applyPMREM(cubeUVRenderTarget) {
      const renderer = this._renderer;
      const autoClear = renderer.autoClear;
      renderer.autoClear = false;
      const n = this._lodPlanes.length;
      for (let i = 1; i < n; i++) {
        const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
        const poleAxis = _axisDirections[(n - i - 1) % _axisDirections.length];
        this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
      }
      renderer.autoClear = autoClear;
    }
    /**
     * This is a two-pass Gaussian blur for a cubemap. Normally this is done
     * vertically and horizontally, but this breaks down on a cube. Here we apply
     * the blur latitudinally (around the poles), and then longitudinally (towards
     * the poles) to approximate the orthogonally-separable blur. It is least
     * accurate at the poles, but still does a decent job.
     *
     * @param {WebGLRenderTarget} cubeUVRenderTarget
     * @param {number} lodIn
     * @param {number} lodOut
     * @param {number} sigma
     * @param {Vector3} [poleAxis]
     */
    _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
      const pingPongRenderTarget = this._pingPongRenderTarget;
      this._halfBlur(
        cubeUVRenderTarget,
        pingPongRenderTarget,
        lodIn,
        lodOut,
        sigma,
        "latitudinal",
        poleAxis
      );
      this._halfBlur(
        pingPongRenderTarget,
        cubeUVRenderTarget,
        lodOut,
        lodOut,
        sigma,
        "longitudinal",
        poleAxis
      );
    }
    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
      const renderer = this._renderer;
      const blurMaterial = this._blurMaterial;
      if (direction !== "latitudinal" && direction !== "longitudinal") {
        console.error(
          "blur direction must be either latitudinal or longitudinal!"
        );
      }
      const STANDARD_DEVIATIONS = 3;
      const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
      const blurUniforms = blurMaterial.uniforms;
      const pixels = this._sizeLods[lodIn] - 1;
      const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
      const sigmaPixels = sigmaRadians / radiansPerPixel;
      const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
      if (samples > MAX_SAMPLES) {
        console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
      }
      const weights = [];
      let sum = 0;
      for (let i = 0; i < MAX_SAMPLES; ++i) {
        const x2 = i / sigmaPixels;
        const weight = Math.exp(-x2 * x2 / 2);
        weights.push(weight);
        if (i === 0) {
          sum += weight;
        } else if (i < samples) {
          sum += 2 * weight;
        }
      }
      for (let i = 0; i < weights.length; i++) {
        weights[i] = weights[i] / sum;
      }
      blurUniforms["envMap"].value = targetIn.texture;
      blurUniforms["samples"].value = samples;
      blurUniforms["weights"].value = weights;
      blurUniforms["latitudinal"].value = direction === "latitudinal";
      if (poleAxis) {
        blurUniforms["poleAxis"].value = poleAxis;
      }
      const { _lodMax } = this;
      blurUniforms["dTheta"].value = radiansPerPixel;
      blurUniforms["mipInt"].value = _lodMax - lodIn;
      const outputSize = this._sizeLods[lodOut];
      const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
      const y = 4 * (this._cubeSize - outputSize);
      _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
      renderer.setRenderTarget(targetOut);
      renderer.render(blurMesh, _flatCamera);
    }
  };
  function _createPlanes(lodMax) {
    const lodPlanes = [];
    const sizeLods = [];
    const sigmas = [];
    let lod = lodMax;
    const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
    for (let i = 0; i < totalLods; i++) {
      const sizeLod = Math.pow(2, lod);
      sizeLods.push(sizeLod);
      let sigma = 1 / sizeLod;
      if (i > lodMax - LOD_MIN) {
        sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
      } else if (i === 0) {
        sigma = 0;
      }
      sigmas.push(sigma);
      const texelSize = 1 / (sizeLod - 2);
      const min = -texelSize;
      const max = 1 + texelSize;
      const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
      const cubeFaces = 6;
      const vertices = 6;
      const positionSize = 3;
      const uvSize = 2;
      const faceIndexSize = 1;
      const position = new Float32Array(positionSize * vertices * cubeFaces);
      const uv = new Float32Array(uvSize * vertices * cubeFaces);
      const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
      for (let face = 0; face < cubeFaces; face++) {
        const x = face % 3 * 2 / 3 - 1;
        const y = face > 2 ? 0 : -1;
        const coordinates = [
          x,
          y,
          0,
          x + 2 / 3,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y + 1,
          0
        ];
        position.set(coordinates, positionSize * vertices * face);
        uv.set(uv1, uvSize * vertices * face);
        const fill = [face, face, face, face, face, face];
        faceIndex.set(fill, faceIndexSize * vertices * face);
      }
      const planes = new BufferGeometry();
      planes.setAttribute("position", new BufferAttribute(position, positionSize));
      planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
      planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
      lodPlanes.push(planes);
      if (lod > LOD_MIN) {
        lod--;
      }
    }
    return { lodPlanes, sizeLods, sigmas };
  }
  function _createRenderTarget(width, height, params) {
    const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
  }
  function _setViewport(target, x, y, width, height) {
    target.viewport.set(x, y, width, height);
    target.scissor.set(x, y, width, height);
  }
  function _getBlurShader(lodMax, width, height) {
    const weights = new Float32Array(MAX_SAMPLES);
    const poleAxis = new Vector3(0, 1, 0);
    const shaderMaterial = new ShaderMaterial({
      name: "SphericalGaussianBlur",
      defines: {
        "n": MAX_SAMPLES,
        "CUBEUV_TEXEL_WIDTH": 1 / width,
        "CUBEUV_TEXEL_HEIGHT": 1 / height,
        "CUBEUV_MAX_MIP": `${lodMax}.0`
      },
      uniforms: {
        "envMap": { value: null },
        "samples": { value: 1 },
        "weights": { value: weights },
        "latitudinal": { value: false },
        "dTheta": { value: 0 },
        "mipInt": { value: 0 },
        "poleAxis": { value: poleAxis }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
    return shaderMaterial;
  }
  function _getEquirectMaterial() {
    return new ShaderMaterial({
      name: "EquirectangularToCubeUV",
      uniforms: {
        "envMap": { value: null }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
  }
  function _getCubemapMaterial() {
    return new ShaderMaterial({
      name: "CubemapToCubeUV",
      uniforms: {
        "envMap": { value: null },
        "flipEnvMap": { value: -1 }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
  }
  function _getCommonVertexShader() {
    return (
      /* glsl */
      `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
    );
  }
  function WebGLCubeUVMaps(renderer) {
    let cubeUVmaps = /* @__PURE__ */ new WeakMap();
    let pmremGenerator = null;
    function get(texture) {
      if (texture && texture.isTexture) {
        const mapping = texture.mapping;
        const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
        const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
        if (isEquirectMap || isCubeMap) {
          let renderTarget = cubeUVmaps.get(texture);
          const currentPMREMVersion = renderTarget !== void 0 ? renderTarget.texture.pmremVersion : 0;
          if (texture.isRenderTargetTexture && texture.pmremVersion !== currentPMREMVersion) {
            if (pmremGenerator === null)
              pmremGenerator = new PMREMGenerator(renderer);
            renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
            renderTarget.texture.pmremVersion = texture.pmremVersion;
            cubeUVmaps.set(texture, renderTarget);
            return renderTarget.texture;
          } else {
            if (renderTarget !== void 0) {
              return renderTarget.texture;
            } else {
              const image = texture.image;
              if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                if (pmremGenerator === null)
                  pmremGenerator = new PMREMGenerator(renderer);
                renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                renderTarget.texture.pmremVersion = texture.pmremVersion;
                cubeUVmaps.set(texture, renderTarget);
                texture.addEventListener("dispose", onTextureDispose);
                return renderTarget.texture;
              } else {
                return null;
              }
            }
          }
        }
      }
      return texture;
    }
    function isCubeTextureComplete(image) {
      let count = 0;
      const length = 6;
      for (let i = 0; i < length; i++) {
        if (image[i] !== void 0)
          count++;
      }
      return count === length;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemapUV = cubeUVmaps.get(texture);
      if (cubemapUV !== void 0) {
        cubeUVmaps.delete(texture);
        cubemapUV.dispose();
      }
    }
    function dispose() {
      cubeUVmaps = /* @__PURE__ */ new WeakMap();
      if (pmremGenerator !== null) {
        pmremGenerator.dispose();
        pmremGenerator = null;
      }
    }
    return {
      get,
      dispose
    };
  }
  function WebGLExtensions(gl) {
    const extensions = {};
    function getExtension(name) {
      if (extensions[name] !== void 0) {
        return extensions[name];
      }
      let extension;
      switch (name) {
        case "WEBGL_depth_texture":
          extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          extension = gl.getExtension(name);
      }
      extensions[name] = extension;
      return extension;
    }
    return {
      has: function(name) {
        return getExtension(name) !== null;
      },
      init: function() {
        getExtension("EXT_color_buffer_float");
        getExtension("WEBGL_clip_cull_distance");
        getExtension("OES_texture_float_linear");
        getExtension("EXT_color_buffer_half_float");
        getExtension("WEBGL_multisampled_render_to_texture");
        getExtension("WEBGL_render_shared_exponent");
      },
      get: function(name) {
        const extension = getExtension(name);
        if (extension === null) {
          warnOnce("THREE.WebGLRenderer: " + name + " extension not supported.");
        }
        return extension;
      }
    };
  }
  function WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = {};
    const wireframeAttributes = /* @__PURE__ */ new WeakMap();
    function onGeometryDispose(event) {
      const geometry = event.target;
      if (geometry.index !== null) {
        attributes.remove(geometry.index);
      }
      for (const name in geometry.attributes) {
        attributes.remove(geometry.attributes[name]);
      }
      geometry.removeEventListener("dispose", onGeometryDispose);
      delete geometries[geometry.id];
      const attribute = wireframeAttributes.get(geometry);
      if (attribute) {
        attributes.remove(attribute);
        wireframeAttributes.delete(geometry);
      }
      bindingStates.releaseStatesOfGeometry(geometry);
      if (geometry.isInstancedBufferGeometry === true) {
        delete geometry._maxInstanceCount;
      }
      info.memory.geometries--;
    }
    function get(object, geometry) {
      if (geometries[geometry.id] === true)
        return geometry;
      geometry.addEventListener("dispose", onGeometryDispose);
      geometries[geometry.id] = true;
      info.memory.geometries++;
      return geometry;
    }
    function update(geometry) {
      const geometryAttributes = geometry.attributes;
      for (const name in geometryAttributes) {
        attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
      }
    }
    function updateWireframeAttribute(geometry) {
      const indices = [];
      const geometryIndex = geometry.index;
      const geometryPosition = geometry.attributes.position;
      let version = 0;
      if (geometryIndex !== null) {
        const array = geometryIndex.array;
        version = geometryIndex.version;
        for (let i = 0, l = array.length; i < l; i += 3) {
          const a = array[i + 0];
          const b = array[i + 1];
          const c = array[i + 2];
          indices.push(a, b, b, c, c, a);
        }
      } else if (geometryPosition !== void 0) {
        const array = geometryPosition.array;
        version = geometryPosition.version;
        for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
          const a = i + 0;
          const b = i + 1;
          const c = i + 2;
          indices.push(a, b, b, c, c, a);
        }
      } else {
        return;
      }
      const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
      attribute.version = version;
      const previousAttribute = wireframeAttributes.get(geometry);
      if (previousAttribute)
        attributes.remove(previousAttribute);
      wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
      const currentAttribute = wireframeAttributes.get(geometry);
      if (currentAttribute) {
        const geometryIndex = geometry.index;
        if (geometryIndex !== null) {
          if (currentAttribute.version < geometryIndex.version) {
            updateWireframeAttribute(geometry);
          }
        }
      } else {
        updateWireframeAttribute(geometry);
      }
      return wireframeAttributes.get(geometry);
    }
    return {
      get,
      update,
      getWireframeAttribute
    };
  }
  function WebGLIndexedBufferRenderer(gl, extensions, info) {
    let mode;
    function setMode(value) {
      mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
      type = value.type;
      bytesPerElement = value.bytesPerElement;
    }
    function render(start, count) {
      gl.drawElements(mode, count, type, start * bytesPerElement);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      gl.drawElementsInstanced(mode, count, type, start * bytesPerElement, primcount);
      info.update(count, mode, primcount);
    }
    function renderMultiDraw(starts, counts, drawCount) {
      if (drawCount === 0)
        return;
      const extension = extensions.get("WEBGL_multi_draw");
      extension.multiDrawElementsWEBGL(mode, counts, 0, type, starts, 0, drawCount);
      let elementCount = 0;
      for (let i = 0; i < drawCount; i++) {
        elementCount += counts[i];
      }
      info.update(elementCount, mode, 1);
    }
    function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
      if (drawCount === 0)
        return;
      const extension = extensions.get("WEBGL_multi_draw");
      if (extension === null) {
        for (let i = 0; i < starts.length; i++) {
          renderInstances(starts[i] / bytesPerElement, counts[i], primcount[i]);
        }
      } else {
        extension.multiDrawElementsInstancedWEBGL(mode, counts, 0, type, starts, 0, primcount, 0, drawCount);
        let elementCount = 0;
        for (let i = 0; i < drawCount; i++) {
          elementCount += counts[i] * primcount[i];
        }
        info.update(elementCount, mode, 1);
      }
    }
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
    this.renderMultiDraw = renderMultiDraw;
    this.renderMultiDrawInstances = renderMultiDrawInstances;
  }
  function WebGLInfo(gl) {
    const memory = {
      geometries: 0,
      textures: 0
    };
    const render = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    function update(count, mode, instanceCount) {
      render.calls++;
      switch (mode) {
        case gl.TRIANGLES:
          render.triangles += instanceCount * (count / 3);
          break;
        case gl.LINES:
          render.lines += instanceCount * (count / 2);
          break;
        case gl.LINE_STRIP:
          render.lines += instanceCount * (count - 1);
          break;
        case gl.LINE_LOOP:
          render.lines += instanceCount * count;
          break;
        case gl.POINTS:
          render.points += instanceCount * count;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
          break;
      }
    }
    function reset() {
      render.calls = 0;
      render.triangles = 0;
      render.points = 0;
      render.lines = 0;
    }
    return {
      memory,
      render,
      programs: null,
      autoReset: true,
      reset,
      update
    };
  }
  function WebGLMorphtargets(gl, capabilities, textures) {
    const morphTextures = /* @__PURE__ */ new WeakMap();
    const morph = new Vector4();
    function update(object, geometry, program) {
      const objectInfluences = object.morphTargetInfluences;
      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      let entry = morphTextures.get(geometry);
      if (entry === void 0 || entry.count !== morphTargetsCount) {
        let disposeTexture = function() {
          texture.dispose();
          morphTextures.delete(geometry);
          geometry.removeEventListener("dispose", disposeTexture);
        };
        if (entry !== void 0)
          entry.texture.dispose();
        const hasMorphPosition = geometry.morphAttributes.position !== void 0;
        const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
        const hasMorphColors = geometry.morphAttributes.color !== void 0;
        const morphTargets = geometry.morphAttributes.position || [];
        const morphNormals = geometry.morphAttributes.normal || [];
        const morphColors = geometry.morphAttributes.color || [];
        let vertexDataCount = 0;
        if (hasMorphPosition === true)
          vertexDataCount = 1;
        if (hasMorphNormals === true)
          vertexDataCount = 2;
        if (hasMorphColors === true)
          vertexDataCount = 3;
        let width = geometry.attributes.position.count * vertexDataCount;
        let height = 1;
        if (width > capabilities.maxTextureSize) {
          height = Math.ceil(width / capabilities.maxTextureSize);
          width = capabilities.maxTextureSize;
        }
        const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
        const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
        texture.type = FloatType;
        texture.needsUpdate = true;
        const vertexDataStride = vertexDataCount * 4;
        for (let i = 0; i < morphTargetsCount; i++) {
          const morphTarget = morphTargets[i];
          const morphNormal = morphNormals[i];
          const morphColor = morphColors[i];
          const offset = width * height * 4 * i;
          for (let j = 0; j < morphTarget.count; j++) {
            const stride = j * vertexDataStride;
            if (hasMorphPosition === true) {
              morph.fromBufferAttribute(morphTarget, j);
              buffer[offset + stride + 0] = morph.x;
              buffer[offset + stride + 1] = morph.y;
              buffer[offset + stride + 2] = morph.z;
              buffer[offset + stride + 3] = 0;
            }
            if (hasMorphNormals === true) {
              morph.fromBufferAttribute(morphNormal, j);
              buffer[offset + stride + 4] = morph.x;
              buffer[offset + stride + 5] = morph.y;
              buffer[offset + stride + 6] = morph.z;
              buffer[offset + stride + 7] = 0;
            }
            if (hasMorphColors === true) {
              morph.fromBufferAttribute(morphColor, j);
              buffer[offset + stride + 8] = morph.x;
              buffer[offset + stride + 9] = morph.y;
              buffer[offset + stride + 10] = morph.z;
              buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
            }
          }
        }
        entry = {
          count: morphTargetsCount,
          texture,
          size: new Vector2(width, height)
        };
        morphTextures.set(geometry, entry);
        geometry.addEventListener("dispose", disposeTexture);
      }
      if (object.isInstancedMesh === true && object.morphTexture !== null) {
        program.getUniforms().setValue(gl, "morphTexture", object.morphTexture, textures);
      } else {
        let morphInfluencesSum = 0;
        for (let i = 0; i < objectInfluences.length; i++) {
          morphInfluencesSum += objectInfluences[i];
        }
        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
        program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
        program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
      }
      program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
      program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
    }
    return {
      update
    };
  }
  function WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = /* @__PURE__ */ new WeakMap();
    function update(object) {
      const frame = info.render.frame;
      const geometry = object.geometry;
      const buffergeometry = geometries.get(object, geometry);
      if (updateMap.get(buffergeometry) !== frame) {
        geometries.update(buffergeometry);
        updateMap.set(buffergeometry, frame);
      }
      if (object.isInstancedMesh) {
        if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) {
          object.addEventListener("dispose", onInstancedMeshDispose);
        }
        if (updateMap.get(object) !== frame) {
          attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
          if (object.instanceColor !== null) {
            attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
          }
          updateMap.set(object, frame);
        }
      }
      if (object.isSkinnedMesh) {
        const skeleton = object.skeleton;
        if (updateMap.get(skeleton) !== frame) {
          skeleton.update();
          updateMap.set(skeleton, frame);
        }
      }
      return buffergeometry;
    }
    function dispose() {
      updateMap = /* @__PURE__ */ new WeakMap();
    }
    function onInstancedMeshDispose(event) {
      const instancedMesh = event.target;
      instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
      attributes.remove(instancedMesh.instanceMatrix);
      if (instancedMesh.instanceColor !== null)
        attributes.remove(instancedMesh.instanceColor);
    }
    return {
      update,
      dispose
    };
  }
  var emptyTexture = /* @__PURE__ */ new Texture();
  var emptyShadowTexture = /* @__PURE__ */ new DepthTexture(1, 1);
  var emptyArrayTexture = /* @__PURE__ */ new DataArrayTexture();
  var empty3dTexture = /* @__PURE__ */ new Data3DTexture();
  var emptyCubeTexture = /* @__PURE__ */ new CubeTexture();
  var arrayCacheF32 = [];
  var arrayCacheI32 = [];
  var mat4array = new Float32Array(16);
  var mat3array = new Float32Array(9);
  var mat2array = new Float32Array(4);
  function flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0)
      return array;
    const n = nBlocks * blockSize;
    let r = arrayCacheF32[n];
    if (r === void 0) {
      r = new Float32Array(n);
      arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
      firstElem.toArray(r, 0);
      for (let i = 1, offset = 0; i !== nBlocks; ++i) {
        offset += blockSize;
        array[i].toArray(r, offset);
      }
    }
    return r;
  }
  function arraysEqual(a, b) {
    if (a.length !== b.length)
      return false;
    for (let i = 0, l = a.length; i < l; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  function copyArray(a, b) {
    for (let i = 0, l = b.length; i < l; i++) {
      a[i] = b[i];
    }
  }
  function allocTexUnits(textures, n) {
    let r = arrayCacheI32[n];
    if (r === void 0) {
      r = new Int32Array(n);
      arrayCacheI32[n] = r;
    }
    for (let i = 0; i !== n; ++i) {
      r[i] = textures.allocateTextureUnit();
    }
    return r;
  }
  function setValueV1f(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
  }
  function setValueV2f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2f(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform2fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3f(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else if (v.r !== void 0) {
      if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
        gl.uniform3f(this.addr, v.r, v.g, v.b);
        cache[0] = v.r;
        cache[1] = v.g;
        cache[2] = v.b;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform3fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform4fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueM2(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix2fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat2array.set(elements);
      gl.uniformMatrix2fv(this.addr, false, mat2array);
      copyArray(cache, elements);
    }
  }
  function setValueM3(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix3fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat3array.set(elements);
      gl.uniformMatrix3fv(this.addr, false, mat3array);
      copyArray(cache, elements);
    }
  }
  function setValueM4(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix4fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat4array.set(elements);
      gl.uniformMatrix4fv(this.addr, false, mat4array);
      copyArray(cache, elements);
    }
  }
  function setValueV1i(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
  }
  function setValueV2i(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2i(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform2iv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3i(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3i(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform3iv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4i(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform4iv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV1ui(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
  }
  function setValueV2ui(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2ui(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform2uiv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3ui(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3ui(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform3uiv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4ui(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform4uiv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueT1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    let emptyTexture2D;
    if (this.type === gl.SAMPLER_2D_SHADOW) {
      emptyShadowTexture.compareFunction = LessEqualCompare;
      emptyTexture2D = emptyShadowTexture;
    } else {
      emptyTexture2D = emptyTexture;
    }
    textures.setTexture2D(v || emptyTexture2D, unit);
  }
  function setValueT3D1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture3D(v || empty3dTexture, unit);
  }
  function setValueT6(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTextureCube(v || emptyCubeTexture, unit);
  }
  function setValueT2DArray1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture2DArray(v || emptyArrayTexture, unit);
  }
  function getSingularSetter(type) {
    switch (type) {
      case 5126:
        return setValueV1f;
      case 35664:
        return setValueV2f;
      case 35665:
        return setValueV3f;
      case 35666:
        return setValueV4f;
      case 35674:
        return setValueM2;
      case 35675:
        return setValueM3;
      case 35676:
        return setValueM4;
      case 5124:
      case 35670:
        return setValueV1i;
      case 35667:
      case 35671:
        return setValueV2i;
      case 35668:
      case 35672:
        return setValueV3i;
      case 35669:
      case 35673:
        return setValueV4i;
      case 5125:
        return setValueV1ui;
      case 36294:
        return setValueV2ui;
      case 36295:
        return setValueV3ui;
      case 36296:
        return setValueV4ui;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3D1;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArray1;
    }
  }
  function setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
  }
  function setValueV2fArray(gl, v) {
    const data = flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
  }
  function setValueV3fArray(gl, v) {
    const data = flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
  }
  function setValueV4fArray(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
  }
  function setValueM2Array(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
  }
  function setValueM3Array(gl, v) {
    const data = flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
  }
  function setValueM4Array(gl, v) {
    const data = flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
  }
  function setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
  }
  function setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
  }
  function setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
  }
  function setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
  }
  function setValueV1uiArray(gl, v) {
    gl.uniform1uiv(this.addr, v);
  }
  function setValueV2uiArray(gl, v) {
    gl.uniform2uiv(this.addr, v);
  }
  function setValueV3uiArray(gl, v) {
    gl.uniform3uiv(this.addr, v);
  }
  function setValueV4uiArray(gl, v) {
    gl.uniform4uiv(this.addr, v);
  }
  function setValueT1Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture2D(v[i] || emptyTexture, units[i]);
    }
  }
  function setValueT3DArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture3D(v[i] || empty3dTexture, units[i]);
    }
  }
  function setValueT6Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
    }
  }
  function setValueT2DArrayArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
    }
  }
  function getPureArraySetter(type) {
    switch (type) {
      case 5126:
        return setValueV1fArray;
      case 35664:
        return setValueV2fArray;
      case 35665:
        return setValueV3fArray;
      case 35666:
        return setValueV4fArray;
      case 35674:
        return setValueM2Array;
      case 35675:
        return setValueM3Array;
      case 35676:
        return setValueM4Array;
      case 5124:
      case 35670:
        return setValueV1iArray;
      case 35667:
      case 35671:
        return setValueV2iArray;
      case 35668:
      case 35672:
        return setValueV3iArray;
      case 35669:
      case 35673:
        return setValueV4iArray;
      case 5125:
        return setValueV1uiArray;
      case 36294:
        return setValueV2uiArray;
      case 36295:
        return setValueV3uiArray;
      case 36296:
        return setValueV4uiArray;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1Array;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3DArray;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6Array;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArrayArray;
    }
  }
  var SingleUniform = class {
    constructor(id, activeInfo, addr) {
      this.id = id;
      this.addr = addr;
      this.cache = [];
      this.type = activeInfo.type;
      this.setValue = getSingularSetter(activeInfo.type);
    }
  };
  var PureArrayUniform = class {
    constructor(id, activeInfo, addr) {
      this.id = id;
      this.addr = addr;
      this.cache = [];
      this.type = activeInfo.type;
      this.size = activeInfo.size;
      this.setValue = getPureArraySetter(activeInfo.type);
    }
  };
  var StructuredUniform = class {
    constructor(id) {
      this.id = id;
      this.seq = [];
      this.map = {};
    }
    setValue(gl, value, textures) {
      const seq = this.seq;
      for (let i = 0, n = seq.length; i !== n; ++i) {
        const u = seq[i];
        u.setValue(gl, value[u.id], textures);
      }
    }
  };
  var RePathPart = /(\w+)(\])?(\[|\.)?/g;
  function addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
  }
  function parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    RePathPart.lastIndex = 0;
    while (true) {
      const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
      let id = match[1];
      const idIsIndex = match[2] === "]", subscript = match[3];
      if (idIsIndex)
        id = id | 0;
      if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
        addUniform(container, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
        break;
      } else {
        const map = container.map;
        let next = map[id];
        if (next === void 0) {
          next = new StructuredUniform(id);
          addUniform(container, next);
        }
        container = next;
      }
    }
  }
  var WebGLUniforms = class {
    constructor(gl, program) {
      this.seq = [];
      this.map = {};
      const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
      for (let i = 0; i < n; ++i) {
        const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
        parseUniform(info, addr, this);
      }
    }
    setValue(gl, name, value, textures) {
      const u = this.map[name];
      if (u !== void 0)
        u.setValue(gl, value, textures);
    }
    setOptional(gl, object, name) {
      const v = object[name];
      if (v !== void 0)
        this.setValue(gl, name, v);
    }
    static upload(gl, seq, values, textures) {
      for (let i = 0, n = seq.length; i !== n; ++i) {
        const u = seq[i], v = values[u.id];
        if (v.needsUpdate !== false) {
          u.setValue(gl, v.value, textures);
        }
      }
    }
    static seqWithValue(seq, values) {
      const r = [];
      for (let i = 0, n = seq.length; i !== n; ++i) {
        const u = seq[i];
        if (u.id in values)
          r.push(u);
      }
      return r;
    }
  };
  function WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
  }
  var COMPLETION_STATUS_KHR = 37297;
  var programIdCount = 0;
  function handleSource(string, errorLine) {
    const lines = string.split("\n");
    const lines2 = [];
    const from = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for (let i = from; i < to; i++) {
      const line = i + 1;
      lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
    }
    return lines2.join("\n");
  }
  var _m0 = /* @__PURE__ */ new Matrix3();
  function getEncodingComponents(colorSpace) {
    ColorManagement._getMatrix(_m0, ColorManagement.workingColorSpace, colorSpace);
    const encodingMatrix = `mat3( ${_m0.elements.map((v) => v.toFixed(4))} )`;
    switch (ColorManagement.getTransfer(colorSpace)) {
      case LinearTransfer:
        return [encodingMatrix, "LinearTransferOETF"];
      case SRGBTransfer:
        return [encodingMatrix, "sRGBTransferOETF"];
      default:
        console.warn("THREE.WebGLProgram: Unsupported color space: ", colorSpace);
        return [encodingMatrix, "LinearTransferOETF"];
    }
  }
  function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "")
      return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
      const errorLine = parseInt(errorMatches[1]);
      return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
    } else {
      return errors;
    }
  }
  function getTexelEncodingFunction(functionName, colorSpace) {
    const components = getEncodingComponents(colorSpace);
    return [
      `vec4 ${functionName}( vec4 value ) {`,
      `	return ${components[1]}( vec4( value.rgb * ${components[0]}, value.a ) );`,
      "}"
    ].join("\n");
  }
  function getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch (toneMapping) {
      case LinearToneMapping:
        toneMappingName = "Linear";
        break;
      case ReinhardToneMapping:
        toneMappingName = "Reinhard";
        break;
      case CineonToneMapping:
        toneMappingName = "Cineon";
        break;
      case ACESFilmicToneMapping:
        toneMappingName = "ACESFilmic";
        break;
      case AgXToneMapping:
        toneMappingName = "AgX";
        break;
      case NeutralToneMapping:
        toneMappingName = "Neutral";
        break;
      case CustomToneMapping:
        toneMappingName = "Custom";
        break;
      default:
        console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
        toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
  }
  var _v0 = /* @__PURE__ */ new Vector3();
  function getLuminanceFunction() {
    ColorManagement.getLuminanceCoefficients(_v0);
    const r = _v0.x.toFixed(4);
    const g = _v0.y.toFixed(4);
    const b = _v0.z.toFixed(4);
    return [
      "float luminance( const in vec3 rgb ) {",
      `	const vec3 weights = vec3( ${r}, ${g}, ${b} );`,
      "	return dot( weights, rgb );",
      "}"
    ].join("\n");
  }
  function generateVertexExtensions(parameters) {
    const chunks = [
      parameters.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
      parameters.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
    ];
    return chunks.filter(filterEmptyLine).join("\n");
  }
  function generateDefines(defines) {
    const chunks = [];
    for (const name in defines) {
      const value = defines[name];
      if (value === false)
        continue;
      chunks.push("#define " + name + " " + value);
    }
    return chunks.join("\n");
  }
  function fetchAttributeLocations(gl, program) {
    const attributes = {};
    const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
    for (let i = 0; i < n; i++) {
      const info = gl.getActiveAttrib(program, i);
      const name = info.name;
      let locationSize = 1;
      if (info.type === gl.FLOAT_MAT2)
        locationSize = 2;
      if (info.type === gl.FLOAT_MAT3)
        locationSize = 3;
      if (info.type === gl.FLOAT_MAT4)
        locationSize = 4;
      attributes[name] = {
        type: info.type,
        location: gl.getAttribLocation(program, name),
        locationSize
      };
    }
    return attributes;
  }
  function filterEmptyLine(string) {
    return string !== "";
  }
  function replaceLightNums(string, parameters) {
    const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
  }
  function replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
  }
  var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function resolveIncludes(string) {
    return string.replace(includePattern, includeReplacer);
  }
  var shaderChunkMap = /* @__PURE__ */ new Map();
  function includeReplacer(match, include) {
    let string = ShaderChunk[include];
    if (string === void 0) {
      const newInclude = shaderChunkMap.get(include);
      if (newInclude !== void 0) {
        string = ShaderChunk[newInclude];
        console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude);
      } else {
        throw new Error("Can not resolve #include <" + include + ">");
      }
    }
    return resolveIncludes(string);
  }
  var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
  function unrollLoops(string) {
    return string.replace(unrollLoopPattern, loopReplacer);
  }
  function loopReplacer(match, start, end, snippet) {
    let string = "";
    for (let i = parseInt(start); i < parseInt(end); i++) {
      string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
    }
    return string;
  }
  function generatePrecision(parameters) {
    let precisionstring = `precision ${parameters.precision} float;
	precision ${parameters.precision} int;
	precision ${parameters.precision} sampler2D;
	precision ${parameters.precision} samplerCube;
	precision ${parameters.precision} sampler3D;
	precision ${parameters.precision} sampler2DArray;
	precision ${parameters.precision} sampler2DShadow;
	precision ${parameters.precision} samplerCubeShadow;
	precision ${parameters.precision} sampler2DArrayShadow;
	precision ${parameters.precision} isampler2D;
	precision ${parameters.precision} isampler3D;
	precision ${parameters.precision} isamplerCube;
	precision ${parameters.precision} isampler2DArray;
	precision ${parameters.precision} usampler2D;
	precision ${parameters.precision} usampler3D;
	precision ${parameters.precision} usamplerCube;
	precision ${parameters.precision} usampler2DArray;
	`;
    if (parameters.precision === "highp") {
      precisionstring += "\n#define HIGH_PRECISION";
    } else if (parameters.precision === "mediump") {
      precisionstring += "\n#define MEDIUM_PRECISION";
    } else if (parameters.precision === "lowp") {
      precisionstring += "\n#define LOW_PRECISION";
    }
    return precisionstring;
  }
  function generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === PCFShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    } else if (parameters.shadowMapType === PCFSoftShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    } else if (parameters.shadowMapType === VSMShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    }
    return shadowMapTypeDefine;
  }
  function generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeReflectionMapping:
        case CubeRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE";
          break;
        case CubeUVReflectionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
          break;
      }
    }
    return envMapTypeDefine;
  }
  function generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeRefractionMapping:
          envMapModeDefine = "ENVMAP_MODE_REFRACTION";
          break;
      }
    }
    return envMapModeDefine;
  }
  function generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) {
      switch (parameters.combine) {
        case MultiplyOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case MixOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
          break;
        case AddOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
          break;
      }
    }
    return envMapBlendingDefine;
  }
  function generateCubeUVSize(parameters) {
    const imageHeight = parameters.envMapCubeUVHeight;
    if (imageHeight === null)
      return null;
    const maxMip = Math.log2(imageHeight) - 2;
    const texelHeight = 1 / imageHeight;
    const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
    return { texelWidth, texelHeight, maxMip };
  }
  function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    const gl = renderer.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
    const envMapCubeUVSize = generateCubeUVSize(parameters);
    const customVertexExtensions = generateVertexExtensions(parameters);
    const customDefines = generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
      prefixVertex = [
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixVertex.length > 0) {
        prefixVertex += "\n";
      }
      prefixFragment = [
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixFragment.length > 0) {
        prefixFragment += "\n";
      }
    } else {
      prefixVertex = [
        generatePrecision(parameters),
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
        parameters.batching ? "#define USE_BATCHING" : "",
        parameters.batchingColor ? "#define USE_BATCHING_COLOR" : "",
        parameters.instancing ? "#define USE_INSTANCING" : "",
        parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        parameters.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
        parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        //
        parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
        parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
        parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
        parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
        parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
        parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
        parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
        parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
        parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
        parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
        parameters.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + parameters.anisotropyMapUv : "",
        parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
        parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
        parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
        parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
        parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
        parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
        parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
        parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
        parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
        parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
        parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
        parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
        //
        parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
        parameters.vertexColors ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUv1s ? "#define USE_UV1" : "",
        parameters.vertexUv2s ? "#define USE_UV2" : "",
        parameters.vertexUv3s ? "#define USE_UV3" : "",
        parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.skinning ? "#define USE_SKINNING" : "",
        parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
        parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
        parameters.morphColors ? "#define USE_MORPHCOLORS" : "",
        parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
        parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "#ifdef USE_INSTANCING_MORPH",
        "	uniform sampler2D morphTexture;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_UV1",
        "	attribute vec2 uv1;",
        "#endif",
        "#ifdef USE_UV2",
        "	attribute vec2 uv2;",
        "#endif",
        "#ifdef USE_UV3",
        "	attribute vec2 uv3;",
        "#endif",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#if defined( USE_COLOR_ALPHA )",
        "	attribute vec4 color;",
        "#elif defined( USE_COLOR )",
        "	attribute vec3 color;",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        "\n"
      ].filter(filterEmptyLine).join("\n");
      prefixFragment = [
        generatePrecision(parameters),
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.matcap ? "#define USE_MATCAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapTypeDefine : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.envMap ? "#define " + envMapBlendingDefine : "",
        envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
        envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
        envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
        parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.dispersion ? "#define USE_DISPERSION" : "",
        parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
        parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.alphaTest ? "#define USE_ALPHATEST" : "",
        parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
        parameters.sheen ? "#define USE_SHEEN" : "",
        parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
        parameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUv1s ? "#define USE_UV1" : "",
        parameters.vertexUv2s ? "#define USE_UV2" : "",
        parameters.vertexUv3s ? "#define USE_UV3" : "",
        parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
        parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        parameters.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
        parameters.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
        parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
        // this code is required here because it is used by the toneMapping() function defined below
        parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
        parameters.dithering ? "#define DITHERING" : "",
        parameters.opaque ? "#define OPAQUE" : "",
        ShaderChunk["colorspace_pars_fragment"],
        // this code is required here because it is used by the various encoding/decoding function defined below
        getTexelEncodingFunction("linearToOutputTexel", parameters.outputColorSpace),
        getLuminanceFunction(),
        parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
        "\n"
      ].filter(filterEmptyLine).join("\n");
    }
    vertexShader = resolveIncludes(vertexShader);
    vertexShader = replaceLightNums(vertexShader, parameters);
    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = resolveIncludes(fragmentShader);
    fragmentShader = replaceLightNums(fragmentShader, parameters);
    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = unrollLoops(vertexShader);
    fragmentShader = unrollLoops(fragmentShader);
    if (parameters.isRawShaderMaterial !== true) {
      versionString = "#version 300 es\n";
      prefixVertex = [
        customVertexExtensions,
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
      ].join("\n") + "\n" + prefixVertex;
      prefixFragment = [
        "#define varying in",
        parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
        parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
      ].join("\n") + "\n" + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
    const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    if (parameters.index0AttributeName !== void 0) {
      gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    } else if (parameters.morphTargets === true) {
      gl.bindAttribLocation(program, 0, "position");
    }
    gl.linkProgram(program);
    function onFirstUse(self2) {
      if (renderer.debug.checkShaderErrors) {
        const programLog = gl.getProgramInfoLog(program).trim();
        const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
        const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
        let runnable = true;
        let haveDiagnostics = true;
        if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
          runnable = false;
          if (typeof renderer.debug.onShaderError === "function") {
            renderer.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);
          } else {
            const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
            const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
            console.error(
              "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\nMaterial Name: " + self2.name + "\nMaterial Type: " + self2.type + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
            );
          }
        } else if (programLog !== "") {
          console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
        } else if (vertexLog === "" || fragmentLog === "") {
          haveDiagnostics = false;
        }
        if (haveDiagnostics) {
          self2.diagnostics = {
            runnable,
            programLog,
            vertexShader: {
              log: vertexLog,
              prefix: prefixVertex
            },
            fragmentShader: {
              log: fragmentLog,
              prefix: prefixFragment
            }
          };
        }
      }
      gl.deleteShader(glVertexShader);
      gl.deleteShader(glFragmentShader);
      cachedUniforms = new WebGLUniforms(gl, program);
      cachedAttributes = fetchAttributeLocations(gl, program);
    }
    let cachedUniforms;
    this.getUniforms = function() {
      if (cachedUniforms === void 0) {
        onFirstUse(this);
      }
      return cachedUniforms;
    };
    let cachedAttributes;
    this.getAttributes = function() {
      if (cachedAttributes === void 0) {
        onFirstUse(this);
      }
      return cachedAttributes;
    };
    let programReady = parameters.rendererExtensionParallelShaderCompile === false;
    this.isReady = function() {
      if (programReady === false) {
        programReady = gl.getProgramParameter(program, COMPLETION_STATUS_KHR);
      }
      return programReady;
    };
    this.destroy = function() {
      bindingStates.releaseStatesOfProgram(this);
      gl.deleteProgram(program);
      this.program = void 0;
    };
    this.type = parameters.shaderType;
    this.name = parameters.shaderName;
    this.id = programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
  }
  var _id = 0;
  var WebGLShaderCache = class {
    constructor() {
      this.shaderCache = /* @__PURE__ */ new Map();
      this.materialCache = /* @__PURE__ */ new Map();
    }
    update(material) {
      const vertexShader = material.vertexShader;
      const fragmentShader = material.fragmentShader;
      const vertexShaderStage = this._getShaderStage(vertexShader);
      const fragmentShaderStage = this._getShaderStage(fragmentShader);
      const materialShaders = this._getShaderCacheForMaterial(material);
      if (materialShaders.has(vertexShaderStage) === false) {
        materialShaders.add(vertexShaderStage);
        vertexShaderStage.usedTimes++;
      }
      if (materialShaders.has(fragmentShaderStage) === false) {
        materialShaders.add(fragmentShaderStage);
        fragmentShaderStage.usedTimes++;
      }
      return this;
    }
    remove(material) {
      const materialShaders = this.materialCache.get(material);
      for (const shaderStage of materialShaders) {
        shaderStage.usedTimes--;
        if (shaderStage.usedTimes === 0)
          this.shaderCache.delete(shaderStage.code);
      }
      this.materialCache.delete(material);
      return this;
    }
    getVertexShaderID(material) {
      return this._getShaderStage(material.vertexShader).id;
    }
    getFragmentShaderID(material) {
      return this._getShaderStage(material.fragmentShader).id;
    }
    dispose() {
      this.shaderCache.clear();
      this.materialCache.clear();
    }
    _getShaderCacheForMaterial(material) {
      const cache = this.materialCache;
      let set = cache.get(material);
      if (set === void 0) {
        set = /* @__PURE__ */ new Set();
        cache.set(material, set);
      }
      return set;
    }
    _getShaderStage(code) {
      const cache = this.shaderCache;
      let stage = cache.get(code);
      if (stage === void 0) {
        stage = new WebGLShaderStage(code);
        cache.set(code, stage);
      }
      return stage;
    }
  };
  var WebGLShaderStage = class {
    constructor(code) {
      this.id = _id++;
      this.code = code;
      this.usedTimes = 0;
    }
  };
  function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
    const _programLayers = new Layers();
    const _customShaders = new WebGLShaderCache();
    const _activeChannels = /* @__PURE__ */ new Set();
    const programs = [];
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "toon",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    };
    function getChannel(value) {
      _activeChannels.add(value);
      if (value === 0)
        return "uv";
      return `uv${value}`;
    }
    function getParameters(material, lights, shadows, scene, object) {
      const fog = scene.fog;
      const geometry = object.geometry;
      const environment = material.isMeshStandardMaterial ? scene.environment : null;
      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
      const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
      const shaderID = shaderIDs[material.type];
      if (material.precision !== null) {
        precision = capabilities.getMaxPrecision(material.precision);
        if (precision !== material.precision) {
          console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
      }
      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      let morphTextureStride = 0;
      if (geometry.morphAttributes.position !== void 0)
        morphTextureStride = 1;
      if (geometry.morphAttributes.normal !== void 0)
        morphTextureStride = 2;
      if (geometry.morphAttributes.color !== void 0)
        morphTextureStride = 3;
      let vertexShader, fragmentShader;
      let customVertexShaderID, customFragmentShaderID;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        vertexShader = shader.vertexShader;
        fragmentShader = shader.fragmentShader;
      } else {
        vertexShader = material.vertexShader;
        fragmentShader = material.fragmentShader;
        _customShaders.update(material);
        customVertexShaderID = _customShaders.getVertexShaderID(material);
        customFragmentShaderID = _customShaders.getFragmentShaderID(material);
      }
      const currentRenderTarget = renderer.getRenderTarget();
      const reverseDepthBuffer = renderer.state.buffers.depth.getReversed();
      const IS_INSTANCEDMESH = object.isInstancedMesh === true;
      const IS_BATCHEDMESH = object.isBatchedMesh === true;
      const HAS_MAP = !!material.map;
      const HAS_MATCAP = !!material.matcap;
      const HAS_ENVMAP = !!envMap;
      const HAS_AOMAP = !!material.aoMap;
      const HAS_LIGHTMAP = !!material.lightMap;
      const HAS_BUMPMAP = !!material.bumpMap;
      const HAS_NORMALMAP = !!material.normalMap;
      const HAS_DISPLACEMENTMAP = !!material.displacementMap;
      const HAS_EMISSIVEMAP = !!material.emissiveMap;
      const HAS_METALNESSMAP = !!material.metalnessMap;
      const HAS_ROUGHNESSMAP = !!material.roughnessMap;
      const HAS_ANISOTROPY = material.anisotropy > 0;
      const HAS_CLEARCOAT = material.clearcoat > 0;
      const HAS_DISPERSION = material.dispersion > 0;
      const HAS_IRIDESCENCE = material.iridescence > 0;
      const HAS_SHEEN = material.sheen > 0;
      const HAS_TRANSMISSION = material.transmission > 0;
      const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material.anisotropyMap;
      const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;
      const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;
      const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;
      const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;
      const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;
      const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;
      const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;
      const HAS_SPECULARMAP = !!material.specularMap;
      const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;
      const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;
      const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;
      const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;
      const HAS_GRADIENTMAP = !!material.gradientMap;
      const HAS_ALPHAMAP = !!material.alphaMap;
      const HAS_ALPHATEST = material.alphaTest > 0;
      const HAS_ALPHAHASH = !!material.alphaHash;
      const HAS_EXTENSIONS = !!material.extensions;
      let toneMapping = NoToneMapping;
      if (material.toneMapped) {
        if (currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true) {
          toneMapping = renderer.toneMapping;
        }
      }
      const parameters = {
        shaderID,
        shaderType: material.type,
        shaderName: material.name,
        vertexShader,
        fragmentShader,
        defines: material.defines,
        customVertexShaderID,
        customFragmentShaderID,
        isRawShaderMaterial: material.isRawShaderMaterial === true,
        glslVersion: material.glslVersion,
        precision,
        batching: IS_BATCHEDMESH,
        batchingColor: IS_BATCHEDMESH && object._colorsTexture !== null,
        instancing: IS_INSTANCEDMESH,
        instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
        instancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,
        supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
        outputColorSpace: currentRenderTarget === null ? renderer.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace,
        alphaToCoverage: !!material.alphaToCoverage,
        map: HAS_MAP,
        matcap: HAS_MATCAP,
        envMap: HAS_ENVMAP,
        envMapMode: HAS_ENVMAP && envMap.mapping,
        envMapCubeUVHeight,
        aoMap: HAS_AOMAP,
        lightMap: HAS_LIGHTMAP,
        bumpMap: HAS_BUMPMAP,
        normalMap: HAS_NORMALMAP,
        displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
        emissiveMap: HAS_EMISSIVEMAP,
        normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
        normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,
        metalnessMap: HAS_METALNESSMAP,
        roughnessMap: HAS_ROUGHNESSMAP,
        anisotropy: HAS_ANISOTROPY,
        anisotropyMap: HAS_ANISOTROPYMAP,
        clearcoat: HAS_CLEARCOAT,
        clearcoatMap: HAS_CLEARCOATMAP,
        clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
        clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
        dispersion: HAS_DISPERSION,
        iridescence: HAS_IRIDESCENCE,
        iridescenceMap: HAS_IRIDESCENCEMAP,
        iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
        sheen: HAS_SHEEN,
        sheenColorMap: HAS_SHEEN_COLORMAP,
        sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
        specularMap: HAS_SPECULARMAP,
        specularColorMap: HAS_SPECULAR_COLORMAP,
        specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
        transmission: HAS_TRANSMISSION,
        transmissionMap: HAS_TRANSMISSIONMAP,
        thicknessMap: HAS_THICKNESSMAP,
        gradientMap: HAS_GRADIENTMAP,
        opaque: material.transparent === false && material.blending === NormalBlending && material.alphaToCoverage === false,
        alphaMap: HAS_ALPHAMAP,
        alphaTest: HAS_ALPHATEST,
        alphaHash: HAS_ALPHAHASH,
        combine: material.combine,
        //
        mapUv: HAS_MAP && getChannel(material.map.channel),
        aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),
        lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),
        bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),
        normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),
        displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),
        emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),
        metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),
        roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),
        anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material.anisotropyMap.channel),
        clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),
        clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),
        clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),
        iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),
        iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),
        sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),
        sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),
        specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),
        specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),
        specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),
        transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),
        thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),
        alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),
        //
        vertexTangents: !!geometry.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),
        vertexColors: material.vertexColors,
        vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
        pointsUvs: object.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
        fog: !!fog,
        useFog: material.fog === true,
        fogExp2: !!fog && fog.isFogExp2,
        flatShading: material.flatShading === true,
        sizeAttenuation: material.sizeAttenuation === true,
        logarithmicDepthBuffer,
        reverseDepthBuffer,
        skinning: object.isSkinnedMesh === true,
        morphTargets: geometry.morphAttributes.position !== void 0,
        morphNormals: geometry.morphAttributes.normal !== void 0,
        morphColors: geometry.morphAttributes.color !== void 0,
        morphTargetsCount,
        morphTextureStride,
        numDirLights: lights.directional.length,
        numPointLights: lights.point.length,
        numSpotLights: lights.spot.length,
        numSpotLightMaps: lights.spotLightMap.length,
        numRectAreaLights: lights.rectArea.length,
        numHemiLights: lights.hemi.length,
        numDirLightShadows: lights.directionalShadowMap.length,
        numPointLightShadows: lights.pointShadowMap.length,
        numSpotLightShadows: lights.spotShadowMap.length,
        numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
        numLightProbes: lights.numLightProbes,
        numClippingPlanes: clipping.numPlanes,
        numClipIntersection: clipping.numIntersection,
        dithering: material.dithering,
        shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
        shadowMapType: renderer.shadowMap.type,
        toneMapping,
        decodeVideoTexture: HAS_MAP && material.map.isVideoTexture === true && ColorManagement.getTransfer(material.map.colorSpace) === SRGBTransfer,
        decodeVideoTextureEmissive: HAS_EMISSIVEMAP && material.emissiveMap.isVideoTexture === true && ColorManagement.getTransfer(material.emissiveMap.colorSpace) === SRGBTransfer,
        premultipliedAlpha: material.premultipliedAlpha,
        doubleSided: material.side === DoubleSide,
        flipSided: material.side === BackSide,
        useDepthPacking: material.depthPacking >= 0,
        depthPacking: material.depthPacking || 0,
        index0AttributeName: material.index0AttributeName,
        extensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has("WEBGL_clip_cull_distance"),
        extensionMultiDraw: (HAS_EXTENSIONS && material.extensions.multiDraw === true || IS_BATCHEDMESH) && extensions.has("WEBGL_multi_draw"),
        rendererExtensionParallelShaderCompile: extensions.has("KHR_parallel_shader_compile"),
        customProgramCacheKey: material.customProgramCacheKey()
      };
      parameters.vertexUv1s = _activeChannels.has(1);
      parameters.vertexUv2s = _activeChannels.has(2);
      parameters.vertexUv3s = _activeChannels.has(3);
      _activeChannels.clear();
      return parameters;
    }
    function getProgramCacheKey(parameters) {
      const array = [];
      if (parameters.shaderID) {
        array.push(parameters.shaderID);
      } else {
        array.push(parameters.customVertexShaderID);
        array.push(parameters.customFragmentShaderID);
      }
      if (parameters.defines !== void 0) {
        for (const name in parameters.defines) {
          array.push(name);
          array.push(parameters.defines[name]);
        }
      }
      if (parameters.isRawShaderMaterial === false) {
        getProgramCacheKeyParameters(array, parameters);
        getProgramCacheKeyBooleans(array, parameters);
        array.push(renderer.outputColorSpace);
      }
      array.push(parameters.customProgramCacheKey);
      return array.join();
    }
    function getProgramCacheKeyParameters(array, parameters) {
      array.push(parameters.precision);
      array.push(parameters.outputColorSpace);
      array.push(parameters.envMapMode);
      array.push(parameters.envMapCubeUVHeight);
      array.push(parameters.mapUv);
      array.push(parameters.alphaMapUv);
      array.push(parameters.lightMapUv);
      array.push(parameters.aoMapUv);
      array.push(parameters.bumpMapUv);
      array.push(parameters.normalMapUv);
      array.push(parameters.displacementMapUv);
      array.push(parameters.emissiveMapUv);
      array.push(parameters.metalnessMapUv);
      array.push(parameters.roughnessMapUv);
      array.push(parameters.anisotropyMapUv);
      array.push(parameters.clearcoatMapUv);
      array.push(parameters.clearcoatNormalMapUv);
      array.push(parameters.clearcoatRoughnessMapUv);
      array.push(parameters.iridescenceMapUv);
      array.push(parameters.iridescenceThicknessMapUv);
      array.push(parameters.sheenColorMapUv);
      array.push(parameters.sheenRoughnessMapUv);
      array.push(parameters.specularMapUv);
      array.push(parameters.specularColorMapUv);
      array.push(parameters.specularIntensityMapUv);
      array.push(parameters.transmissionMapUv);
      array.push(parameters.thicknessMapUv);
      array.push(parameters.combine);
      array.push(parameters.fogExp2);
      array.push(parameters.sizeAttenuation);
      array.push(parameters.morphTargetsCount);
      array.push(parameters.morphAttributeCount);
      array.push(parameters.numDirLights);
      array.push(parameters.numPointLights);
      array.push(parameters.numSpotLights);
      array.push(parameters.numSpotLightMaps);
      array.push(parameters.numHemiLights);
      array.push(parameters.numRectAreaLights);
      array.push(parameters.numDirLightShadows);
      array.push(parameters.numPointLightShadows);
      array.push(parameters.numSpotLightShadows);
      array.push(parameters.numSpotLightShadowsWithMaps);
      array.push(parameters.numLightProbes);
      array.push(parameters.shadowMapType);
      array.push(parameters.toneMapping);
      array.push(parameters.numClippingPlanes);
      array.push(parameters.numClipIntersection);
      array.push(parameters.depthPacking);
    }
    function getProgramCacheKeyBooleans(array, parameters) {
      _programLayers.disableAll();
      if (parameters.supportsVertexTextures)
        _programLayers.enable(0);
      if (parameters.instancing)
        _programLayers.enable(1);
      if (parameters.instancingColor)
        _programLayers.enable(2);
      if (parameters.instancingMorph)
        _programLayers.enable(3);
      if (parameters.matcap)
        _programLayers.enable(4);
      if (parameters.envMap)
        _programLayers.enable(5);
      if (parameters.normalMapObjectSpace)
        _programLayers.enable(6);
      if (parameters.normalMapTangentSpace)
        _programLayers.enable(7);
      if (parameters.clearcoat)
        _programLayers.enable(8);
      if (parameters.iridescence)
        _programLayers.enable(9);
      if (parameters.alphaTest)
        _programLayers.enable(10);
      if (parameters.vertexColors)
        _programLayers.enable(11);
      if (parameters.vertexAlphas)
        _programLayers.enable(12);
      if (parameters.vertexUv1s)
        _programLayers.enable(13);
      if (parameters.vertexUv2s)
        _programLayers.enable(14);
      if (parameters.vertexUv3s)
        _programLayers.enable(15);
      if (parameters.vertexTangents)
        _programLayers.enable(16);
      if (parameters.anisotropy)
        _programLayers.enable(17);
      if (parameters.alphaHash)
        _programLayers.enable(18);
      if (parameters.batching)
        _programLayers.enable(19);
      if (parameters.dispersion)
        _programLayers.enable(20);
      if (parameters.batchingColor)
        _programLayers.enable(21);
      array.push(_programLayers.mask);
      _programLayers.disableAll();
      if (parameters.fog)
        _programLayers.enable(0);
      if (parameters.useFog)
        _programLayers.enable(1);
      if (parameters.flatShading)
        _programLayers.enable(2);
      if (parameters.logarithmicDepthBuffer)
        _programLayers.enable(3);
      if (parameters.reverseDepthBuffer)
        _programLayers.enable(4);
      if (parameters.skinning)
        _programLayers.enable(5);
      if (parameters.morphTargets)
        _programLayers.enable(6);
      if (parameters.morphNormals)
        _programLayers.enable(7);
      if (parameters.morphColors)
        _programLayers.enable(8);
      if (parameters.premultipliedAlpha)
        _programLayers.enable(9);
      if (parameters.shadowMapEnabled)
        _programLayers.enable(10);
      if (parameters.doubleSided)
        _programLayers.enable(11);
      if (parameters.flipSided)
        _programLayers.enable(12);
      if (parameters.useDepthPacking)
        _programLayers.enable(13);
      if (parameters.dithering)
        _programLayers.enable(14);
      if (parameters.transmission)
        _programLayers.enable(15);
      if (parameters.sheen)
        _programLayers.enable(16);
      if (parameters.opaque)
        _programLayers.enable(17);
      if (parameters.pointsUvs)
        _programLayers.enable(18);
      if (parameters.decodeVideoTexture)
        _programLayers.enable(19);
      if (parameters.decodeVideoTextureEmissive)
        _programLayers.enable(20);
      if (parameters.alphaToCoverage)
        _programLayers.enable(21);
      array.push(_programLayers.mask);
    }
    function getUniforms(material) {
      const shaderID = shaderIDs[material.type];
      let uniforms;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        uniforms = UniformsUtils.clone(shader.uniforms);
      } else {
        uniforms = material.uniforms;
      }
      return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
      let program;
      for (let p = 0, pl = programs.length; p < pl; p++) {
        const preexistingProgram = programs[p];
        if (preexistingProgram.cacheKey === cacheKey) {
          program = preexistingProgram;
          ++program.usedTimes;
          break;
        }
      }
      if (program === void 0) {
        program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
        programs.push(program);
      }
      return program;
    }
    function releaseProgram(program) {
      if (--program.usedTimes === 0) {
        const i = programs.indexOf(program);
        programs[i] = programs[programs.length - 1];
        programs.pop();
        program.destroy();
      }
    }
    function releaseShaderCache(material) {
      _customShaders.remove(material);
    }
    function dispose() {
      _customShaders.dispose();
    }
    return {
      getParameters,
      getProgramCacheKey,
      getUniforms,
      acquireProgram,
      releaseProgram,
      releaseShaderCache,
      // Exposed for resource monitoring & error feedback via renderer.info:
      programs,
      dispose
    };
  }
  function WebGLProperties() {
    let properties = /* @__PURE__ */ new WeakMap();
    function has(object) {
      return properties.has(object);
    }
    function get(object) {
      let map = properties.get(object);
      if (map === void 0) {
        map = {};
        properties.set(object, map);
      }
      return map;
    }
    function remove(object) {
      properties.delete(object);
    }
    function update(object, key, value) {
      properties.get(object)[key] = value;
    }
    function dispose() {
      properties = /* @__PURE__ */ new WeakMap();
    }
    return {
      has,
      get,
      remove,
      update,
      dispose
    };
  }
  function painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.material.id !== b.material.id) {
      return a.material.id - b.material.id;
    } else if (a.z !== b.z) {
      return a.z - b.z;
    } else {
      return a.id - b.id;
    }
  }
  function reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.z !== b.z) {
      return b.z - a.z;
    } else {
      return a.id - b.id;
    }
  }
  function WebGLRenderList() {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transmissive = [];
    const transparent = [];
    function init() {
      renderItemsIndex = 0;
      opaque.length = 0;
      transmissive.length = 0;
      transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
      let renderItem = renderItems[renderItemsIndex];
      if (renderItem === void 0) {
        renderItem = {
          id: object.id,
          object,
          geometry,
          material,
          groupOrder,
          renderOrder: object.renderOrder,
          z,
          group
        };
        renderItems[renderItemsIndex] = renderItem;
      } else {
        renderItem.id = object.id;
        renderItem.object = object;
        renderItem.geometry = geometry;
        renderItem.material = material;
        renderItem.groupOrder = groupOrder;
        renderItem.renderOrder = object.renderOrder;
        renderItem.z = z;
        renderItem.group = group;
      }
      renderItemsIndex++;
      return renderItem;
    }
    function push(object, geometry, material, groupOrder, z, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
      if (material.transmission > 0) {
        transmissive.push(renderItem);
      } else if (material.transparent === true) {
        transparent.push(renderItem);
      } else {
        opaque.push(renderItem);
      }
    }
    function unshift(object, geometry, material, groupOrder, z, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
      if (material.transmission > 0) {
        transmissive.unshift(renderItem);
      } else if (material.transparent === true) {
        transparent.unshift(renderItem);
      } else {
        opaque.unshift(renderItem);
      }
    }
    function sort(customOpaqueSort, customTransparentSort) {
      if (opaque.length > 1)
        opaque.sort(customOpaqueSort || painterSortStable);
      if (transmissive.length > 1)
        transmissive.sort(customTransparentSort || reversePainterSortStable);
      if (transparent.length > 1)
        transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    function finish() {
      for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
        const renderItem = renderItems[i];
        if (renderItem.id === null)
          break;
        renderItem.id = null;
        renderItem.object = null;
        renderItem.geometry = null;
        renderItem.material = null;
        renderItem.group = null;
      }
    }
    return {
      opaque,
      transmissive,
      transparent,
      init,
      push,
      unshift,
      finish,
      sort
    };
  }
  function WebGLRenderLists() {
    let lists = /* @__PURE__ */ new WeakMap();
    function get(scene, renderCallDepth) {
      const listArray = lists.get(scene);
      let list;
      if (listArray === void 0) {
        list = new WebGLRenderList();
        lists.set(scene, [list]);
      } else {
        if (renderCallDepth >= listArray.length) {
          list = new WebGLRenderList();
          listArray.push(list);
        } else {
          list = listArray[renderCallDepth];
        }
      }
      return list;
    }
    function dispose() {
      lists = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function UniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              direction: new Vector3(),
              color: new Color()
            };
            break;
          case "SpotLight":
            uniforms = {
              position: new Vector3(),
              direction: new Vector3(),
              color: new Color(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0
            };
            break;
          case "PointLight":
            uniforms = {
              position: new Vector3(),
              color: new Color(),
              distance: 0,
              decay: 0
            };
            break;
          case "HemisphereLight":
            uniforms = {
              direction: new Vector3(),
              skyColor: new Color(),
              groundColor: new Color()
            };
            break;
          case "RectAreaLight":
            uniforms = {
              color: new Color(),
              position: new Vector3(),
              halfWidth: new Vector3(),
              halfHeight: new Vector3()
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  function ShadowUniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              shadowIntensity: 1,
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "SpotLight":
            uniforms = {
              shadowIntensity: 1,
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "PointLight":
            uniforms = {
              shadowIntensity: 1,
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2(),
              shadowCameraNear: 1,
              shadowCameraFar: 1e3
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  var nextVersion = 0;
  function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
  }
  function WebGLLights(extensions) {
    const cache = new UniformsCache();
    const shadowCache = ShadowUniformsCache();
    const state = {
      version: 0,
      hash: {
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        numDirectionalShadows: -1,
        numPointShadows: -1,
        numSpotShadows: -1,
        numSpotMaps: -1,
        numLightProbes: -1
      },
      ambient: [0, 0, 0],
      probe: [],
      directional: [],
      directionalShadow: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotLightMap: [],
      spotShadow: [],
      spotShadowMap: [],
      spotLightMatrix: [],
      rectArea: [],
      rectAreaLTC1: null,
      rectAreaLTC2: null,
      point: [],
      pointShadow: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: [],
      numSpotLightShadowsWithMaps: 0,
      numLightProbes: 0
    };
    for (let i = 0; i < 9; i++)
      state.probe.push(new Vector3());
    const vector3 = new Vector3();
    const matrix4 = new Matrix4();
    const matrix42 = new Matrix4();
    function setup(lights) {
      let r = 0, g = 0, b = 0;
      for (let i = 0; i < 9; i++)
        state.probe[i].set(0, 0, 0);
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      let numDirectionalShadows = 0;
      let numPointShadows = 0;
      let numSpotShadows = 0;
      let numSpotMaps = 0;
      let numSpotShadowsWithMaps = 0;
      let numLightProbes = 0;
      lights.sort(shadowCastingAndTexturingLightsFirst);
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        const color = light.color;
        const intensity = light.intensity;
        const distance = light.distance;
        const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
        if (light.isAmbientLight) {
          r += color.r * intensity;
          g += color.g * intensity;
          b += color.b * intensity;
        } else if (light.isLightProbe) {
          for (let j = 0; j < 9; j++) {
            state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
          }
          numLightProbes++;
        } else if (light.isDirectionalLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity);
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowIntensity = shadow.intensity;
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.directionalShadow[directionalLength] = shadowUniforms;
            state.directionalShadowMap[directionalLength] = shadowMap;
            state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
            numDirectionalShadows++;
          }
          state.directional[directionalLength] = uniforms;
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = cache.get(light);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.distance = distance;
          uniforms.coneCos = Math.cos(light.angle);
          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
          uniforms.decay = light.decay;
          state.spot[spotLength] = uniforms;
          const shadow = light.shadow;
          if (light.map) {
            state.spotLightMap[numSpotMaps] = light.map;
            numSpotMaps++;
            shadow.updateMatrices(light);
            if (light.castShadow)
              numSpotShadowsWithMaps++;
          }
          state.spotLightMatrix[spotLength] = shadow.matrix;
          if (light.castShadow) {
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowIntensity = shadow.intensity;
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.spotShadow[spotLength] = shadowUniforms;
            state.spotShadowMap[spotLength] = shadowMap;
            numSpotShadows++;
          }
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          state.rectArea[rectAreaLength] = uniforms;
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity);
          uniforms.distance = light.distance;
          uniforms.decay = light.decay;
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowIntensity = shadow.intensity;
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            shadowUniforms.shadowCameraNear = shadow.camera.near;
            shadowUniforms.shadowCameraFar = shadow.camera.far;
            state.pointShadow[pointLength] = shadowUniforms;
            state.pointShadowMap[pointLength] = shadowMap;
            state.pointShadowMatrix[pointLength] = light.shadow.matrix;
            numPointShadows++;
          }
          state.point[pointLength] = uniforms;
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = cache.get(light);
          uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
          uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
          state.hemi[hemiLength] = uniforms;
          hemiLength++;
        }
      }
      if (rectAreaLength > 0) {
        if (extensions.has("OES_texture_float_linear") === true) {
          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else {
          state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
          state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
        }
      }
      state.ambient[0] = r;
      state.ambient[1] = g;
      state.ambient[2] = b;
      const hash = state.hash;
      if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps || hash.numLightProbes !== numLightProbes) {
        state.directional.length = directionalLength;
        state.spot.length = spotLength;
        state.rectArea.length = rectAreaLength;
        state.point.length = pointLength;
        state.hemi.length = hemiLength;
        state.directionalShadow.length = numDirectionalShadows;
        state.directionalShadowMap.length = numDirectionalShadows;
        state.pointShadow.length = numPointShadows;
        state.pointShadowMap.length = numPointShadows;
        state.spotShadow.length = numSpotShadows;
        state.spotShadowMap.length = numSpotShadows;
        state.directionalShadowMatrix.length = numDirectionalShadows;
        state.pointShadowMatrix.length = numPointShadows;
        state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
        state.spotLightMap.length = numSpotMaps;
        state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
        state.numLightProbes = numLightProbes;
        hash.directionalLength = directionalLength;
        hash.pointLength = pointLength;
        hash.spotLength = spotLength;
        hash.rectAreaLength = rectAreaLength;
        hash.hemiLength = hemiLength;
        hash.numDirectionalShadows = numDirectionalShadows;
        hash.numPointShadows = numPointShadows;
        hash.numSpotShadows = numSpotShadows;
        hash.numSpotMaps = numSpotMaps;
        hash.numLightProbes = numLightProbes;
        state.version = nextVersion++;
      }
    }
    function setupView(lights, camera) {
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      const viewMatrix = camera.matrixWorldInverse;
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        if (light.isDirectionalLight) {
          const uniforms = state.directional[directionalLength];
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = state.spot[spotLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = state.rectArea[rectAreaLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          matrix42.identity();
          matrix4.copy(light.matrixWorld);
          matrix4.premultiply(viewMatrix);
          matrix42.extractRotation(matrix4);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          uniforms.halfWidth.applyMatrix4(matrix42);
          uniforms.halfHeight.applyMatrix4(matrix42);
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = state.point[pointLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = state.hemi[hemiLength];
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          uniforms.direction.transformDirection(viewMatrix);
          hemiLength++;
        }
      }
    }
    return {
      setup,
      setupView,
      state
    };
  }
  function WebGLRenderState(extensions) {
    const lights = new WebGLLights(extensions);
    const lightsArray = [];
    const shadowsArray = [];
    function init(camera) {
      state.camera = camera;
      lightsArray.length = 0;
      shadowsArray.length = 0;
    }
    function pushLight(light) {
      lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
      shadowsArray.push(shadowLight);
    }
    function setupLights() {
      lights.setup(lightsArray);
    }
    function setupLightsView(camera) {
      lights.setupView(lightsArray, camera);
    }
    const state = {
      lightsArray,
      shadowsArray,
      camera: null,
      lights,
      transmissionRenderTarget: {}
    };
    return {
      init,
      state,
      setupLights,
      setupLightsView,
      pushLight,
      pushShadow
    };
  }
  function WebGLRenderStates(extensions) {
    let renderStates = /* @__PURE__ */ new WeakMap();
    function get(scene, renderCallDepth = 0) {
      const renderStateArray = renderStates.get(scene);
      let renderState;
      if (renderStateArray === void 0) {
        renderState = new WebGLRenderState(extensions);
        renderStates.set(scene, [renderState]);
      } else {
        if (renderCallDepth >= renderStateArray.length) {
          renderState = new WebGLRenderState(extensions);
          renderStateArray.push(renderState);
        } else {
          renderState = renderStateArray[renderCallDepth];
        }
      }
      return renderState;
    }
    function dispose() {
      renderStates = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  var vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
  var fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
  function WebGLShadowMap(renderer, objects, capabilities) {
    let _frustum = new Frustum();
    const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterial = new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = capabilities.maxTextureSize;
    const shadowSide = { [FrontSide]: BackSide, [BackSide]: FrontSide, [DoubleSide]: DoubleSide };
    const shadowMaterialVertical = new ShaderMaterial({
      defines: {
        VSM_SAMPLES: 8
      },
      uniforms: {
        shadow_pass: { value: null },
        resolution: { value: new Vector2() },
        radius: { value: 4 }
      },
      vertexShader: vertex,
      fragmentShader: fragment
    });
    const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    const fullScreenTri = new BufferGeometry();
    fullScreenTri.setAttribute(
      "position",
      new BufferAttribute(
        new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
        3
      )
    );
    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = PCFShadowMap;
    let _previousType = this.type;
    this.render = function(lights, scene, camera) {
      if (scope.enabled === false)
        return;
      if (scope.autoUpdate === false && scope.needsUpdate === false)
        return;
      if (lights.length === 0)
        return;
      const currentRenderTarget = renderer.getRenderTarget();
      const activeCubeFace = renderer.getActiveCubeFace();
      const activeMipmapLevel = renderer.getActiveMipmapLevel();
      const _state = renderer.state;
      _state.setBlending(NoBlending);
      _state.buffers.color.setClear(1, 1, 1, 1);
      _state.buffers.depth.setTest(true);
      _state.setScissorTest(false);
      const toVSM = _previousType !== VSMShadowMap && this.type === VSMShadowMap;
      const fromVSM = _previousType === VSMShadowMap && this.type !== VSMShadowMap;
      for (let i = 0, il = lights.length; i < il; i++) {
        const light = lights[i];
        const shadow = light.shadow;
        if (shadow === void 0) {
          console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
          continue;
        }
        if (shadow.autoUpdate === false && shadow.needsUpdate === false)
          continue;
        _shadowMapSize.copy(shadow.mapSize);
        const shadowFrameExtents = shadow.getFrameExtents();
        _shadowMapSize.multiply(shadowFrameExtents);
        _viewportSize.copy(shadow.mapSize);
        if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
          if (_shadowMapSize.x > _maxTextureSize) {
            _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
            shadow.mapSize.x = _viewportSize.x;
          }
          if (_shadowMapSize.y > _maxTextureSize) {
            _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
            shadow.mapSize.y = _viewportSize.y;
          }
        }
        if (shadow.map === null || toVSM === true || fromVSM === true) {
          const pars = this.type !== VSMShadowMap ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
          if (shadow.map !== null) {
            shadow.map.dispose();
          }
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light.name + ".shadowMap";
          shadow.camera.updateProjectionMatrix();
        }
        renderer.setRenderTarget(shadow.map);
        renderer.clear();
        const viewportCount = shadow.getViewportCount();
        for (let vp = 0; vp < viewportCount; vp++) {
          const viewport = shadow.getViewport(vp);
          _viewport.set(
            _viewportSize.x * viewport.x,
            _viewportSize.y * viewport.y,
            _viewportSize.x * viewport.z,
            _viewportSize.y * viewport.w
          );
          _state.viewport(_viewport);
          shadow.updateMatrices(light, vp);
          _frustum = shadow.getFrustum();
          renderObject(scene, camera, shadow.camera, light, this.type);
        }
        if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
          VSMPass(shadow, camera);
        }
        shadow.needsUpdate = false;
      }
      _previousType = this.type;
      scope.needsUpdate = false;
      renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera) {
      const geometry = objects.update(fullScreenMesh);
      if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
        shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialVertical.needsUpdate = true;
        shadowMaterialHorizontal.needsUpdate = true;
      }
      if (shadow.mapPass === null) {
        shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
      }
      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialVertical.uniforms.radius.value = shadow.radius;
      renderer.setRenderTarget(shadow.mapPass);
      renderer.clear();
      renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
      shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
      shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
      renderer.setRenderTarget(shadow.map);
      renderer.clear();
      renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    }
    function getDepthMaterial(object, material, light, type) {
      let result = null;
      const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
      if (customMaterial !== void 0) {
        result = customMaterial;
      } else {
        result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
        if (renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
          const keyA = result.uuid, keyB = material.uuid;
          let materialsForVariant = _materialCache[keyA];
          if (materialsForVariant === void 0) {
            materialsForVariant = {};
            _materialCache[keyA] = materialsForVariant;
          }
          let cachedMaterial = materialsForVariant[keyB];
          if (cachedMaterial === void 0) {
            cachedMaterial = result.clone();
            materialsForVariant[keyB] = cachedMaterial;
            material.addEventListener("dispose", onMaterialDispose);
          }
          result = cachedMaterial;
        }
      }
      result.visible = material.visible;
      result.wireframe = material.wireframe;
      if (type === VSMShadowMap) {
        result.side = material.shadowSide !== null ? material.shadowSide : material.side;
      } else {
        result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
      }
      result.alphaMap = material.alphaMap;
      result.alphaTest = material.alphaTest;
      result.map = material.map;
      result.clipShadows = material.clipShadows;
      result.clippingPlanes = material.clippingPlanes;
      result.clipIntersection = material.clipIntersection;
      result.displacementMap = material.displacementMap;
      result.displacementScale = material.displacementScale;
      result.displacementBias = material.displacementBias;
      result.wireframeLinewidth = material.wireframeLinewidth;
      result.linewidth = material.linewidth;
      if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
        const materialProperties = renderer.properties.get(result);
        materialProperties.light = light;
      }
      return result;
    }
    function renderObject(object, camera, shadowCamera, light, type) {
      if (object.visible === false)
        return;
      const visible = object.layers.test(camera.layers);
      if (visible && (object.isMesh || object.isLine || object.isPoints)) {
        if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
          object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
          const geometry = objects.update(object);
          const material = object.material;
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let k = 0, kl = groups.length; k < kl; k++) {
              const group = groups[k];
              const groupMaterial = material[group.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);
                object.onBeforeShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, group);
                renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
                object.onAfterShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, group);
              }
            }
          } else if (material.visible) {
            const depthMaterial = getDepthMaterial(object, material, light, type);
            object.onBeforeShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, null);
            renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
            object.onAfterShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, null);
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        renderObject(children[i], camera, shadowCamera, light, type);
      }
    }
    function onMaterialDispose(event) {
      const material = event.target;
      material.removeEventListener("dispose", onMaterialDispose);
      for (const id in _materialCache) {
        const cache = _materialCache[id];
        const uuid = event.target.uuid;
        if (uuid in cache) {
          const shadowMaterial = cache[uuid];
          shadowMaterial.dispose();
          delete cache[uuid];
        }
      }
    }
  }
  var reversedFuncs = {
    [NeverDepth]: AlwaysDepth,
    [LessDepth]: GreaterDepth,
    [EqualDepth]: NotEqualDepth,
    [LessEqualDepth]: GreaterEqualDepth,
    [AlwaysDepth]: NeverDepth,
    [GreaterDepth]: LessDepth,
    [NotEqualDepth]: EqualDepth,
    [GreaterEqualDepth]: LessEqualDepth
  };
  function WebGLState(gl, extensions) {
    function ColorBuffer() {
      let locked = false;
      const color = new Vector4();
      let currentColorMask = null;
      const currentColorClear = new Vector4(0, 0, 0, 0);
      return {
        setMask: function(colorMask) {
          if (currentColorMask !== colorMask && !locked) {
            gl.colorMask(colorMask, colorMask, colorMask, colorMask);
            currentColorMask = colorMask;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(r, g, b, a, premultipliedAlpha) {
          if (premultipliedAlpha === true) {
            r *= a;
            g *= a;
            b *= a;
          }
          color.set(r, g, b, a);
          if (currentColorClear.equals(color) === false) {
            gl.clearColor(r, g, b, a);
            currentColorClear.copy(color);
          }
        },
        reset: function() {
          locked = false;
          currentColorMask = null;
          currentColorClear.set(-1, 0, 0, 0);
        }
      };
    }
    function DepthBuffer() {
      let locked = false;
      let reversed = false;
      let currentDepthMask = null;
      let currentDepthFunc = null;
      let currentDepthClear = null;
      return {
        setReversed: function(value) {
          if (reversed !== value) {
            const ext = extensions.get("EXT_clip_control");
            if (reversed) {
              ext.clipControlEXT(ext.LOWER_LEFT_EXT, ext.ZERO_TO_ONE_EXT);
            } else {
              ext.clipControlEXT(ext.LOWER_LEFT_EXT, ext.NEGATIVE_ONE_TO_ONE_EXT);
            }
            const oldDepth = currentDepthClear;
            currentDepthClear = null;
            this.setClear(oldDepth);
          }
          reversed = value;
        },
        getReversed: function() {
          return reversed;
        },
        setTest: function(depthTest) {
          if (depthTest) {
            enable(gl.DEPTH_TEST);
          } else {
            disable(gl.DEPTH_TEST);
          }
        },
        setMask: function(depthMask) {
          if (currentDepthMask !== depthMask && !locked) {
            gl.depthMask(depthMask);
            currentDepthMask = depthMask;
          }
        },
        setFunc: function(depthFunc) {
          if (reversed)
            depthFunc = reversedFuncs[depthFunc];
          if (currentDepthFunc !== depthFunc) {
            switch (depthFunc) {
              case NeverDepth:
                gl.depthFunc(gl.NEVER);
                break;
              case AlwaysDepth:
                gl.depthFunc(gl.ALWAYS);
                break;
              case LessDepth:
                gl.depthFunc(gl.LESS);
                break;
              case LessEqualDepth:
                gl.depthFunc(gl.LEQUAL);
                break;
              case EqualDepth:
                gl.depthFunc(gl.EQUAL);
                break;
              case GreaterEqualDepth:
                gl.depthFunc(gl.GEQUAL);
                break;
              case GreaterDepth:
                gl.depthFunc(gl.GREATER);
                break;
              case NotEqualDepth:
                gl.depthFunc(gl.NOTEQUAL);
                break;
              default:
                gl.depthFunc(gl.LEQUAL);
            }
            currentDepthFunc = depthFunc;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(depth) {
          if (currentDepthClear !== depth) {
            if (reversed) {
              depth = 1 - depth;
            }
            gl.clearDepth(depth);
            currentDepthClear = depth;
          }
        },
        reset: function() {
          locked = false;
          currentDepthMask = null;
          currentDepthFunc = null;
          currentDepthClear = null;
          reversed = false;
        }
      };
    }
    function StencilBuffer() {
      let locked = false;
      let currentStencilMask = null;
      let currentStencilFunc = null;
      let currentStencilRef = null;
      let currentStencilFuncMask = null;
      let currentStencilFail = null;
      let currentStencilZFail = null;
      let currentStencilZPass = null;
      let currentStencilClear = null;
      return {
        setTest: function(stencilTest) {
          if (!locked) {
            if (stencilTest) {
              enable(gl.STENCIL_TEST);
            } else {
              disable(gl.STENCIL_TEST);
            }
          }
        },
        setMask: function(stencilMask) {
          if (currentStencilMask !== stencilMask && !locked) {
            gl.stencilMask(stencilMask);
            currentStencilMask = stencilMask;
          }
        },
        setFunc: function(stencilFunc, stencilRef, stencilMask) {
          if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
            currentStencilFunc = stencilFunc;
            currentStencilRef = stencilRef;
            currentStencilFuncMask = stencilMask;
          }
        },
        setOp: function(stencilFail, stencilZFail, stencilZPass) {
          if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
            currentStencilFail = stencilFail;
            currentStencilZFail = stencilZFail;
            currentStencilZPass = stencilZPass;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(stencil) {
          if (currentStencilClear !== stencil) {
            gl.clearStencil(stencil);
            currentStencilClear = stencil;
          }
        },
        reset: function() {
          locked = false;
          currentStencilMask = null;
          currentStencilFunc = null;
          currentStencilRef = null;
          currentStencilFuncMask = null;
          currentStencilFail = null;
          currentStencilZFail = null;
          currentStencilZPass = null;
          currentStencilClear = null;
        }
      };
    }
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    const uboBindings = /* @__PURE__ */ new WeakMap();
    const uboProgramMap = /* @__PURE__ */ new WeakMap();
    let enabledCapabilities = {};
    let currentBoundFramebuffers = {};
    let currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    let defaultDrawbuffers = [];
    let currentProgram = null;
    let currentBlendingEnabled = false;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentBlendColor = new Color(0, 0, 0);
    let currentBlendAlpha = 0;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(gl.VERSION);
    if (glVersion.indexOf("WebGL") !== -1) {
      version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 1;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
      version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 2;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {};
    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
    const viewportParam = gl.getParameter(gl.VIEWPORT);
    const currentScissor = new Vector4().fromArray(scissorParam);
    const currentViewport = new Vector4().fromArray(viewportParam);
    function createTexture(type, target, count, dimensions) {
      const data = new Uint8Array(4);
      const texture = gl.createTexture();
      gl.bindTexture(type, texture);
      gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      for (let i = 0; i < count; i++) {
        if (type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY) {
          gl.texImage3D(target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        } else {
          gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        }
      }
      return texture;
    }
    const emptyTextures = {};
    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
    emptyTextures[gl.TEXTURE_2D_ARRAY] = createTexture(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1);
    emptyTextures[gl.TEXTURE_3D] = createTexture(gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1);
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(gl.DEPTH_TEST);
    depthBuffer.setFunc(LessEqualDepth);
    setFlipSided(false);
    setCullFace(CullFaceBack);
    enable(gl.CULL_FACE);
    setBlending(NoBlending);
    function enable(id) {
      if (enabledCapabilities[id] !== true) {
        gl.enable(id);
        enabledCapabilities[id] = true;
      }
    }
    function disable(id) {
      if (enabledCapabilities[id] !== false) {
        gl.disable(id);
        enabledCapabilities[id] = false;
      }
    }
    function bindFramebuffer(target, framebuffer) {
      if (currentBoundFramebuffers[target] !== framebuffer) {
        gl.bindFramebuffer(target, framebuffer);
        currentBoundFramebuffers[target] = framebuffer;
        if (target === gl.DRAW_FRAMEBUFFER) {
          currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
        }
        if (target === gl.FRAMEBUFFER) {
          currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
        }
        return true;
      }
      return false;
    }
    function drawBuffers(renderTarget, framebuffer) {
      let drawBuffers2 = defaultDrawbuffers;
      let needsUpdate = false;
      if (renderTarget) {
        drawBuffers2 = currentDrawbuffers.get(framebuffer);
        if (drawBuffers2 === void 0) {
          drawBuffers2 = [];
          currentDrawbuffers.set(framebuffer, drawBuffers2);
        }
        const textures = renderTarget.textures;
        if (drawBuffers2.length !== textures.length || drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
          for (let i = 0, il = textures.length; i < il; i++) {
            drawBuffers2[i] = gl.COLOR_ATTACHMENT0 + i;
          }
          drawBuffers2.length = textures.length;
          needsUpdate = true;
        }
      } else {
        if (drawBuffers2[0] !== gl.BACK) {
          drawBuffers2[0] = gl.BACK;
          needsUpdate = true;
        }
      }
      if (needsUpdate) {
        gl.drawBuffers(drawBuffers2);
      }
    }
    function useProgram(program) {
      if (currentProgram !== program) {
        gl.useProgram(program);
        currentProgram = program;
        return true;
      }
      return false;
    }
    const equationToGL = {
      [AddEquation]: gl.FUNC_ADD,
      [SubtractEquation]: gl.FUNC_SUBTRACT,
      [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
    };
    equationToGL[MinEquation] = gl.MIN;
    equationToGL[MaxEquation] = gl.MAX;
    const factorToGL = {
      [ZeroFactor]: gl.ZERO,
      [OneFactor]: gl.ONE,
      [SrcColorFactor]: gl.SRC_COLOR,
      [SrcAlphaFactor]: gl.SRC_ALPHA,
      [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
      [DstColorFactor]: gl.DST_COLOR,
      [DstAlphaFactor]: gl.DST_ALPHA,
      [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
      [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
      [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
      [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA,
      [ConstantColorFactor]: gl.CONSTANT_COLOR,
      [OneMinusConstantColorFactor]: gl.ONE_MINUS_CONSTANT_COLOR,
      [ConstantAlphaFactor]: gl.CONSTANT_ALPHA,
      [OneMinusConstantAlphaFactor]: gl.ONE_MINUS_CONSTANT_ALPHA
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha) {
      if (blending === NoBlending) {
        if (currentBlendingEnabled === true) {
          disable(gl.BLEND);
          currentBlendingEnabled = false;
        }
        return;
      }
      if (currentBlendingEnabled === false) {
        enable(gl.BLEND);
        currentBlendingEnabled = true;
      }
      if (blending !== CustomBlending) {
        if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
          if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
            gl.blendEquation(gl.FUNC_ADD);
            currentBlendEquation = AddEquation;
            currentBlendEquationAlpha = AddEquation;
          }
          if (premultipliedAlpha) {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.ONE, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          } else {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          }
          currentBlendSrc = null;
          currentBlendDst = null;
          currentBlendSrcAlpha = null;
          currentBlendDstAlpha = null;
          currentBlendColor.set(0, 0, 0);
          currentBlendAlpha = 0;
          currentBlending = blending;
          currentPremultipledAlpha = premultipliedAlpha;
        }
        return;
      }
      blendEquationAlpha = blendEquationAlpha || blendEquation;
      blendSrcAlpha = blendSrcAlpha || blendSrc;
      blendDstAlpha = blendDstAlpha || blendDst;
      if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
        currentBlendEquation = blendEquation;
        currentBlendEquationAlpha = blendEquationAlpha;
      }
      if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
        gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
        currentBlendSrc = blendSrc;
        currentBlendDst = blendDst;
        currentBlendSrcAlpha = blendSrcAlpha;
        currentBlendDstAlpha = blendDstAlpha;
      }
      if (blendColor.equals(currentBlendColor) === false || blendAlpha !== currentBlendAlpha) {
        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendAlpha);
        currentBlendColor.copy(blendColor);
        currentBlendAlpha = blendAlpha;
      }
      currentBlending = blending;
      currentPremultipledAlpha = false;
    }
    function setMaterial(material, frontFaceCW) {
      material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
      let flipSided = material.side === BackSide;
      if (frontFaceCW)
        flipSided = !flipSided;
      setFlipSided(flipSided);
      material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha);
      depthBuffer.setFunc(material.depthFunc);
      depthBuffer.setTest(material.depthTest);
      depthBuffer.setMask(material.depthWrite);
      colorBuffer.setMask(material.colorWrite);
      const stencilWrite = material.stencilWrite;
      stencilBuffer.setTest(stencilWrite);
      if (stencilWrite) {
        stencilBuffer.setMask(material.stencilWriteMask);
        stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
        stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
      }
      setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
      material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    }
    function setFlipSided(flipSided) {
      if (currentFlipSided !== flipSided) {
        if (flipSided) {
          gl.frontFace(gl.CW);
        } else {
          gl.frontFace(gl.CCW);
        }
        currentFlipSided = flipSided;
      }
    }
    function setCullFace(cullFace) {
      if (cullFace !== CullFaceNone) {
        enable(gl.CULL_FACE);
        if (cullFace !== currentCullFace) {
          if (cullFace === CullFaceBack) {
            gl.cullFace(gl.BACK);
          } else if (cullFace === CullFaceFront) {
            gl.cullFace(gl.FRONT);
          } else {
            gl.cullFace(gl.FRONT_AND_BACK);
          }
        }
      } else {
        disable(gl.CULL_FACE);
      }
      currentCullFace = cullFace;
    }
    function setLineWidth(width) {
      if (width !== currentLineWidth) {
        if (lineWidthAvailable)
          gl.lineWidth(width);
        currentLineWidth = width;
      }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
      if (polygonOffset) {
        enable(gl.POLYGON_OFFSET_FILL);
        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
          gl.polygonOffset(factor, units);
          currentPolygonOffsetFactor = factor;
          currentPolygonOffsetUnits = units;
        }
      } else {
        disable(gl.POLYGON_OFFSET_FILL);
      }
    }
    function setScissorTest(scissorTest) {
      if (scissorTest) {
        enable(gl.SCISSOR_TEST);
      } else {
        disable(gl.SCISSOR_TEST);
      }
    }
    function activeTexture(webglSlot) {
      if (webglSlot === void 0)
        webglSlot = gl.TEXTURE0 + maxTextures - 1;
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
    }
    function bindTexture(webglType, webglTexture, webglSlot) {
      if (webglSlot === void 0) {
        if (currentTextureSlot === null) {
          webglSlot = gl.TEXTURE0 + maxTextures - 1;
        } else {
          webglSlot = currentTextureSlot;
        }
      }
      let boundTexture = currentBoundTextures[webglSlot];
      if (boundTexture === void 0) {
        boundTexture = { type: void 0, texture: void 0 };
        currentBoundTextures[webglSlot] = boundTexture;
      }
      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
        if (currentTextureSlot !== webglSlot) {
          gl.activeTexture(webglSlot);
          currentTextureSlot = webglSlot;
        }
        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
        boundTexture.type = webglType;
        boundTexture.texture = webglTexture;
      }
    }
    function unbindTexture() {
      const boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture !== void 0 && boundTexture.type !== void 0) {
        gl.bindTexture(boundTexture.type, null);
        boundTexture.type = void 0;
        boundTexture.texture = void 0;
      }
    }
    function compressedTexImage2D() {
      try {
        gl.compressedTexImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexImage3D() {
      try {
        gl.compressedTexImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage2D() {
      try {
        gl.texSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage3D() {
      try {
        gl.texSubImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexSubImage2D() {
      try {
        gl.compressedTexSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexSubImage3D() {
      try {
        gl.compressedTexSubImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage2D() {
      try {
        gl.texStorage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage3D() {
      try {
        gl.texStorage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage2D() {
      try {
        gl.texImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage3D() {
      try {
        gl.texImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function scissor(scissor2) {
      if (currentScissor.equals(scissor2) === false) {
        gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
        currentScissor.copy(scissor2);
      }
    }
    function viewport(viewport2) {
      if (currentViewport.equals(viewport2) === false) {
        gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
        currentViewport.copy(viewport2);
      }
    }
    function updateUBOMapping(uniformsGroup, program) {
      let mapping = uboProgramMap.get(program);
      if (mapping === void 0) {
        mapping = /* @__PURE__ */ new WeakMap();
        uboProgramMap.set(program, mapping);
      }
      let blockIndex = mapping.get(uniformsGroup);
      if (blockIndex === void 0) {
        blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
        mapping.set(uniformsGroup, blockIndex);
      }
    }
    function uniformBlockBinding(uniformsGroup, program) {
      const mapping = uboProgramMap.get(program);
      const blockIndex = mapping.get(uniformsGroup);
      if (uboBindings.get(program) !== blockIndex) {
        gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
        uboBindings.set(program, blockIndex);
      }
    }
    function reset() {
      gl.disable(gl.BLEND);
      gl.disable(gl.CULL_FACE);
      gl.disable(gl.DEPTH_TEST);
      gl.disable(gl.POLYGON_OFFSET_FILL);
      gl.disable(gl.SCISSOR_TEST);
      gl.disable(gl.STENCIL_TEST);
      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      gl.blendEquation(gl.FUNC_ADD);
      gl.blendFunc(gl.ONE, gl.ZERO);
      gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
      gl.blendColor(0, 0, 0, 0);
      gl.colorMask(true, true, true, true);
      gl.clearColor(0, 0, 0, 0);
      gl.depthMask(true);
      gl.depthFunc(gl.LESS);
      depthBuffer.setReversed(false);
      gl.clearDepth(1);
      gl.stencilMask(4294967295);
      gl.stencilFunc(gl.ALWAYS, 0, 4294967295);
      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
      gl.clearStencil(0);
      gl.cullFace(gl.BACK);
      gl.frontFace(gl.CCW);
      gl.polygonOffset(0, 0);
      gl.activeTexture(gl.TEXTURE0);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
      gl.useProgram(null);
      gl.lineWidth(1);
      gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
      enabledCapabilities = {};
      currentTextureSlot = null;
      currentBoundTextures = {};
      currentBoundFramebuffers = {};
      currentDrawbuffers = /* @__PURE__ */ new WeakMap();
      defaultDrawbuffers = [];
      currentProgram = null;
      currentBlendingEnabled = false;
      currentBlending = null;
      currentBlendEquation = null;
      currentBlendSrc = null;
      currentBlendDst = null;
      currentBlendEquationAlpha = null;
      currentBlendSrcAlpha = null;
      currentBlendDstAlpha = null;
      currentBlendColor = new Color(0, 0, 0);
      currentBlendAlpha = 0;
      currentPremultipledAlpha = false;
      currentFlipSided = null;
      currentCullFace = null;
      currentLineWidth = null;
      currentPolygonOffsetFactor = null;
      currentPolygonOffsetUnits = null;
      currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
      currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
      colorBuffer.reset();
      depthBuffer.reset();
      stencilBuffer.reset();
    }
    return {
      buffers: {
        color: colorBuffer,
        depth: depthBuffer,
        stencil: stencilBuffer
      },
      enable,
      disable,
      bindFramebuffer,
      drawBuffers,
      useProgram,
      setBlending,
      setMaterial,
      setFlipSided,
      setCullFace,
      setLineWidth,
      setPolygonOffset,
      setScissorTest,
      activeTexture,
      bindTexture,
      unbindTexture,
      compressedTexImage2D,
      compressedTexImage3D,
      texImage2D,
      texImage3D,
      updateUBOMapping,
      uniformBlockBinding,
      texStorage2D,
      texStorage3D,
      texSubImage2D,
      texSubImage3D,
      compressedTexSubImage2D,
      compressedTexSubImage3D,
      scissor,
      viewport,
      reset
    };
  }
  function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    const multisampledRTTExt = extensions.has("WEBGL_multisampled_render_to_texture") ? extensions.get("WEBGL_multisampled_render_to_texture") : null;
    const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
    const _imageDimensions = new Vector2();
    const _videoTextures = /* @__PURE__ */ new WeakMap();
    let _canvas2;
    const _sources = /* @__PURE__ */ new WeakMap();
    let useOffscreenCanvas = false;
    try {
      useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    }
    function createCanvas(width, height) {
      return useOffscreenCanvas ? (
        // eslint-disable-next-line compat/compat
        new OffscreenCanvas(width, height)
      ) : createElementNS("canvas");
    }
    function resizeImage(image, needsNewCanvas, maxSize) {
      let scale = 1;
      const dimensions = getDimensions(image);
      if (dimensions.width > maxSize || dimensions.height > maxSize) {
        scale = maxSize / Math.max(dimensions.width, dimensions.height);
      }
      if (scale < 1) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap || typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
          const width = Math.floor(scale * dimensions.width);
          const height = Math.floor(scale * dimensions.height);
          if (_canvas2 === void 0)
            _canvas2 = createCanvas(width, height);
          const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
          canvas.width = width;
          canvas.height = height;
          const context = canvas.getContext("2d");
          context.drawImage(image, 0, 0, width, height);
          console.warn("THREE.WebGLRenderer: Texture has been resized from (" + dimensions.width + "x" + dimensions.height + ") to (" + width + "x" + height + ").");
          return canvas;
        } else {
          if ("data" in image) {
            console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + dimensions.width + "x" + dimensions.height + ").");
          }
          return image;
        }
      }
      return image;
    }
    function textureNeedsGenerateMipmaps(texture) {
      return texture.generateMipmaps;
    }
    function generateMipmap(target) {
      _gl.generateMipmap(target);
    }
    function getTargetType(texture) {
      if (texture.isWebGLCubeRenderTarget)
        return _gl.TEXTURE_CUBE_MAP;
      if (texture.isWebGL3DRenderTarget)
        return _gl.TEXTURE_3D;
      if (texture.isWebGLArrayRenderTarget || texture.isCompressedArrayTexture)
        return _gl.TEXTURE_2D_ARRAY;
      return _gl.TEXTURE_2D;
    }
    function getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
      if (internalFormatName !== null) {
        if (_gl[internalFormatName] !== void 0)
          return _gl[internalFormatName];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
      }
      let internalFormat = glFormat;
      if (glFormat === _gl.RED) {
        if (glType === _gl.FLOAT)
          internalFormat = _gl.R32F;
        if (glType === _gl.HALF_FLOAT)
          internalFormat = _gl.R16F;
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.R8;
      }
      if (glFormat === _gl.RED_INTEGER) {
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.R8UI;
        if (glType === _gl.UNSIGNED_SHORT)
          internalFormat = _gl.R16UI;
        if (glType === _gl.UNSIGNED_INT)
          internalFormat = _gl.R32UI;
        if (glType === _gl.BYTE)
          internalFormat = _gl.R8I;
        if (glType === _gl.SHORT)
          internalFormat = _gl.R16I;
        if (glType === _gl.INT)
          internalFormat = _gl.R32I;
      }
      if (glFormat === _gl.RG) {
        if (glType === _gl.FLOAT)
          internalFormat = _gl.RG32F;
        if (glType === _gl.HALF_FLOAT)
          internalFormat = _gl.RG16F;
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.RG8;
      }
      if (glFormat === _gl.RG_INTEGER) {
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.RG8UI;
        if (glType === _gl.UNSIGNED_SHORT)
          internalFormat = _gl.RG16UI;
        if (glType === _gl.UNSIGNED_INT)
          internalFormat = _gl.RG32UI;
        if (glType === _gl.BYTE)
          internalFormat = _gl.RG8I;
        if (glType === _gl.SHORT)
          internalFormat = _gl.RG16I;
        if (glType === _gl.INT)
          internalFormat = _gl.RG32I;
      }
      if (glFormat === _gl.RGB_INTEGER) {
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.RGB8UI;
        if (glType === _gl.UNSIGNED_SHORT)
          internalFormat = _gl.RGB16UI;
        if (glType === _gl.UNSIGNED_INT)
          internalFormat = _gl.RGB32UI;
        if (glType === _gl.BYTE)
          internalFormat = _gl.RGB8I;
        if (glType === _gl.SHORT)
          internalFormat = _gl.RGB16I;
        if (glType === _gl.INT)
          internalFormat = _gl.RGB32I;
      }
      if (glFormat === _gl.RGBA_INTEGER) {
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.RGBA8UI;
        if (glType === _gl.UNSIGNED_SHORT)
          internalFormat = _gl.RGBA16UI;
        if (glType === _gl.UNSIGNED_INT)
          internalFormat = _gl.RGBA32UI;
        if (glType === _gl.BYTE)
          internalFormat = _gl.RGBA8I;
        if (glType === _gl.SHORT)
          internalFormat = _gl.RGBA16I;
        if (glType === _gl.INT)
          internalFormat = _gl.RGBA32I;
      }
      if (glFormat === _gl.RGB) {
        if (glType === _gl.UNSIGNED_INT_5_9_9_9_REV)
          internalFormat = _gl.RGB9_E5;
      }
      if (glFormat === _gl.RGBA) {
        const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);
        if (glType === _gl.FLOAT)
          internalFormat = _gl.RGBA32F;
        if (glType === _gl.HALF_FLOAT)
          internalFormat = _gl.RGBA16F;
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = transfer === SRGBTransfer ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
        if (glType === _gl.UNSIGNED_SHORT_4_4_4_4)
          internalFormat = _gl.RGBA4;
        if (glType === _gl.UNSIGNED_SHORT_5_5_5_1)
          internalFormat = _gl.RGB5_A1;
      }
      if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
        extensions.get("EXT_color_buffer_float");
      }
      return internalFormat;
    }
    function getInternalDepthFormat(useStencil, depthType) {
      let glInternalFormat;
      if (useStencil) {
        if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
          glInternalFormat = _gl.DEPTH24_STENCIL8;
        } else if (depthType === FloatType) {
          glInternalFormat = _gl.DEPTH32F_STENCIL8;
        } else if (depthType === UnsignedShortType) {
          glInternalFormat = _gl.DEPTH24_STENCIL8;
          console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.");
        }
      } else {
        if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
          glInternalFormat = _gl.DEPTH_COMPONENT24;
        } else if (depthType === FloatType) {
          glInternalFormat = _gl.DEPTH_COMPONENT32F;
        } else if (depthType === UnsignedShortType) {
          glInternalFormat = _gl.DEPTH_COMPONENT16;
        }
      }
      return glInternalFormat;
    }
    function getMipLevels(texture, image) {
      if (textureNeedsGenerateMipmaps(texture) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
        return Math.log2(Math.max(image.width, image.height)) + 1;
      } else if (texture.mipmaps !== void 0 && texture.mipmaps.length > 0) {
        return texture.mipmaps.length;
      } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
        return image.mipmaps.length;
      } else {
        return 1;
      }
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      deallocateTexture(texture);
      if (texture.isVideoTexture) {
        _videoTextures.delete(texture);
      }
    }
    function onRenderTargetDispose(event) {
      const renderTarget = event.target;
      renderTarget.removeEventListener("dispose", onRenderTargetDispose);
      deallocateRenderTarget(renderTarget);
    }
    function deallocateTexture(texture) {
      const textureProperties = properties.get(texture);
      if (textureProperties.__webglInit === void 0)
        return;
      const source = texture.source;
      const webglTextures = _sources.get(source);
      if (webglTextures) {
        const webglTexture = webglTextures[textureProperties.__cacheKey];
        webglTexture.usedTimes--;
        if (webglTexture.usedTimes === 0) {
          deleteTexture(texture);
        }
        if (Object.keys(webglTextures).length === 0) {
          _sources.delete(source);
        }
      }
      properties.remove(texture);
    }
    function deleteTexture(texture) {
      const textureProperties = properties.get(texture);
      _gl.deleteTexture(textureProperties.__webglTexture);
      const source = texture.source;
      const webglTextures = _sources.get(source);
      delete webglTextures[textureProperties.__cacheKey];
      info.memory.textures--;
    }
    function deallocateRenderTarget(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      if (renderTarget.depthTexture) {
        renderTarget.depthTexture.dispose();
        properties.remove(renderTarget.depthTexture);
      }
      if (renderTarget.isWebGLCubeRenderTarget) {
        for (let i = 0; i < 6; i++) {
          if (Array.isArray(renderTargetProperties.__webglFramebuffer[i])) {
            for (let level = 0; level < renderTargetProperties.__webglFramebuffer[i].length; level++)
              _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i][level]);
          } else {
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
          }
          if (renderTargetProperties.__webglDepthbuffer)
            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
      } else {
        if (Array.isArray(renderTargetProperties.__webglFramebuffer)) {
          for (let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level++)
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[level]);
        } else {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
        }
        if (renderTargetProperties.__webglDepthbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
        if (renderTargetProperties.__webglMultisampledFramebuffer)
          _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
        if (renderTargetProperties.__webglColorRenderbuffer) {
          for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {
            if (renderTargetProperties.__webglColorRenderbuffer[i])
              _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
          }
        }
        if (renderTargetProperties.__webglDepthRenderbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
      }
      const textures = renderTarget.textures;
      for (let i = 0, il = textures.length; i < il; i++) {
        const attachmentProperties = properties.get(textures[i]);
        if (attachmentProperties.__webglTexture) {
          _gl.deleteTexture(attachmentProperties.__webglTexture);
          info.memory.textures--;
        }
        properties.remove(textures[i]);
      }
      properties.remove(renderTarget);
    }
    let textureUnits = 0;
    function resetTextureUnits() {
      textureUnits = 0;
    }
    function allocateTextureUnit() {
      const textureUnit = textureUnits;
      if (textureUnit >= capabilities.maxTextures) {
        console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + capabilities.maxTextures);
      }
      textureUnits += 1;
      return textureUnit;
    }
    function getTextureCacheKey(texture) {
      const array = [];
      array.push(texture.wrapS);
      array.push(texture.wrapT);
      array.push(texture.wrapR || 0);
      array.push(texture.magFilter);
      array.push(texture.minFilter);
      array.push(texture.anisotropy);
      array.push(texture.internalFormat);
      array.push(texture.format);
      array.push(texture.type);
      array.push(texture.generateMipmaps);
      array.push(texture.premultiplyAlpha);
      array.push(texture.flipY);
      array.push(texture.unpackAlignment);
      array.push(texture.colorSpace);
      return array.join();
    }
    function setTexture2D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.isVideoTexture)
        updateVideoTexture(texture);
      if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
        const image = texture.image;
        if (image === null) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
        } else if (image.complete === false) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
        } else {
          uploadTexture(textureProperties, texture, slot);
          return;
        }
      }
      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture2DArray(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture3D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTextureCube(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadCubeTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    const wrappingToGL = {
      [RepeatWrapping]: _gl.REPEAT,
      [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
      [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
    };
    const filterToGL = {
      [NearestFilter]: _gl.NEAREST,
      [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
      [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
      [LinearFilter]: _gl.LINEAR,
      [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
      [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
    };
    const compareToGL = {
      [NeverCompare]: _gl.NEVER,
      [AlwaysCompare]: _gl.ALWAYS,
      [LessCompare]: _gl.LESS,
      [LessEqualCompare]: _gl.LEQUAL,
      [EqualCompare]: _gl.EQUAL,
      [GreaterEqualCompare]: _gl.GEQUAL,
      [GreaterCompare]: _gl.GREATER,
      [NotEqualCompare]: _gl.NOTEQUAL
    };
    function setTextureParameters(textureType, texture) {
      if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false && (texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter || texture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter)) {
        console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.");
      }
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
      }
      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
      if (texture.compareFunction) {
        _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);
        _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);
      }
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        if (texture.magFilter === NearestFilter)
          return;
        if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter)
          return;
        if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false)
          return;
        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
          const extension = extensions.get("EXT_texture_filter_anisotropic");
          _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
          properties.get(texture).__currentAnisotropy = texture.anisotropy;
        }
      }
    }
    function initTexture(textureProperties, texture) {
      let forceUpload = false;
      if (textureProperties.__webglInit === void 0) {
        textureProperties.__webglInit = true;
        texture.addEventListener("dispose", onTextureDispose);
      }
      const source = texture.source;
      let webglTextures = _sources.get(source);
      if (webglTextures === void 0) {
        webglTextures = {};
        _sources.set(source, webglTextures);
      }
      const textureCacheKey = getTextureCacheKey(texture);
      if (textureCacheKey !== textureProperties.__cacheKey) {
        if (webglTextures[textureCacheKey] === void 0) {
          webglTextures[textureCacheKey] = {
            texture: _gl.createTexture(),
            usedTimes: 0
          };
          info.memory.textures++;
          forceUpload = true;
        }
        webglTextures[textureCacheKey].usedTimes++;
        const webglTexture = webglTextures[textureProperties.__cacheKey];
        if (webglTexture !== void 0) {
          webglTextures[textureProperties.__cacheKey].usedTimes--;
          if (webglTexture.usedTimes === 0) {
            deleteTexture(texture);
          }
        }
        textureProperties.__cacheKey = textureCacheKey;
        textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
      }
      return forceUpload;
    }
    function uploadTexture(textureProperties, texture, slot) {
      let textureType = _gl.TEXTURE_2D;
      if (texture.isDataArrayTexture || texture.isCompressedArrayTexture)
        textureType = _gl.TEXTURE_2D_ARRAY;
      if (texture.isData3DTexture)
        textureType = _gl.TEXTURE_3D;
      const forceUpload = initTexture(textureProperties, texture);
      const source = texture.source;
      state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      const sourceProperties = properties.get(source);
      if (source.version !== sourceProperties.__version || forceUpload === true) {
        state.activeTexture(_gl.TEXTURE0 + slot);
        const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
        const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);
        const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
        _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
        let image = resizeImage(texture.image, false, capabilities.maxTextureSize);
        image = verifyColorSpace(texture, image);
        const glFormat = utils.convert(texture.format, texture.colorSpace);
        const glType = utils.convert(texture.type);
        let glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture);
        setTextureParameters(textureType, texture);
        let mipmap;
        const mipmaps = texture.mipmaps;
        const useTexStorage = texture.isVideoTexture !== true;
        const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
        const dataReady = source.dataReady;
        const levels = getMipLevels(texture, image);
        if (texture.isDepthTexture) {
          glInternalFormat = getInternalDepthFormat(texture.format === DepthStencilFormat, texture.type);
          if (allocateMemory) {
            if (useTexStorage) {
              state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
            }
          }
        } else if (texture.isDataTexture) {
          if (mipmaps.length > 0) {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
            texture.generateMipmaps = false;
          } else {
            if (useTexStorage) {
              if (allocateMemory) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
              }
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
            }
          }
        } else if (texture.isCompressedTexture) {
          if (texture.isCompressedArrayTexture) {
            if (useTexStorage && allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    if (dataReady) {
                      if (texture.layerUpdates.size > 0) {
                        const layerByteLength = getByteLength(mipmap.width, mipmap.height, texture.format, texture.type);
                        for (const layerIndex of texture.layerUpdates) {
                          const layerData = mipmap.data.subarray(
                            layerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,
                            (layerIndex + 1) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT
                          );
                          state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData);
                        }
                        texture.clearLayerUpdates();
                      } else {
                        state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data);
                      }
                    }
                  } else {
                    state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                }
              } else {
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                  }
                } else {
                  state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          } else {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    if (dataReady) {
                      state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                    }
                  } else {
                    state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                }
              } else {
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                  }
                } else {
                  state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          }
        } else if (texture.isDataArrayTexture) {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
            }
            if (dataReady) {
              if (texture.layerUpdates.size > 0) {
                const layerByteLength = getByteLength(image.width, image.height, texture.format, texture.type);
                for (const layerIndex of texture.layerUpdates) {
                  const layerData = image.data.subarray(
                    layerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,
                    (layerIndex + 1) * layerByteLength / image.data.BYTES_PER_ELEMENT
                  );
                  state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData);
                }
                texture.clearLayerUpdates();
              } else {
                state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
              }
            }
          } else {
            state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
          }
        } else if (texture.isData3DTexture) {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
            }
            if (dataReady) {
              state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            }
          } else {
            state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
          }
        } else if (texture.isFramebufferTexture) {
          if (allocateMemory) {
            if (useTexStorage) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
            } else {
              let width = image.width, height = image.height;
              for (let i = 0; i < levels; i++) {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
                width >>= 1;
                height >>= 1;
              }
            }
          }
        } else {
          if (mipmaps.length > 0) {
            if (useTexStorage && allocateMemory) {
              const dimensions = getDimensions(mipmaps[0]);
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
              }
            }
            texture.generateMipmaps = false;
          } else {
            if (useTexStorage) {
              if (allocateMemory) {
                const dimensions = getDimensions(image);
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
              }
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
            }
          }
        }
        if (textureNeedsGenerateMipmaps(texture)) {
          generateMipmap(textureType);
        }
        sourceProperties.__version = source.version;
        if (texture.onUpdate)
          texture.onUpdate(texture);
      }
      textureProperties.__version = texture.version;
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
      if (texture.image.length !== 6)
        return;
      const forceUpload = initTexture(textureProperties, texture);
      const source = texture.source;
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      const sourceProperties = properties.get(source);
      if (source.version !== sourceProperties.__version || forceUpload === true) {
        state.activeTexture(_gl.TEXTURE0 + slot);
        const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
        const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);
        const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
        _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
        const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
        const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
        const cubeImage = [];
        for (let i = 0; i < 6; i++) {
          if (!isCompressed && !isDataTexture) {
            cubeImage[i] = resizeImage(texture.image[i], true, capabilities.maxCubemapSize);
          } else {
            cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
          }
          cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
        }
        const image = cubeImage[0], glFormat = utils.convert(texture.format, texture.colorSpace), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
        const useTexStorage = texture.isVideoTexture !== true;
        const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
        const dataReady = source.dataReady;
        let levels = getMipLevels(texture, image);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);
        let mipmaps;
        if (isCompressed) {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
          }
          for (let i = 0; i < 6; i++) {
            mipmaps = cubeImage[i].mipmaps;
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    if (dataReady) {
                      state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                    }
                  } else {
                    state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
                }
              } else {
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                  }
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          }
        } else {
          mipmaps = texture.mipmaps;
          if (useTexStorage && allocateMemory) {
            if (mipmaps.length > 0)
              levels++;
            const dimensions = getDimensions(cubeImage[0]);
            state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height);
          }
          for (let i = 0; i < 6; i++) {
            if (isDataTexture) {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
              }
              for (let j = 0; j < mipmaps.length; j++) {
                const mipmap = mipmaps[j];
                const mipmapImage = mipmap.image[i].image;
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                  }
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                }
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
              }
              for (let j = 0; j < mipmaps.length; j++) {
                const mipmap = mipmaps[j];
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
                  }
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
                }
              }
            }
          }
        }
        if (textureNeedsGenerateMipmaps(texture)) {
          generateMipmap(_gl.TEXTURE_CUBE_MAP);
        }
        sourceProperties.__version = source.version;
        if (texture.onUpdate)
          texture.onUpdate(texture);
      }
      textureProperties.__version = texture.version;
    }
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget, level) {
      const glFormat = utils.convert(texture.format, texture.colorSpace);
      const glType = utils.convert(texture.type);
      const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      textureProperties.__renderTarget = renderTarget;
      if (!renderTargetProperties.__hasExternalTextures) {
        const width = Math.max(1, renderTarget.width >> level);
        const height = Math.max(1, renderTarget.height >> level);
        if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
          state.texImage3D(textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null);
        } else {
          state.texImage2D(textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null);
        }
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, 0, getRenderTargetSamples(renderTarget));
      } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, level);
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
      _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
      if (renderTarget.depthBuffer) {
        const depthTexture = renderTarget.depthTexture;
        const depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;
        const glInternalFormat = getInternalDepthFormat(renderTarget.stencilBuffer, depthType);
        const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
        const samples = getRenderTargetSamples(renderTarget);
        const isUseMultisampledRTT = useMultisampledRTT(renderTarget);
        if (isUseMultisampledRTT) {
          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else if (isMultisample) {
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
      } else {
        const textures = renderTarget.textures;
        for (let i = 0; i < textures.length; i++) {
          const texture = textures[i];
          const glFormat = utils.convert(texture.format, texture.colorSpace);
          const glType = utils.convert(texture.type);
          const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
          const samples = getRenderTargetSamples(renderTarget);
          if (isMultisample && useMultisampledRTT(renderTarget) === false) {
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else if (useMultisampledRTT(renderTarget)) {
            multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else {
            _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
          }
        }
      }
      _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
    }
    function setupDepthTexture(framebuffer, renderTarget) {
      const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
      if (isCube)
        throw new Error("Depth Texture with cube render targets is not supported");
      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
        throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
      }
      const textureProperties = properties.get(renderTarget.depthTexture);
      textureProperties.__renderTarget = renderTarget;
      if (!textureProperties.__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
        renderTarget.depthTexture.image.width = renderTarget.width;
        renderTarget.depthTexture.image.height = renderTarget.height;
        renderTarget.depthTexture.needsUpdate = true;
      }
      setTexture2D(renderTarget.depthTexture, 0);
      const webglDepthTexture = textureProperties.__webglTexture;
      const samples = getRenderTargetSamples(renderTarget);
      if (renderTarget.depthTexture.format === DepthFormat) {
        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        }
      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        }
      } else {
        throw new Error("Unknown depthTexture format");
      }
    }
    function setupDepthRenderbuffer(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      if (renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture) {
        const depthTexture = renderTarget.depthTexture;
        if (renderTargetProperties.__depthDisposeCallback) {
          renderTargetProperties.__depthDisposeCallback();
        }
        if (depthTexture) {
          const disposeEvent = () => {
            delete renderTargetProperties.__boundDepthTexture;
            delete renderTargetProperties.__depthDisposeCallback;
            depthTexture.removeEventListener("dispose", disposeEvent);
          };
          depthTexture.addEventListener("dispose", disposeEvent);
          renderTargetProperties.__depthDisposeCallback = disposeEvent;
        }
        renderTargetProperties.__boundDepthTexture = depthTexture;
      }
      if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
        if (isCube)
          throw new Error("target.depthTexture not supported in Cube render targets");
        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
      } else {
        if (isCube) {
          renderTargetProperties.__webglDepthbuffer = [];
          for (let i = 0; i < 6; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
            if (renderTargetProperties.__webglDepthbuffer[i] === void 0) {
              renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
              setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
            } else {
              const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
              const renderbuffer = renderTargetProperties.__webglDepthbuffer[i];
              _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
            }
          }
        } else {
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
          if (renderTargetProperties.__webglDepthbuffer === void 0) {
            renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
          } else {
            const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
            const renderbuffer = renderTargetProperties.__webglDepthbuffer;
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
          }
        }
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    function rebindTextures(renderTarget, colorTexture, depthTexture) {
      const renderTargetProperties = properties.get(renderTarget);
      if (colorTexture !== void 0) {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0);
      }
      if (depthTexture !== void 0) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function setupRenderTarget(renderTarget) {
      const texture = renderTarget.texture;
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      renderTarget.addEventListener("dispose", onRenderTargetDispose);
      const textures = renderTarget.textures;
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      const isMultipleRenderTargets = textures.length > 1;
      if (!isMultipleRenderTargets) {
        if (textureProperties.__webglTexture === void 0) {
          textureProperties.__webglTexture = _gl.createTexture();
        }
        textureProperties.__version = texture.version;
        info.memory.textures++;
      }
      if (isCube) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let i = 0; i < 6; i++) {
          if (texture.mipmaps && texture.mipmaps.length > 0) {
            renderTargetProperties.__webglFramebuffer[i] = [];
            for (let level = 0; level < texture.mipmaps.length; level++) {
              renderTargetProperties.__webglFramebuffer[i][level] = _gl.createFramebuffer();
            }
          } else {
            renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
          }
        }
      } else {
        if (texture.mipmaps && texture.mipmaps.length > 0) {
          renderTargetProperties.__webglFramebuffer = [];
          for (let level = 0; level < texture.mipmaps.length; level++) {
            renderTargetProperties.__webglFramebuffer[level] = _gl.createFramebuffer();
          }
        } else {
          renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
        }
        if (isMultipleRenderTargets) {
          for (let i = 0, il = textures.length; i < il; i++) {
            const attachmentProperties = properties.get(textures[i]);
            if (attachmentProperties.__webglTexture === void 0) {
              attachmentProperties.__webglTexture = _gl.createTexture();
              info.memory.textures++;
            }
          }
        }
        if (renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
          renderTargetProperties.__webglColorRenderbuffer = [];
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
          for (let i = 0; i < textures.length; i++) {
            const texture2 = textures[i];
            renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            const glFormat = utils.convert(texture2.format, texture2.colorSpace);
            const glType = utils.convert(texture2.type);
            const glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace, renderTarget.isXRRenderTarget === true);
            const samples = getRenderTargetSamples(renderTarget);
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
          }
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
          if (renderTarget.depthBuffer) {
            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
          }
          state.bindFramebuffer(_gl.FRAMEBUFFER, null);
        }
      }
      if (isCube) {
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);
        for (let i = 0; i < 6; i++) {
          if (texture.mipmaps && texture.mipmaps.length > 0) {
            for (let level = 0; level < texture.mipmaps.length; level++) {
              setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i][level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level);
            }
          } else {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0);
          }
        }
        if (textureNeedsGenerateMipmaps(texture)) {
          generateMipmap(_gl.TEXTURE_CUBE_MAP);
        }
        state.unbindTexture();
      } else if (isMultipleRenderTargets) {
        for (let i = 0, il = textures.length; i < il; i++) {
          const attachment = textures[i];
          const attachmentProperties = properties.get(attachment);
          state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
          setTextureParameters(_gl.TEXTURE_2D, attachment);
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0);
          if (textureNeedsGenerateMipmaps(attachment)) {
            generateMipmap(_gl.TEXTURE_2D);
          }
        }
        state.unbindTexture();
      } else {
        let glTextureType = _gl.TEXTURE_2D;
        if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
          glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
        }
        state.bindTexture(glTextureType, textureProperties.__webglTexture);
        setTextureParameters(glTextureType, texture);
        if (texture.mipmaps && texture.mipmaps.length > 0) {
          for (let level = 0; level < texture.mipmaps.length; level++) {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level);
          }
        } else {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0);
        }
        if (textureNeedsGenerateMipmaps(texture)) {
          generateMipmap(glTextureType);
        }
        state.unbindTexture();
      }
      if (renderTarget.depthBuffer) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function updateRenderTargetMipmap(renderTarget) {
      const textures = renderTarget.textures;
      for (let i = 0, il = textures.length; i < il; i++) {
        const texture = textures[i];
        if (textureNeedsGenerateMipmaps(texture)) {
          const targetType = getTargetType(renderTarget);
          const webglTexture = properties.get(texture).__webglTexture;
          state.bindTexture(targetType, webglTexture);
          generateMipmap(targetType);
          state.unbindTexture();
        }
      }
    }
    const invalidationArrayRead = [];
    const invalidationArrayDraw = [];
    function updateMultisampleRenderTarget(renderTarget) {
      if (renderTarget.samples > 0) {
        if (useMultisampledRTT(renderTarget) === false) {
          const textures = renderTarget.textures;
          const width = renderTarget.width;
          const height = renderTarget.height;
          let mask = _gl.COLOR_BUFFER_BIT;
          const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
          const renderTargetProperties = properties.get(renderTarget);
          const isMultipleRenderTargets = textures.length > 1;
          if (isMultipleRenderTargets) {
            for (let i = 0; i < textures.length; i++) {
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
            }
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
          for (let i = 0; i < textures.length; i++) {
            if (renderTarget.resolveDepthBuffer) {
              if (renderTarget.depthBuffer)
                mask |= _gl.DEPTH_BUFFER_BIT;
              if (renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer)
                mask |= _gl.STENCIL_BUFFER_BIT;
            }
            if (isMultipleRenderTargets) {
              _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
              const webglTexture = properties.get(textures[i]).__webglTexture;
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
            }
            _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
            if (supportsInvalidateFramebuffer === true) {
              invalidationArrayRead.length = 0;
              invalidationArrayDraw.length = 0;
              invalidationArrayRead.push(_gl.COLOR_ATTACHMENT0 + i);
              if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false) {
                invalidationArrayRead.push(depthStyle);
                invalidationArrayDraw.push(depthStyle);
                _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, invalidationArrayDraw);
              }
              _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArrayRead);
            }
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
          if (isMultipleRenderTargets) {
            for (let i = 0; i < textures.length; i++) {
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
              const webglTexture = properties.get(textures[i]).__webglTexture;
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
            }
          }
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        } else {
          if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer) {
            const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
            _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
          }
        }
      }
    }
    function getRenderTargetSamples(renderTarget) {
      return Math.min(capabilities.maxSamples, renderTarget.samples);
    }
    function useMultisampledRTT(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      return renderTarget.samples > 0 && extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
    }
    function updateVideoTexture(texture) {
      const frame = info.render.frame;
      if (_videoTextures.get(texture) !== frame) {
        _videoTextures.set(texture, frame);
        texture.update();
      }
    }
    function verifyColorSpace(texture, image) {
      const colorSpace = texture.colorSpace;
      const format = texture.format;
      const type = texture.type;
      if (texture.isCompressedTexture === true || texture.isVideoTexture === true)
        return image;
      if (colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace) {
        if (ColorManagement.getTransfer(colorSpace) === SRGBTransfer) {
          if (format !== RGBAFormat || type !== UnsignedByteType) {
            console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
          }
        } else {
          console.error("THREE.WebGLTextures: Unsupported texture color space:", colorSpace);
        }
      }
      return image;
    }
    function getDimensions(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement) {
        _imageDimensions.width = image.naturalWidth || image.width;
        _imageDimensions.height = image.naturalHeight || image.height;
      } else if (typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
        _imageDimensions.width = image.displayWidth;
        _imageDimensions.height = image.displayHeight;
      } else {
        _imageDimensions.width = image.width;
        _imageDimensions.height = image.height;
      }
      return _imageDimensions;
    }
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.rebindTextures = rebindTextures;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    this.setupFrameBufferTexture = setupFrameBufferTexture;
    this.useMultisampledRTT = useMultisampledRTT;
  }
  function WebGLUtils(gl, extensions) {
    function convert(p, colorSpace = NoColorSpace) {
      let extension;
      const transfer = ColorManagement.getTransfer(colorSpace);
      if (p === UnsignedByteType)
        return gl.UNSIGNED_BYTE;
      if (p === UnsignedShort4444Type)
        return gl.UNSIGNED_SHORT_4_4_4_4;
      if (p === UnsignedShort5551Type)
        return gl.UNSIGNED_SHORT_5_5_5_1;
      if (p === UnsignedInt5999Type)
        return gl.UNSIGNED_INT_5_9_9_9_REV;
      if (p === ByteType)
        return gl.BYTE;
      if (p === ShortType)
        return gl.SHORT;
      if (p === UnsignedShortType)
        return gl.UNSIGNED_SHORT;
      if (p === IntType)
        return gl.INT;
      if (p === UnsignedIntType)
        return gl.UNSIGNED_INT;
      if (p === FloatType)
        return gl.FLOAT;
      if (p === HalfFloatType)
        return gl.HALF_FLOAT;
      if (p === AlphaFormat)
        return gl.ALPHA;
      if (p === RGBFormat)
        return gl.RGB;
      if (p === RGBAFormat)
        return gl.RGBA;
      if (p === LuminanceFormat)
        return gl.LUMINANCE;
      if (p === LuminanceAlphaFormat)
        return gl.LUMINANCE_ALPHA;
      if (p === DepthFormat)
        return gl.DEPTH_COMPONENT;
      if (p === DepthStencilFormat)
        return gl.DEPTH_STENCIL;
      if (p === RedFormat)
        return gl.RED;
      if (p === RedIntegerFormat)
        return gl.RED_INTEGER;
      if (p === RGFormat)
        return gl.RG;
      if (p === RGIntegerFormat)
        return gl.RG_INTEGER;
      if (p === RGBAIntegerFormat)
        return gl.RGBA_INTEGER;
      if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
        if (transfer === SRGBTransfer) {
          extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format)
              return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        } else {
          extension = extensions.get("WEBGL_compressed_texture_s3tc");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format)
              return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        }
      }
      if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_pvrtc");
        if (extension !== null) {
          if (p === RGB_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (p === RGB_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (p === RGBA_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (p === RGBA_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc");
        if (extension !== null) {
          if (p === RGB_ETC1_Format || p === RGB_ETC2_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
          if (p === RGBA_ETC2_EAC_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
        } else {
          return null;
        }
      }
      if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
        extension = extensions.get("WEBGL_compressed_texture_astc");
        if (extension !== null) {
          if (p === RGBA_ASTC_4x4_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
          if (p === RGBA_ASTC_5x4_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
          if (p === RGBA_ASTC_5x5_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
          if (p === RGBA_ASTC_6x5_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
          if (p === RGBA_ASTC_6x6_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
          if (p === RGBA_ASTC_8x5_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
          if (p === RGBA_ASTC_8x6_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
          if (p === RGBA_ASTC_8x8_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
          if (p === RGBA_ASTC_10x5_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
          if (p === RGBA_ASTC_10x6_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
          if (p === RGBA_ASTC_10x8_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
          if (p === RGBA_ASTC_10x10_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
          if (p === RGBA_ASTC_12x10_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
          if (p === RGBA_ASTC_12x12_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
        } else {
          return null;
        }
      }
      if (p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format) {
        extension = extensions.get("EXT_texture_compression_bptc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format)
            return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
          if (p === RGB_BPTC_SIGNED_Format)
            return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
          if (p === RGB_BPTC_UNSIGNED_Format)
            return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
        } else {
          return null;
        }
      }
      if (p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format) {
        extension = extensions.get("EXT_texture_compression_rgtc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format)
            return extension.COMPRESSED_RED_RGTC1_EXT;
          if (p === SIGNED_RED_RGTC1_Format)
            return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
          if (p === RED_GREEN_RGTC2_Format)
            return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
          if (p === SIGNED_RED_GREEN_RGTC2_Format)
            return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
        } else {
          return null;
        }
      }
      if (p === UnsignedInt248Type)
        return gl.UNSIGNED_INT_24_8;
      return gl[p] !== void 0 ? gl[p] : null;
    }
    return { convert };
  }
  var _occlusion_vertex = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`;
  var _occlusion_fragment = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
  var WebXRDepthSensing = class {
    constructor() {
      this.texture = null;
      this.mesh = null;
      this.depthNear = 0;
      this.depthFar = 0;
    }
    init(renderer, depthData, renderState) {
      if (this.texture === null) {
        const texture = new Texture();
        const texProps = renderer.properties.get(texture);
        texProps.__webglTexture = depthData.texture;
        if (depthData.depthNear !== renderState.depthNear || depthData.depthFar !== renderState.depthFar) {
          this.depthNear = depthData.depthNear;
          this.depthFar = depthData.depthFar;
        }
        this.texture = texture;
      }
    }
    getMesh(cameraXR) {
      if (this.texture !== null) {
        if (this.mesh === null) {
          const viewport = cameraXR.cameras[0].viewport;
          const material = new ShaderMaterial({
            vertexShader: _occlusion_vertex,
            fragmentShader: _occlusion_fragment,
            uniforms: {
              depthColor: { value: this.texture },
              depthWidth: { value: viewport.z },
              depthHeight: { value: viewport.w }
            }
          });
          this.mesh = new Mesh(new PlaneGeometry(20, 20), material);
        }
      }
      return this.mesh;
    }
    reset() {
      this.texture = null;
      this.mesh = null;
    }
    getDepthTexture() {
      return this.texture;
    }
  };
  var WebXRManager = class extends EventDispatcher {
    constructor(renderer, gl) {
      super();
      const scope = this;
      let session = null;
      let framebufferScaleFactor = 1;
      let referenceSpace = null;
      let referenceSpaceType = "local-floor";
      let foveation = 1;
      let customReferenceSpace = null;
      let pose = null;
      let glBinding = null;
      let glProjLayer = null;
      let glBaseLayer = null;
      let xrFrame = null;
      const depthSensing = new WebXRDepthSensing();
      const attributes = gl.getContextAttributes();
      let initialRenderTarget = null;
      let newRenderTarget = null;
      const controllers = [];
      const controllerInputSources = [];
      const currentSize = new Vector2();
      let currentPixelRatio = null;
      const cameraL = new PerspectiveCamera();
      cameraL.viewport = new Vector4();
      const cameraR = new PerspectiveCamera();
      cameraR.viewport = new Vector4();
      const cameras = [cameraL, cameraR];
      const cameraXR = new ArrayCamera();
      let _currentDepthNear = null;
      let _currentDepthFar = null;
      this.cameraAutoUpdate = true;
      this.enabled = false;
      this.isPresenting = false;
      this.getController = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getTargetRaySpace();
      };
      this.getControllerGrip = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getGripSpace();
      };
      this.getHand = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getHandSpace();
      };
      function onSessionEvent(event) {
        const controllerIndex = controllerInputSources.indexOf(event.inputSource);
        if (controllerIndex === -1) {
          return;
        }
        const controller = controllers[controllerIndex];
        if (controller !== void 0) {
          controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);
          controller.dispatchEvent({ type: event.type, data: event.inputSource });
        }
      }
      function onSessionEnd() {
        session.removeEventListener("select", onSessionEvent);
        session.removeEventListener("selectstart", onSessionEvent);
        session.removeEventListener("selectend", onSessionEvent);
        session.removeEventListener("squeeze", onSessionEvent);
        session.removeEventListener("squeezestart", onSessionEvent);
        session.removeEventListener("squeezeend", onSessionEvent);
        session.removeEventListener("end", onSessionEnd);
        session.removeEventListener("inputsourceschange", onInputSourcesChange);
        for (let i = 0; i < controllers.length; i++) {
          const inputSource = controllerInputSources[i];
          if (inputSource === null)
            continue;
          controllerInputSources[i] = null;
          controllers[i].disconnect(inputSource);
        }
        _currentDepthNear = null;
        _currentDepthFar = null;
        depthSensing.reset();
        renderer.setRenderTarget(initialRenderTarget);
        glBaseLayer = null;
        glProjLayer = null;
        glBinding = null;
        session = null;
        newRenderTarget = null;
        animation.stop();
        scope.isPresenting = false;
        renderer.setPixelRatio(currentPixelRatio);
        renderer.setSize(currentSize.width, currentSize.height, false);
        scope.dispatchEvent({ type: "sessionend" });
      }
      this.setFramebufferScaleFactor = function(value) {
        framebufferScaleFactor = value;
        if (scope.isPresenting === true) {
          console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        }
      };
      this.setReferenceSpaceType = function(value) {
        referenceSpaceType = value;
        if (scope.isPresenting === true) {
          console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        }
      };
      this.getReferenceSpace = function() {
        return customReferenceSpace || referenceSpace;
      };
      this.setReferenceSpace = function(space) {
        customReferenceSpace = space;
      };
      this.getBaseLayer = function() {
        return glProjLayer !== null ? glProjLayer : glBaseLayer;
      };
      this.getBinding = function() {
        return glBinding;
      };
      this.getFrame = function() {
        return xrFrame;
      };
      this.getSession = function() {
        return session;
      };
      this.setSession = async function(value) {
        session = value;
        if (session !== null) {
          initialRenderTarget = renderer.getRenderTarget();
          session.addEventListener("select", onSessionEvent);
          session.addEventListener("selectstart", onSessionEvent);
          session.addEventListener("selectend", onSessionEvent);
          session.addEventListener("squeeze", onSessionEvent);
          session.addEventListener("squeezestart", onSessionEvent);
          session.addEventListener("squeezeend", onSessionEvent);
          session.addEventListener("end", onSessionEnd);
          session.addEventListener("inputsourceschange", onInputSourcesChange);
          if (attributes.xrCompatible !== true) {
            await gl.makeXRCompatible();
          }
          currentPixelRatio = renderer.getPixelRatio();
          renderer.getSize(currentSize);
          const useLayers = typeof XRWebGLBinding !== "undefined" && "createProjectionLayer" in XRWebGLBinding.prototype;
          if (!useLayers) {
            const layerInit = {
              antialias: attributes.antialias,
              alpha: true,
              depth: attributes.depth,
              stencil: attributes.stencil,
              framebufferScaleFactor
            };
            glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
            session.updateRenderState({ baseLayer: glBaseLayer });
            renderer.setPixelRatio(1);
            renderer.setSize(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false);
            newRenderTarget = new WebGLRenderTarget(
              glBaseLayer.framebufferWidth,
              glBaseLayer.framebufferHeight,
              {
                format: RGBAFormat,
                type: UnsignedByteType,
                colorSpace: renderer.outputColorSpace,
                stencilBuffer: attributes.stencil
              }
            );
          } else {
            let depthFormat = null;
            let depthType = null;
            let glDepthFormat = null;
            if (attributes.depth) {
              glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
              depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
              depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
            }
            const projectionlayerInit = {
              colorFormat: gl.RGBA8,
              depthFormat: glDepthFormat,
              scaleFactor: framebufferScaleFactor
            };
            glBinding = new XRWebGLBinding(session, gl);
            glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
            session.updateRenderState({ layers: [glProjLayer] });
            renderer.setPixelRatio(1);
            renderer.setSize(glProjLayer.textureWidth, glProjLayer.textureHeight, false);
            newRenderTarget = new WebGLRenderTarget(
              glProjLayer.textureWidth,
              glProjLayer.textureHeight,
              {
                format: RGBAFormat,
                type: UnsignedByteType,
                depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
                stencilBuffer: attributes.stencil,
                colorSpace: renderer.outputColorSpace,
                samples: attributes.antialias ? 4 : 0,
                resolveDepthBuffer: glProjLayer.ignoreDepthValues === false
              }
            );
          }
          newRenderTarget.isXRRenderTarget = true;
          this.setFoveation(foveation);
          customReferenceSpace = null;
          referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
          animation.setContext(session);
          animation.start();
          scope.isPresenting = true;
          scope.dispatchEvent({ type: "sessionstart" });
        }
      };
      this.getEnvironmentBlendMode = function() {
        if (session !== null) {
          return session.environmentBlendMode;
        }
      };
      this.getDepthTexture = function() {
        return depthSensing.getDepthTexture();
      };
      function onInputSourcesChange(event) {
        for (let i = 0; i < event.removed.length; i++) {
          const inputSource = event.removed[i];
          const index = controllerInputSources.indexOf(inputSource);
          if (index >= 0) {
            controllerInputSources[index] = null;
            controllers[index].disconnect(inputSource);
          }
        }
        for (let i = 0; i < event.added.length; i++) {
          const inputSource = event.added[i];
          let controllerIndex = controllerInputSources.indexOf(inputSource);
          if (controllerIndex === -1) {
            for (let i2 = 0; i2 < controllers.length; i2++) {
              if (i2 >= controllerInputSources.length) {
                controllerInputSources.push(inputSource);
                controllerIndex = i2;
                break;
              } else if (controllerInputSources[i2] === null) {
                controllerInputSources[i2] = inputSource;
                controllerIndex = i2;
                break;
              }
            }
            if (controllerIndex === -1)
              break;
          }
          const controller = controllers[controllerIndex];
          if (controller) {
            controller.connect(inputSource);
          }
        }
      }
      const cameraLPos = new Vector3();
      const cameraRPos = new Vector3();
      function setProjectionFromUnion(camera, cameraL2, cameraR2) {
        cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
        cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
        const ipd = cameraLPos.distanceTo(cameraRPos);
        const projL = cameraL2.projectionMatrix.elements;
        const projR = cameraR2.projectionMatrix.elements;
        const near = projL[14] / (projL[10] - 1);
        const far = projL[14] / (projL[10] + 1);
        const topFov = (projL[9] + 1) / projL[5];
        const bottomFov = (projL[9] - 1) / projL[5];
        const leftFov = (projL[8] - 1) / projL[0];
        const rightFov = (projR[8] + 1) / projR[0];
        const left = near * leftFov;
        const right = near * rightFov;
        const zOffset = ipd / (-leftFov + rightFov);
        const xOffset = zOffset * -leftFov;
        cameraL2.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
        camera.translateX(xOffset);
        camera.translateZ(zOffset);
        camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
        camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        if (projL[10] === -1) {
          camera.projectionMatrix.copy(cameraL2.projectionMatrix);
          camera.projectionMatrixInverse.copy(cameraL2.projectionMatrixInverse);
        } else {
          const near2 = near + zOffset;
          const far2 = far + zOffset;
          const left2 = left - xOffset;
          const right2 = right + (ipd - xOffset);
          const top2 = topFov * far / far2 * near2;
          const bottom2 = bottomFov * far / far2 * near2;
          camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
          camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
        }
      }
      function updateCamera(camera, parent) {
        if (parent === null) {
          camera.matrixWorld.copy(camera.matrix);
        } else {
          camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
        }
        camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
      }
      this.updateCamera = function(camera) {
        if (session === null)
          return;
        let depthNear = camera.near;
        let depthFar = camera.far;
        if (depthSensing.texture !== null) {
          if (depthSensing.depthNear > 0)
            depthNear = depthSensing.depthNear;
          if (depthSensing.depthFar > 0)
            depthFar = depthSensing.depthFar;
        }
        cameraXR.near = cameraR.near = cameraL.near = depthNear;
        cameraXR.far = cameraR.far = cameraL.far = depthFar;
        if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {
          session.updateRenderState({
            depthNear: cameraXR.near,
            depthFar: cameraXR.far
          });
          _currentDepthNear = cameraXR.near;
          _currentDepthFar = cameraXR.far;
        }
        cameraL.layers.mask = camera.layers.mask | 2;
        cameraR.layers.mask = camera.layers.mask | 4;
        cameraXR.layers.mask = cameraL.layers.mask | cameraR.layers.mask;
        const parent = camera.parent;
        const cameras2 = cameraXR.cameras;
        updateCamera(cameraXR, parent);
        for (let i = 0; i < cameras2.length; i++) {
          updateCamera(cameras2[i], parent);
        }
        if (cameras2.length === 2) {
          setProjectionFromUnion(cameraXR, cameraL, cameraR);
        } else {
          cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
        }
        updateUserCamera(camera, cameraXR, parent);
      };
      function updateUserCamera(camera, cameraXR2, parent) {
        if (parent === null) {
          camera.matrix.copy(cameraXR2.matrixWorld);
        } else {
          camera.matrix.copy(parent.matrixWorld);
          camera.matrix.invert();
          camera.matrix.multiply(cameraXR2.matrixWorld);
        }
        camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
        camera.updateMatrixWorld(true);
        camera.projectionMatrix.copy(cameraXR2.projectionMatrix);
        camera.projectionMatrixInverse.copy(cameraXR2.projectionMatrixInverse);
        if (camera.isPerspectiveCamera) {
          camera.fov = RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);
          camera.zoom = 1;
        }
      }
      this.getCamera = function() {
        return cameraXR;
      };
      this.getFoveation = function() {
        if (glProjLayer === null && glBaseLayer === null) {
          return void 0;
        }
        return foveation;
      };
      this.setFoveation = function(value) {
        foveation = value;
        if (glProjLayer !== null) {
          glProjLayer.fixedFoveation = value;
        }
        if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== void 0) {
          glBaseLayer.fixedFoveation = value;
        }
      };
      this.hasDepthSensing = function() {
        return depthSensing.texture !== null;
      };
      this.getDepthSensingMesh = function() {
        return depthSensing.getMesh(cameraXR);
      };
      let onAnimationFrameCallback = null;
      function onAnimationFrame(time, frame) {
        pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
        xrFrame = frame;
        if (pose !== null) {
          const views = pose.views;
          if (glBaseLayer !== null) {
            renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
            renderer.setRenderTarget(newRenderTarget);
          }
          let cameraXRNeedsUpdate = false;
          if (views.length !== cameraXR.cameras.length) {
            cameraXR.cameras.length = 0;
            cameraXRNeedsUpdate = true;
          }
          for (let i = 0; i < views.length; i++) {
            const view = views[i];
            let viewport = null;
            if (glBaseLayer !== null) {
              viewport = glBaseLayer.getViewport(view);
            } else {
              const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
              viewport = glSubImage.viewport;
              if (i === 0) {
                renderer.setRenderTargetTextures(
                  newRenderTarget,
                  glSubImage.colorTexture,
                  glProjLayer.ignoreDepthValues ? void 0 : glSubImage.depthStencilTexture
                );
                renderer.setRenderTarget(newRenderTarget);
              }
            }
            let camera = cameras[i];
            if (camera === void 0) {
              camera = new PerspectiveCamera();
              camera.layers.enable(i);
              camera.viewport = new Vector4();
              cameras[i] = camera;
            }
            camera.matrix.fromArray(view.transform.matrix);
            camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
            camera.projectionMatrix.fromArray(view.projectionMatrix);
            camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
            camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
            if (i === 0) {
              cameraXR.matrix.copy(camera.matrix);
              cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
            }
            if (cameraXRNeedsUpdate === true) {
              cameraXR.cameras.push(camera);
            }
          }
          const enabledFeatures = session.enabledFeatures;
          const gpuDepthSensingEnabled = enabledFeatures && enabledFeatures.includes("depth-sensing") && session.depthUsage == "gpu-optimized";
          if (gpuDepthSensingEnabled && glBinding) {
            const depthData = glBinding.getDepthInformation(views[0]);
            if (depthData && depthData.isValid && depthData.texture) {
              depthSensing.init(renderer, depthData, session.renderState);
            }
          }
        }
        for (let i = 0; i < controllers.length; i++) {
          const inputSource = controllerInputSources[i];
          const controller = controllers[i];
          if (inputSource !== null && controller !== void 0) {
            controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
          }
        }
        if (onAnimationFrameCallback)
          onAnimationFrameCallback(time, frame);
        if (frame.detectedPlanes) {
          scope.dispatchEvent({ type: "planesdetected", data: frame });
        }
        xrFrame = null;
      }
      const animation = new WebGLAnimation();
      animation.setAnimationLoop(onAnimationFrame);
      this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
      };
      this.dispose = function() {
      };
    }
  };
  var _e1 = /* @__PURE__ */ new Euler();
  var _m12 = /* @__PURE__ */ new Matrix4();
  function WebGLMaterials(renderer, properties) {
    function refreshTransformUniform(map, uniform) {
      if (map.matrixAutoUpdate === true) {
        map.updateMatrix();
      }
      uniform.value.copy(map.matrix);
    }
    function refreshFogUniforms(uniforms, fog) {
      fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));
      if (fog.isFog) {
        uniforms.fogNear.value = fog.near;
        uniforms.fogFar.value = fog.far;
      } else if (fog.isFogExp2) {
        uniforms.fogDensity.value = fog.density;
      }
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
      if (material.isMeshBasicMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshLambertMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshToonMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsToon(uniforms, material);
      } else if (material.isMeshPhongMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsPhong(uniforms, material);
      } else if (material.isMeshStandardMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsStandard(uniforms, material);
        if (material.isMeshPhysicalMaterial) {
          refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
        }
      } else if (material.isMeshMatcapMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsMatcap(uniforms, material);
      } else if (material.isMeshDepthMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshDistanceMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDistance(uniforms, material);
      } else if (material.isMeshNormalMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isLineBasicMaterial) {
        refreshUniformsLine(uniforms, material);
        if (material.isLineDashedMaterial) {
          refreshUniformsDash(uniforms, material);
        }
      } else if (material.isPointsMaterial) {
        refreshUniformsPoints(uniforms, material, pixelRatio, height);
      } else if (material.isSpriteMaterial) {
        refreshUniformsSprites(uniforms, material);
      } else if (material.isShadowMaterial) {
        uniforms.color.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
      } else if (material.isShaderMaterial) {
        material.uniformsNeedUpdate = false;
      }
    }
    function refreshUniformsCommon(uniforms, material) {
      uniforms.opacity.value = material.opacity;
      if (material.color) {
        uniforms.diffuse.value.copy(material.color);
      }
      if (material.emissive) {
        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
      }
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide) {
          uniforms.bumpScale.value *= -1;
        }
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide) {
          uniforms.normalScale.value.negate();
        }
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
        refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);
      }
      if (material.specularMap) {
        uniforms.specularMap.value = material.specularMap;
        refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
      const materialProperties = properties.get(material);
      const envMap = materialProperties.envMap;
      const envMapRotation = materialProperties.envMapRotation;
      if (envMap) {
        uniforms.envMap.value = envMap;
        _e1.copy(envMapRotation);
        _e1.x *= -1;
        _e1.y *= -1;
        _e1.z *= -1;
        if (envMap.isCubeTexture && envMap.isRenderTargetTexture === false) {
          _e1.y *= -1;
          _e1.z *= -1;
        }
        uniforms.envMapRotation.value.setFromMatrix4(_m12.makeRotationFromEuler(_e1));
        uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
        uniforms.reflectivity.value = material.reflectivity;
        uniforms.ior.value = material.ior;
        uniforms.refractionRatio.value = material.refractionRatio;
      }
      if (material.lightMap) {
        uniforms.lightMap.value = material.lightMap;
        uniforms.lightMapIntensity.value = material.lightMapIntensity;
        refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);
      }
      if (material.aoMap) {
        uniforms.aoMap.value = material.aoMap;
        uniforms.aoMapIntensity.value = material.aoMapIntensity;
        refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);
      }
    }
    function refreshUniformsLine(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
    }
    function refreshUniformsDash(uniforms, material) {
      uniforms.dashSize.value = material.dashSize;
      uniforms.totalSize.value = material.dashSize + material.gapSize;
      uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.size.value = material.size * pixelRatio;
      uniforms.scale.value = height * 0.5;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.uvTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
    }
    function refreshUniformsSprites(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.rotation.value = material.rotation;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
    }
    function refreshUniformsPhong(uniforms, material) {
      uniforms.specular.value.copy(material.specular);
      uniforms.shininess.value = Math.max(material.shininess, 1e-4);
    }
    function refreshUniformsToon(uniforms, material) {
      if (material.gradientMap) {
        uniforms.gradientMap.value = material.gradientMap;
      }
    }
    function refreshUniformsStandard(uniforms, material) {
      uniforms.metalness.value = material.metalness;
      if (material.metalnessMap) {
        uniforms.metalnessMap.value = material.metalnessMap;
        refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);
      }
      uniforms.roughness.value = material.roughness;
      if (material.roughnessMap) {
        uniforms.roughnessMap.value = material.roughnessMap;
        refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);
      }
      if (material.envMap) {
        uniforms.envMapIntensity.value = material.envMapIntensity;
      }
    }
    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
      uniforms.ior.value = material.ior;
      if (material.sheen > 0) {
        uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
        uniforms.sheenRoughness.value = material.sheenRoughness;
        if (material.sheenColorMap) {
          uniforms.sheenColorMap.value = material.sheenColorMap;
          refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);
        }
        if (material.sheenRoughnessMap) {
          uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
          refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
        }
      }
      if (material.clearcoat > 0) {
        uniforms.clearcoat.value = material.clearcoat;
        uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
        if (material.clearcoatMap) {
          uniforms.clearcoatMap.value = material.clearcoatMap;
          refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);
        }
        if (material.clearcoatRoughnessMap) {
          uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
          refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
        }
        if (material.clearcoatNormalMap) {
          uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
          refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
          uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
          if (material.side === BackSide) {
            uniforms.clearcoatNormalScale.value.negate();
          }
        }
      }
      if (material.dispersion > 0) {
        uniforms.dispersion.value = material.dispersion;
      }
      if (material.iridescence > 0) {
        uniforms.iridescence.value = material.iridescence;
        uniforms.iridescenceIOR.value = material.iridescenceIOR;
        uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
        uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
        if (material.iridescenceMap) {
          uniforms.iridescenceMap.value = material.iridescenceMap;
          refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);
        }
        if (material.iridescenceThicknessMap) {
          uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
          refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
        }
      }
      if (material.transmission > 0) {
        uniforms.transmission.value = material.transmission;
        uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
        uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
        if (material.transmissionMap) {
          uniforms.transmissionMap.value = material.transmissionMap;
          refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);
        }
        uniforms.thickness.value = material.thickness;
        if (material.thicknessMap) {
          uniforms.thicknessMap.value = material.thicknessMap;
          refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);
        }
        uniforms.attenuationDistance.value = material.attenuationDistance;
        uniforms.attenuationColor.value.copy(material.attenuationColor);
      }
      if (material.anisotropy > 0) {
        uniforms.anisotropyVector.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
        if (material.anisotropyMap) {
          uniforms.anisotropyMap.value = material.anisotropyMap;
          refreshTransformUniform(material.anisotropyMap, uniforms.anisotropyMapTransform);
        }
      }
      uniforms.specularIntensity.value = material.specularIntensity;
      uniforms.specularColor.value.copy(material.specularColor);
      if (material.specularColorMap) {
        uniforms.specularColorMap.value = material.specularColorMap;
        refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);
      }
      if (material.specularIntensityMap) {
        uniforms.specularIntensityMap.value = material.specularIntensityMap;
        refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);
      }
    }
    function refreshUniformsMatcap(uniforms, material) {
      if (material.matcap) {
        uniforms.matcap.value = material.matcap;
      }
    }
    function refreshUniformsDistance(uniforms, material) {
      const light = properties.get(material).light;
      uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
      uniforms.nearDistance.value = light.shadow.camera.near;
      uniforms.farDistance.value = light.shadow.camera.far;
    }
    return {
      refreshFogUniforms,
      refreshMaterialUniforms
    };
  }
  function WebGLUniformsGroups(gl, info, capabilities, state) {
    let buffers = {};
    let updateList = {};
    let allocatedBindingPoints = [];
    const maxBindingPoints = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS);
    function bind(uniformsGroup, program) {
      const webglProgram = program.program;
      state.uniformBlockBinding(uniformsGroup, webglProgram);
    }
    function update(uniformsGroup, program) {
      let buffer = buffers[uniformsGroup.id];
      if (buffer === void 0) {
        prepareUniformsGroup(uniformsGroup);
        buffer = createBuffer(uniformsGroup);
        buffers[uniformsGroup.id] = buffer;
        uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
      }
      const webglProgram = program.program;
      state.updateUBOMapping(uniformsGroup, webglProgram);
      const frame = info.render.frame;
      if (updateList[uniformsGroup.id] !== frame) {
        updateBufferData(uniformsGroup);
        updateList[uniformsGroup.id] = frame;
      }
    }
    function createBuffer(uniformsGroup) {
      const bindingPointIndex = allocateBindingPointIndex();
      uniformsGroup.__bindingPointIndex = bindingPointIndex;
      const buffer = gl.createBuffer();
      const size = uniformsGroup.__size;
      const usage = uniformsGroup.usage;
      gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
      gl.bufferData(gl.UNIFORM_BUFFER, size, usage);
      gl.bindBuffer(gl.UNIFORM_BUFFER, null);
      gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);
      return buffer;
    }
    function allocateBindingPointIndex() {
      for (let i = 0; i < maxBindingPoints; i++) {
        if (allocatedBindingPoints.indexOf(i) === -1) {
          allocatedBindingPoints.push(i);
          return i;
        }
      }
      console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
      return 0;
    }
    function updateBufferData(uniformsGroup) {
      const buffer = buffers[uniformsGroup.id];
      const uniforms = uniformsGroup.uniforms;
      const cache = uniformsGroup.__cache;
      gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
      for (let i = 0, il = uniforms.length; i < il; i++) {
        const uniformArray = Array.isArray(uniforms[i]) ? uniforms[i] : [uniforms[i]];
        for (let j = 0, jl = uniformArray.length; j < jl; j++) {
          const uniform = uniformArray[j];
          if (hasUniformChanged(uniform, i, j, cache) === true) {
            const offset = uniform.__offset;
            const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
            let arrayOffset = 0;
            for (let k = 0; k < values.length; k++) {
              const value = values[k];
              const info2 = getUniformSize(value);
              if (typeof value === "number" || typeof value === "boolean") {
                uniform.__data[0] = value;
                gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);
              } else if (value.isMatrix3) {
                uniform.__data[0] = value.elements[0];
                uniform.__data[1] = value.elements[1];
                uniform.__data[2] = value.elements[2];
                uniform.__data[3] = 0;
                uniform.__data[4] = value.elements[3];
                uniform.__data[5] = value.elements[4];
                uniform.__data[6] = value.elements[5];
                uniform.__data[7] = 0;
                uniform.__data[8] = value.elements[6];
                uniform.__data[9] = value.elements[7];
                uniform.__data[10] = value.elements[8];
                uniform.__data[11] = 0;
              } else {
                value.toArray(uniform.__data, arrayOffset);
                arrayOffset += info2.storage / Float32Array.BYTES_PER_ELEMENT;
              }
            }
            gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
          }
        }
      }
      gl.bindBuffer(gl.UNIFORM_BUFFER, null);
    }
    function hasUniformChanged(uniform, index, indexArray, cache) {
      const value = uniform.value;
      const indexString = index + "_" + indexArray;
      if (cache[indexString] === void 0) {
        if (typeof value === "number" || typeof value === "boolean") {
          cache[indexString] = value;
        } else {
          cache[indexString] = value.clone();
        }
        return true;
      } else {
        const cachedObject = cache[indexString];
        if (typeof value === "number" || typeof value === "boolean") {
          if (cachedObject !== value) {
            cache[indexString] = value;
            return true;
          }
        } else {
          if (cachedObject.equals(value) === false) {
            cachedObject.copy(value);
            return true;
          }
        }
      }
      return false;
    }
    function prepareUniformsGroup(uniformsGroup) {
      const uniforms = uniformsGroup.uniforms;
      let offset = 0;
      const chunkSize = 16;
      for (let i = 0, l = uniforms.length; i < l; i++) {
        const uniformArray = Array.isArray(uniforms[i]) ? uniforms[i] : [uniforms[i]];
        for (let j = 0, jl = uniformArray.length; j < jl; j++) {
          const uniform = uniformArray[j];
          const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
          for (let k = 0, kl = values.length; k < kl; k++) {
            const value = values[k];
            const info2 = getUniformSize(value);
            const chunkOffset2 = offset % chunkSize;
            const chunkPadding = chunkOffset2 % info2.boundary;
            const chunkStart = chunkOffset2 + chunkPadding;
            offset += chunkPadding;
            if (chunkStart !== 0 && chunkSize - chunkStart < info2.storage) {
              offset += chunkSize - chunkStart;
            }
            uniform.__data = new Float32Array(info2.storage / Float32Array.BYTES_PER_ELEMENT);
            uniform.__offset = offset;
            offset += info2.storage;
          }
        }
      }
      const chunkOffset = offset % chunkSize;
      if (chunkOffset > 0)
        offset += chunkSize - chunkOffset;
      uniformsGroup.__size = offset;
      uniformsGroup.__cache = {};
      return this;
    }
    function getUniformSize(value) {
      const info2 = {
        boundary: 0,
        // bytes
        storage: 0
        // bytes
      };
      if (typeof value === "number" || typeof value === "boolean") {
        info2.boundary = 4;
        info2.storage = 4;
      } else if (value.isVector2) {
        info2.boundary = 8;
        info2.storage = 8;
      } else if (value.isVector3 || value.isColor) {
        info2.boundary = 16;
        info2.storage = 12;
      } else if (value.isVector4) {
        info2.boundary = 16;
        info2.storage = 16;
      } else if (value.isMatrix3) {
        info2.boundary = 48;
        info2.storage = 48;
      } else if (value.isMatrix4) {
        info2.boundary = 64;
        info2.storage = 64;
      } else if (value.isTexture) {
        console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
      } else {
        console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value);
      }
      return info2;
    }
    function onUniformsGroupsDispose(event) {
      const uniformsGroup = event.target;
      uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
      const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
      allocatedBindingPoints.splice(index, 1);
      gl.deleteBuffer(buffers[uniformsGroup.id]);
      delete buffers[uniformsGroup.id];
      delete updateList[uniformsGroup.id];
    }
    function dispose() {
      for (const id in buffers) {
        gl.deleteBuffer(buffers[id]);
      }
      allocatedBindingPoints = [];
      buffers = {};
      updateList = {};
    }
    return {
      bind,
      update,
      dispose
    };
  }
  var WebGLRenderer = class {
    constructor(parameters = {}) {
      const {
        canvas = createCanvasElement(),
        context = null,
        depth = true,
        stencil = false,
        alpha = false,
        antialias = false,
        premultipliedAlpha = true,
        preserveDrawingBuffer = false,
        powerPreference = "default",
        failIfMajorPerformanceCaveat = false,
        reverseDepthBuffer = false
      } = parameters;
      this.isWebGLRenderer = true;
      let _alpha;
      if (context !== null) {
        if (typeof WebGLRenderingContext !== "undefined" && context instanceof WebGLRenderingContext) {
          throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
        }
        _alpha = context.getContextAttributes().alpha;
      } else {
        _alpha = alpha;
      }
      const uintClearColor = new Uint32Array(4);
      const intClearColor = new Int32Array(4);
      let currentRenderList = null;
      let currentRenderState = null;
      const renderListStack = [];
      const renderStateStack = [];
      this.domElement = canvas;
      this.debug = {
        /**
         * Enables error checking and reporting when shader programs are being compiled
         * @type {boolean}
         */
        checkShaderErrors: true,
        /**
         * Callback for custom error reporting.
         * @type {?Function}
         */
        onShaderError: null
      };
      this.autoClear = true;
      this.autoClearColor = true;
      this.autoClearDepth = true;
      this.autoClearStencil = true;
      this.sortObjects = true;
      this.clippingPlanes = [];
      this.localClippingEnabled = false;
      this._outputColorSpace = SRGBColorSpace;
      this.toneMapping = NoToneMapping;
      this.toneMappingExposure = 1;
      const _this = this;
      let _isContextLost = false;
      let _currentActiveCubeFace = 0;
      let _currentActiveMipmapLevel = 0;
      let _currentRenderTarget = null;
      let _currentMaterialId = -1;
      let _currentCamera = null;
      const _currentViewport = new Vector4();
      const _currentScissor = new Vector4();
      let _currentScissorTest = null;
      const _currentClearColor = new Color(0);
      let _currentClearAlpha = 0;
      let _width = canvas.width;
      let _height = canvas.height;
      let _pixelRatio = 1;
      let _opaqueSort = null;
      let _transparentSort = null;
      const _viewport = new Vector4(0, 0, _width, _height);
      const _scissor = new Vector4(0, 0, _width, _height);
      let _scissorTest = false;
      const _frustum = new Frustum();
      let _clippingEnabled = false;
      let _localClippingEnabled = false;
      this.transmissionResolutionScale = 1;
      const _currentProjectionMatrix = new Matrix4();
      const _projScreenMatrix = new Matrix4();
      const _vector3 = new Vector3();
      const _vector4 = new Vector4();
      const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
      let _renderBackground = false;
      function getTargetPixelRatio() {
        return _currentRenderTarget === null ? _pixelRatio : 1;
      }
      let _gl = context;
      function getContext(contextName, contextAttributes) {
        return canvas.getContext(contextName, contextAttributes);
      }
      try {
        const contextAttributes = {
          alpha: true,
          depth,
          stencil,
          antialias,
          premultipliedAlpha,
          preserveDrawingBuffer,
          powerPreference,
          failIfMajorPerformanceCaveat
        };
        if ("setAttribute" in canvas)
          canvas.setAttribute("data-engine", `three.js r${REVISION}`);
        canvas.addEventListener("webglcontextlost", onContextLost, false);
        canvas.addEventListener("webglcontextrestored", onContextRestore, false);
        canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
        if (_gl === null) {
          const contextName = "webgl2";
          _gl = getContext(contextName, contextAttributes);
          if (_gl === null) {
            if (getContext(contextName)) {
              throw new Error("Error creating WebGL context with your selected attributes.");
            } else {
              throw new Error("Error creating WebGL context.");
            }
          }
        }
      } catch (error) {
        console.error("THREE.WebGLRenderer: " + error.message);
        throw error;
      }
      let extensions, capabilities, state, info;
      let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
      let programCache, materials, renderLists, renderStates, clipping, shadowMap;
      let background, morphtargets, bufferRenderer, indexedBufferRenderer;
      let utils, bindingStates, uniformsGroups;
      function initGLContext() {
        extensions = new WebGLExtensions(_gl);
        extensions.init();
        utils = new WebGLUtils(_gl, extensions);
        capabilities = new WebGLCapabilities(_gl, extensions, parameters, utils);
        state = new WebGLState(_gl, extensions);
        if (capabilities.reverseDepthBuffer && reverseDepthBuffer) {
          state.buffers.depth.setReversed(true);
        }
        info = new WebGLInfo(_gl);
        properties = new WebGLProperties();
        textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
        cubemaps = new WebGLCubeMaps(_this);
        cubeuvmaps = new WebGLCubeUVMaps(_this);
        attributes = new WebGLAttributes(_gl);
        bindingStates = new WebGLBindingStates(_gl, attributes);
        geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
        objects = new WebGLObjects(_gl, geometries, attributes, info);
        morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
        clipping = new WebGLClipping(properties);
        programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
        materials = new WebGLMaterials(_this, properties);
        renderLists = new WebGLRenderLists();
        renderStates = new WebGLRenderStates(extensions);
        background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
        shadowMap = new WebGLShadowMap(_this, objects, capabilities);
        uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);
        bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info);
        indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info);
        info.programs = programCache.programs;
        _this.capabilities = capabilities;
        _this.extensions = extensions;
        _this.properties = properties;
        _this.renderLists = renderLists;
        _this.shadowMap = shadowMap;
        _this.state = state;
        _this.info = info;
      }
      initGLContext();
      const xr = new WebXRManager(_this, _gl);
      this.xr = xr;
      this.getContext = function() {
        return _gl;
      };
      this.getContextAttributes = function() {
        return _gl.getContextAttributes();
      };
      this.forceContextLoss = function() {
        const extension = extensions.get("WEBGL_lose_context");
        if (extension)
          extension.loseContext();
      };
      this.forceContextRestore = function() {
        const extension = extensions.get("WEBGL_lose_context");
        if (extension)
          extension.restoreContext();
      };
      this.getPixelRatio = function() {
        return _pixelRatio;
      };
      this.setPixelRatio = function(value) {
        if (value === void 0)
          return;
        _pixelRatio = value;
        this.setSize(_width, _height, false);
      };
      this.getSize = function(target) {
        return target.set(_width, _height);
      };
      this.setSize = function(width, height, updateStyle = true) {
        if (xr.isPresenting) {
          console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
          return;
        }
        _width = width;
        _height = height;
        canvas.width = Math.floor(width * _pixelRatio);
        canvas.height = Math.floor(height * _pixelRatio);
        if (updateStyle === true) {
          canvas.style.width = width + "px";
          canvas.style.height = height + "px";
        }
        this.setViewport(0, 0, width, height);
      };
      this.getDrawingBufferSize = function(target) {
        return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
      };
      this.setDrawingBufferSize = function(width, height, pixelRatio) {
        _width = width;
        _height = height;
        _pixelRatio = pixelRatio;
        canvas.width = Math.floor(width * pixelRatio);
        canvas.height = Math.floor(height * pixelRatio);
        this.setViewport(0, 0, width, height);
      };
      this.getCurrentViewport = function(target) {
        return target.copy(_currentViewport);
      };
      this.getViewport = function(target) {
        return target.copy(_viewport);
      };
      this.setViewport = function(x, y, width, height) {
        if (x.isVector4) {
          _viewport.set(x.x, x.y, x.z, x.w);
        } else {
          _viewport.set(x, y, width, height);
        }
        state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).round());
      };
      this.getScissor = function(target) {
        return target.copy(_scissor);
      };
      this.setScissor = function(x, y, width, height) {
        if (x.isVector4) {
          _scissor.set(x.x, x.y, x.z, x.w);
        } else {
          _scissor.set(x, y, width, height);
        }
        state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).round());
      };
      this.getScissorTest = function() {
        return _scissorTest;
      };
      this.setScissorTest = function(boolean) {
        state.setScissorTest(_scissorTest = boolean);
      };
      this.setOpaqueSort = function(method) {
        _opaqueSort = method;
      };
      this.setTransparentSort = function(method) {
        _transparentSort = method;
      };
      this.getClearColor = function(target) {
        return target.copy(background.getClearColor());
      };
      this.setClearColor = function() {
        background.setClearColor.apply(background, arguments);
      };
      this.getClearAlpha = function() {
        return background.getClearAlpha();
      };
      this.setClearAlpha = function() {
        background.setClearAlpha.apply(background, arguments);
      };
      this.clear = function(color = true, depth2 = true, stencil2 = true) {
        let bits = 0;
        if (color) {
          let isIntegerFormat = false;
          if (_currentRenderTarget !== null) {
            const targetFormat = _currentRenderTarget.texture.format;
            isIntegerFormat = targetFormat === RGBAIntegerFormat || targetFormat === RGIntegerFormat || targetFormat === RedIntegerFormat;
          }
          if (isIntegerFormat) {
            const targetType = _currentRenderTarget.texture.type;
            const isUnsignedType = targetType === UnsignedByteType || targetType === UnsignedIntType || targetType === UnsignedShortType || targetType === UnsignedInt248Type || targetType === UnsignedShort4444Type || targetType === UnsignedShort5551Type;
            const clearColor = background.getClearColor();
            const a = background.getClearAlpha();
            const r = clearColor.r;
            const g = clearColor.g;
            const b = clearColor.b;
            if (isUnsignedType) {
              uintClearColor[0] = r;
              uintClearColor[1] = g;
              uintClearColor[2] = b;
              uintClearColor[3] = a;
              _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);
            } else {
              intClearColor[0] = r;
              intClearColor[1] = g;
              intClearColor[2] = b;
              intClearColor[3] = a;
              _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);
            }
          } else {
            bits |= _gl.COLOR_BUFFER_BIT;
          }
        }
        if (depth2) {
          bits |= _gl.DEPTH_BUFFER_BIT;
        }
        if (stencil2) {
          bits |= _gl.STENCIL_BUFFER_BIT;
          this.state.buffers.stencil.setMask(4294967295);
        }
        _gl.clear(bits);
      };
      this.clearColor = function() {
        this.clear(true, false, false);
      };
      this.clearDepth = function() {
        this.clear(false, true, false);
      };
      this.clearStencil = function() {
        this.clear(false, false, true);
      };
      this.dispose = function() {
        canvas.removeEventListener("webglcontextlost", onContextLost, false);
        canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
        canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
        background.dispose();
        renderLists.dispose();
        renderStates.dispose();
        properties.dispose();
        cubemaps.dispose();
        cubeuvmaps.dispose();
        objects.dispose();
        bindingStates.dispose();
        uniformsGroups.dispose();
        programCache.dispose();
        xr.dispose();
        xr.removeEventListener("sessionstart", onXRSessionStart);
        xr.removeEventListener("sessionend", onXRSessionEnd);
        animation.stop();
      };
      function onContextLost(event) {
        event.preventDefault();
        console.log("THREE.WebGLRenderer: Context Lost.");
        _isContextLost = true;
      }
      function onContextRestore() {
        console.log("THREE.WebGLRenderer: Context Restored.");
        _isContextLost = false;
        const infoAutoReset = info.autoReset;
        const shadowMapEnabled = shadowMap.enabled;
        const shadowMapAutoUpdate = shadowMap.autoUpdate;
        const shadowMapNeedsUpdate = shadowMap.needsUpdate;
        const shadowMapType = shadowMap.type;
        initGLContext();
        info.autoReset = infoAutoReset;
        shadowMap.enabled = shadowMapEnabled;
        shadowMap.autoUpdate = shadowMapAutoUpdate;
        shadowMap.needsUpdate = shadowMapNeedsUpdate;
        shadowMap.type = shadowMapType;
      }
      function onContextCreationError(event) {
        console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
      }
      function onMaterialDispose(event) {
        const material = event.target;
        material.removeEventListener("dispose", onMaterialDispose);
        deallocateMaterial(material);
      }
      function deallocateMaterial(material) {
        releaseMaterialProgramReferences(material);
        properties.remove(material);
      }
      function releaseMaterialProgramReferences(material) {
        const programs = properties.get(material).programs;
        if (programs !== void 0) {
          programs.forEach(function(program) {
            programCache.releaseProgram(program);
          });
          if (material.isShaderMaterial) {
            programCache.releaseShaderCache(material);
          }
        }
      }
      this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
        if (scene === null)
          scene = _emptyScene;
        const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
        const program = setProgram(camera, scene, geometry, material, object);
        state.setMaterial(material, frontFaceCW);
        let index = geometry.index;
        let rangeFactor = 1;
        if (material.wireframe === true) {
          index = geometries.getWireframeAttribute(geometry);
          if (index === void 0)
            return;
          rangeFactor = 2;
        }
        const drawRange = geometry.drawRange;
        const position = geometry.attributes.position;
        let drawStart = drawRange.start * rangeFactor;
        let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
        if (group !== null) {
          drawStart = Math.max(drawStart, group.start * rangeFactor);
          drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
        }
        if (index !== null) {
          drawStart = Math.max(drawStart, 0);
          drawEnd = Math.min(drawEnd, index.count);
        } else if (position !== void 0 && position !== null) {
          drawStart = Math.max(drawStart, 0);
          drawEnd = Math.min(drawEnd, position.count);
        }
        const drawCount = drawEnd - drawStart;
        if (drawCount < 0 || drawCount === Infinity)
          return;
        bindingStates.setup(object, material, program, geometry, index);
        let attribute;
        let renderer = bufferRenderer;
        if (index !== null) {
          attribute = attributes.get(index);
          renderer = indexedBufferRenderer;
          renderer.setIndex(attribute);
        }
        if (object.isMesh) {
          if (material.wireframe === true) {
            state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
            renderer.setMode(_gl.LINES);
          } else {
            renderer.setMode(_gl.TRIANGLES);
          }
        } else if (object.isLine) {
          let lineWidth = material.linewidth;
          if (lineWidth === void 0)
            lineWidth = 1;
          state.setLineWidth(lineWidth * getTargetPixelRatio());
          if (object.isLineSegments) {
            renderer.setMode(_gl.LINES);
          } else if (object.isLineLoop) {
            renderer.setMode(_gl.LINE_LOOP);
          } else {
            renderer.setMode(_gl.LINE_STRIP);
          }
        } else if (object.isPoints) {
          renderer.setMode(_gl.POINTS);
        } else if (object.isSprite) {
          renderer.setMode(_gl.TRIANGLES);
        }
        if (object.isBatchedMesh) {
          if (object._multiDrawInstances !== null) {
            renderer.renderMultiDrawInstances(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances);
          } else {
            if (!extensions.get("WEBGL_multi_draw")) {
              const starts = object._multiDrawStarts;
              const counts = object._multiDrawCounts;
              const drawCount2 = object._multiDrawCount;
              const bytesPerElement = index ? attributes.get(index).bytesPerElement : 1;
              const uniforms = properties.get(material).currentProgram.getUniforms();
              for (let i = 0; i < drawCount2; i++) {
                uniforms.setValue(_gl, "_gl_DrawID", i);
                renderer.render(starts[i] / bytesPerElement, counts[i]);
              }
            } else {
              renderer.renderMultiDraw(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount);
            }
          }
        } else if (object.isInstancedMesh) {
          renderer.renderInstances(drawStart, drawCount, object.count);
        } else if (geometry.isInstancedBufferGeometry) {
          const maxInstanceCount = geometry._maxInstanceCount !== void 0 ? geometry._maxInstanceCount : Infinity;
          const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);
          renderer.renderInstances(drawStart, drawCount, instanceCount);
        } else {
          renderer.render(drawStart, drawCount);
        }
      };
      function prepareMaterial(material, scene, object) {
        if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
          material.side = BackSide;
          material.needsUpdate = true;
          getProgram(material, scene, object);
          material.side = FrontSide;
          material.needsUpdate = true;
          getProgram(material, scene, object);
          material.side = DoubleSide;
        } else {
          getProgram(material, scene, object);
        }
      }
      this.compile = function(scene, camera, targetScene = null) {
        if (targetScene === null)
          targetScene = scene;
        currentRenderState = renderStates.get(targetScene);
        currentRenderState.init(camera);
        renderStateStack.push(currentRenderState);
        targetScene.traverseVisible(function(object) {
          if (object.isLight && object.layers.test(camera.layers)) {
            currentRenderState.pushLight(object);
            if (object.castShadow) {
              currentRenderState.pushShadow(object);
            }
          }
        });
        if (scene !== targetScene) {
          scene.traverseVisible(function(object) {
            if (object.isLight && object.layers.test(camera.layers)) {
              currentRenderState.pushLight(object);
              if (object.castShadow) {
                currentRenderState.pushShadow(object);
              }
            }
          });
        }
        currentRenderState.setupLights();
        const materials2 = /* @__PURE__ */ new Set();
        scene.traverse(function(object) {
          if (!(object.isMesh || object.isPoints || object.isLine || object.isSprite)) {
            return;
          }
          const material = object.material;
          if (material) {
            if (Array.isArray(material)) {
              for (let i = 0; i < material.length; i++) {
                const material2 = material[i];
                prepareMaterial(material2, targetScene, object);
                materials2.add(material2);
              }
            } else {
              prepareMaterial(material, targetScene, object);
              materials2.add(material);
            }
          }
        });
        renderStateStack.pop();
        currentRenderState = null;
        return materials2;
      };
      this.compileAsync = function(scene, camera, targetScene = null) {
        const materials2 = this.compile(scene, camera, targetScene);
        return new Promise((resolve) => {
          function checkMaterialsReady() {
            materials2.forEach(function(material) {
              const materialProperties = properties.get(material);
              const program = materialProperties.currentProgram;
              if (program.isReady()) {
                materials2.delete(material);
              }
            });
            if (materials2.size === 0) {
              resolve(scene);
              return;
            }
            setTimeout(checkMaterialsReady, 10);
          }
          if (extensions.get("KHR_parallel_shader_compile") !== null) {
            checkMaterialsReady();
          } else {
            setTimeout(checkMaterialsReady, 10);
          }
        });
      };
      let onAnimationFrameCallback = null;
      function onAnimationFrame(time) {
        if (onAnimationFrameCallback)
          onAnimationFrameCallback(time);
      }
      function onXRSessionStart() {
        animation.stop();
      }
      function onXRSessionEnd() {
        animation.start();
      }
      const animation = new WebGLAnimation();
      animation.setAnimationLoop(onAnimationFrame);
      if (typeof self !== "undefined")
        animation.setContext(self);
      this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
        xr.setAnimationLoop(callback);
        callback === null ? animation.stop() : animation.start();
      };
      xr.addEventListener("sessionstart", onXRSessionStart);
      xr.addEventListener("sessionend", onXRSessionEnd);
      this.render = function(scene, camera) {
        if (camera !== void 0 && camera.isCamera !== true) {
          console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
          return;
        }
        if (_isContextLost === true)
          return;
        if (scene.matrixWorldAutoUpdate === true)
          scene.updateMatrixWorld();
        if (camera.parent === null && camera.matrixWorldAutoUpdate === true)
          camera.updateMatrixWorld();
        if (xr.enabled === true && xr.isPresenting === true) {
          if (xr.cameraAutoUpdate === true)
            xr.updateCamera(camera);
          camera = xr.getCamera();
        }
        if (scene.isScene === true)
          scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
        currentRenderState = renderStates.get(scene, renderStateStack.length);
        currentRenderState.init(camera);
        renderStateStack.push(currentRenderState);
        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        _frustum.setFromProjectionMatrix(_projScreenMatrix);
        _localClippingEnabled = this.localClippingEnabled;
        _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);
        currentRenderList = renderLists.get(scene, renderListStack.length);
        currentRenderList.init();
        renderListStack.push(currentRenderList);
        if (xr.enabled === true && xr.isPresenting === true) {
          const depthSensingMesh = _this.xr.getDepthSensingMesh();
          if (depthSensingMesh !== null) {
            projectObject(depthSensingMesh, camera, -Infinity, _this.sortObjects);
          }
        }
        projectObject(scene, camera, 0, _this.sortObjects);
        currentRenderList.finish();
        if (_this.sortObjects === true) {
          currentRenderList.sort(_opaqueSort, _transparentSort);
        }
        _renderBackground = xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false;
        if (_renderBackground) {
          background.addToRenderList(currentRenderList, scene);
        }
        this.info.render.frame++;
        if (_clippingEnabled === true)
          clipping.beginShadows();
        const shadowsArray = currentRenderState.state.shadowsArray;
        shadowMap.render(shadowsArray, scene, camera);
        if (_clippingEnabled === true)
          clipping.endShadows();
        if (this.info.autoReset === true)
          this.info.reset();
        const opaqueObjects = currentRenderList.opaque;
        const transmissiveObjects = currentRenderList.transmissive;
        currentRenderState.setupLights();
        if (camera.isArrayCamera) {
          const cameras = camera.cameras;
          if (transmissiveObjects.length > 0) {
            for (let i = 0, l = cameras.length; i < l; i++) {
              const camera2 = cameras[i];
              renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera2);
            }
          }
          if (_renderBackground)
            background.render(scene);
          for (let i = 0, l = cameras.length; i < l; i++) {
            const camera2 = cameras[i];
            renderScene(currentRenderList, scene, camera2, camera2.viewport);
          }
        } else {
          if (transmissiveObjects.length > 0)
            renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera);
          if (_renderBackground)
            background.render(scene);
          renderScene(currentRenderList, scene, camera);
        }
        if (_currentRenderTarget !== null && _currentActiveMipmapLevel === 0) {
          textures.updateMultisampleRenderTarget(_currentRenderTarget);
          textures.updateRenderTargetMipmap(_currentRenderTarget);
        }
        if (scene.isScene === true)
          scene.onAfterRender(_this, scene, camera);
        bindingStates.resetDefaultState();
        _currentMaterialId = -1;
        _currentCamera = null;
        renderStateStack.pop();
        if (renderStateStack.length > 0) {
          currentRenderState = renderStateStack[renderStateStack.length - 1];
          if (_clippingEnabled === true)
            clipping.setGlobalState(_this.clippingPlanes, currentRenderState.state.camera);
        } else {
          currentRenderState = null;
        }
        renderListStack.pop();
        if (renderListStack.length > 0) {
          currentRenderList = renderListStack[renderListStack.length - 1];
        } else {
          currentRenderList = null;
        }
      };
      function projectObject(object, camera, groupOrder, sortObjects) {
        if (object.visible === false)
          return;
        const visible = object.layers.test(camera.layers);
        if (visible) {
          if (object.isGroup) {
            groupOrder = object.renderOrder;
          } else if (object.isLOD) {
            if (object.autoUpdate === true)
              object.update(camera);
          } else if (object.isLight) {
            currentRenderState.pushLight(object);
            if (object.castShadow) {
              currentRenderState.pushShadow(object);
            }
          } else if (object.isSprite) {
            if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
              if (sortObjects) {
                _vector4.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
              }
              const geometry = objects.update(object);
              const material = object.material;
              if (material.visible) {
                currentRenderList.push(object, geometry, material, groupOrder, _vector4.z, null);
              }
            }
          } else if (object.isMesh || object.isLine || object.isPoints) {
            if (!object.frustumCulled || _frustum.intersectsObject(object)) {
              const geometry = objects.update(object);
              const material = object.material;
              if (sortObjects) {
                if (object.boundingSphere !== void 0) {
                  if (object.boundingSphere === null)
                    object.computeBoundingSphere();
                  _vector4.copy(object.boundingSphere.center);
                } else {
                  if (geometry.boundingSphere === null)
                    geometry.computeBoundingSphere();
                  _vector4.copy(geometry.boundingSphere.center);
                }
                _vector4.applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);
              }
              if (Array.isArray(material)) {
                const groups = geometry.groups;
                for (let i = 0, l = groups.length; i < l; i++) {
                  const group = groups[i];
                  const groupMaterial = material[group.materialIndex];
                  if (groupMaterial && groupMaterial.visible) {
                    currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector4.z, group);
                  }
                }
              } else if (material.visible) {
                currentRenderList.push(object, geometry, material, groupOrder, _vector4.z, null);
              }
            }
          }
        }
        const children = object.children;
        for (let i = 0, l = children.length; i < l; i++) {
          projectObject(children[i], camera, groupOrder, sortObjects);
        }
      }
      function renderScene(currentRenderList2, scene, camera, viewport) {
        const opaqueObjects = currentRenderList2.opaque;
        const transmissiveObjects = currentRenderList2.transmissive;
        const transparentObjects = currentRenderList2.transparent;
        currentRenderState.setupLightsView(camera);
        if (_clippingEnabled === true)
          clipping.setGlobalState(_this.clippingPlanes, camera);
        if (viewport)
          state.viewport(_currentViewport.copy(viewport));
        if (opaqueObjects.length > 0)
          renderObjects(opaqueObjects, scene, camera);
        if (transmissiveObjects.length > 0)
          renderObjects(transmissiveObjects, scene, camera);
        if (transparentObjects.length > 0)
          renderObjects(transparentObjects, scene, camera);
        state.buffers.depth.setTest(true);
        state.buffers.depth.setMask(true);
        state.buffers.color.setMask(true);
        state.setPolygonOffset(false);
      }
      function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera) {
        const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
        if (overrideMaterial !== null) {
          return;
        }
        if (currentRenderState.state.transmissionRenderTarget[camera.id] === void 0) {
          currentRenderState.state.transmissionRenderTarget[camera.id] = new WebGLRenderTarget(1, 1, {
            generateMipmaps: true,
            type: extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float") ? HalfFloatType : UnsignedByteType,
            minFilter: LinearMipmapLinearFilter,
            samples: 4,
            stencilBuffer: stencil,
            resolveDepthBuffer: false,
            resolveStencilBuffer: false,
            colorSpace: ColorManagement.workingColorSpace
          });
        }
        const transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[camera.id];
        const activeViewport = camera.viewport || _currentViewport;
        transmissionRenderTarget.setSize(activeViewport.z * _this.transmissionResolutionScale, activeViewport.w * _this.transmissionResolutionScale);
        const currentRenderTarget = _this.getRenderTarget();
        _this.setRenderTarget(transmissionRenderTarget);
        _this.getClearColor(_currentClearColor);
        _currentClearAlpha = _this.getClearAlpha();
        if (_currentClearAlpha < 1)
          _this.setClearColor(16777215, 0.5);
        _this.clear();
        if (_renderBackground)
          background.render(scene);
        const currentToneMapping = _this.toneMapping;
        _this.toneMapping = NoToneMapping;
        const currentCameraViewport = camera.viewport;
        if (camera.viewport !== void 0)
          camera.viewport = void 0;
        currentRenderState.setupLightsView(camera);
        if (_clippingEnabled === true)
          clipping.setGlobalState(_this.clippingPlanes, camera);
        renderObjects(opaqueObjects, scene, camera);
        textures.updateMultisampleRenderTarget(transmissionRenderTarget);
        textures.updateRenderTargetMipmap(transmissionRenderTarget);
        if (extensions.has("WEBGL_multisampled_render_to_texture") === false) {
          let renderTargetNeedsUpdate = false;
          for (let i = 0, l = transmissiveObjects.length; i < l; i++) {
            const renderItem = transmissiveObjects[i];
            const object = renderItem.object;
            const geometry = renderItem.geometry;
            const material = renderItem.material;
            const group = renderItem.group;
            if (material.side === DoubleSide && object.layers.test(camera.layers)) {
              const currentSide = material.side;
              material.side = BackSide;
              material.needsUpdate = true;
              renderObject(object, scene, camera, geometry, material, group);
              material.side = currentSide;
              material.needsUpdate = true;
              renderTargetNeedsUpdate = true;
            }
          }
          if (renderTargetNeedsUpdate === true) {
            textures.updateMultisampleRenderTarget(transmissionRenderTarget);
            textures.updateRenderTargetMipmap(transmissionRenderTarget);
          }
        }
        _this.setRenderTarget(currentRenderTarget);
        _this.setClearColor(_currentClearColor, _currentClearAlpha);
        if (currentCameraViewport !== void 0)
          camera.viewport = currentCameraViewport;
        _this.toneMapping = currentToneMapping;
      }
      function renderObjects(renderList, scene, camera) {
        const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
        for (let i = 0, l = renderList.length; i < l; i++) {
          const renderItem = renderList[i];
          const object = renderItem.object;
          const geometry = renderItem.geometry;
          const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
          const group = renderItem.group;
          if (object.layers.test(camera.layers)) {
            renderObject(object, scene, camera, geometry, material, group);
          }
        }
      }
      function renderObject(object, scene, camera, geometry, material, group) {
        object.onBeforeRender(_this, scene, camera, geometry, material, group);
        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
        material.onBeforeRender(_this, scene, camera, geometry, object, group);
        if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
          material.side = BackSide;
          material.needsUpdate = true;
          _this.renderBufferDirect(camera, scene, geometry, material, object, group);
          material.side = FrontSide;
          material.needsUpdate = true;
          _this.renderBufferDirect(camera, scene, geometry, material, object, group);
          material.side = DoubleSide;
        } else {
          _this.renderBufferDirect(camera, scene, geometry, material, object, group);
        }
        object.onAfterRender(_this, scene, camera, geometry, material, group);
      }
      function getProgram(material, scene, object) {
        if (scene.isScene !== true)
          scene = _emptyScene;
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        const shadowsArray = currentRenderState.state.shadowsArray;
        const lightsStateVersion = lights.state.version;
        const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
        const programCacheKey = programCache.getProgramCacheKey(parameters2);
        let programs = materialProperties.programs;
        materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
        materialProperties.fog = scene.fog;
        materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
        materialProperties.envMapRotation = materialProperties.environment !== null && material.envMap === null ? scene.environmentRotation : material.envMapRotation;
        if (programs === void 0) {
          material.addEventListener("dispose", onMaterialDispose);
          programs = /* @__PURE__ */ new Map();
          materialProperties.programs = programs;
        }
        let program = programs.get(programCacheKey);
        if (program !== void 0) {
          if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
            updateCommonMaterialProperties(material, parameters2);
            return program;
          }
        } else {
          parameters2.uniforms = programCache.getUniforms(material);
          material.onBeforeCompile(parameters2, _this);
          program = programCache.acquireProgram(parameters2, programCacheKey);
          programs.set(programCacheKey, program);
          materialProperties.uniforms = parameters2.uniforms;
        }
        const uniforms = materialProperties.uniforms;
        if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
          uniforms.clippingPlanes = clipping.uniform;
        }
        updateCommonMaterialProperties(material, parameters2);
        materialProperties.needsLights = materialNeedsLights(material);
        materialProperties.lightsStateVersion = lightsStateVersion;
        if (materialProperties.needsLights) {
          uniforms.ambientLightColor.value = lights.state.ambient;
          uniforms.lightProbe.value = lights.state.probe;
          uniforms.directionalLights.value = lights.state.directional;
          uniforms.directionalLightShadows.value = lights.state.directionalShadow;
          uniforms.spotLights.value = lights.state.spot;
          uniforms.spotLightShadows.value = lights.state.spotShadow;
          uniforms.rectAreaLights.value = lights.state.rectArea;
          uniforms.ltc_1.value = lights.state.rectAreaLTC1;
          uniforms.ltc_2.value = lights.state.rectAreaLTC2;
          uniforms.pointLights.value = lights.state.point;
          uniforms.pointLightShadows.value = lights.state.pointShadow;
          uniforms.hemisphereLights.value = lights.state.hemi;
          uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
          uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
          uniforms.spotShadowMap.value = lights.state.spotShadowMap;
          uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
          uniforms.spotLightMap.value = lights.state.spotLightMap;
          uniforms.pointShadowMap.value = lights.state.pointShadowMap;
          uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
        }
        materialProperties.currentProgram = program;
        materialProperties.uniformsList = null;
        return program;
      }
      function getUniformList(materialProperties) {
        if (materialProperties.uniformsList === null) {
          const progUniforms = materialProperties.currentProgram.getUniforms();
          materialProperties.uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, materialProperties.uniforms);
        }
        return materialProperties.uniformsList;
      }
      function updateCommonMaterialProperties(material, parameters2) {
        const materialProperties = properties.get(material);
        materialProperties.outputColorSpace = parameters2.outputColorSpace;
        materialProperties.batching = parameters2.batching;
        materialProperties.batchingColor = parameters2.batchingColor;
        materialProperties.instancing = parameters2.instancing;
        materialProperties.instancingColor = parameters2.instancingColor;
        materialProperties.instancingMorph = parameters2.instancingMorph;
        materialProperties.skinning = parameters2.skinning;
        materialProperties.morphTargets = parameters2.morphTargets;
        materialProperties.morphNormals = parameters2.morphNormals;
        materialProperties.morphColors = parameters2.morphColors;
        materialProperties.morphTargetsCount = parameters2.morphTargetsCount;
        materialProperties.numClippingPlanes = parameters2.numClippingPlanes;
        materialProperties.numIntersection = parameters2.numClipIntersection;
        materialProperties.vertexAlphas = parameters2.vertexAlphas;
        materialProperties.vertexTangents = parameters2.vertexTangents;
        materialProperties.toneMapping = parameters2.toneMapping;
      }
      function setProgram(camera, scene, geometry, material, object) {
        if (scene.isScene !== true)
          scene = _emptyScene;
        textures.resetTextureUnits();
        const fog = scene.fog;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const colorSpace = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
        const vertexTangents = !!geometry.attributes.tangent && (!!material.normalMap || material.anisotropy > 0);
        const morphTargets = !!geometry.morphAttributes.position;
        const morphNormals = !!geometry.morphAttributes.normal;
        const morphColors = !!geometry.morphAttributes.color;
        let toneMapping = NoToneMapping;
        if (material.toneMapped) {
          if (_currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true) {
            toneMapping = _this.toneMapping;
          }
        }
        const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
        const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        if (_clippingEnabled === true) {
          if (_localClippingEnabled === true || camera !== _currentCamera) {
            const useCache = camera === _currentCamera && material.id === _currentMaterialId;
            clipping.setState(material, camera, useCache);
          }
        }
        let needsProgramChange = false;
        if (material.version === materialProperties.__version) {
          if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
            needsProgramChange = true;
          } else if (materialProperties.outputColorSpace !== colorSpace) {
            needsProgramChange = true;
          } else if (object.isBatchedMesh && materialProperties.batching === false) {
            needsProgramChange = true;
          } else if (!object.isBatchedMesh && materialProperties.batching === true) {
            needsProgramChange = true;
          } else if (object.isBatchedMesh && materialProperties.batchingColor === true && object.colorTexture === null) {
            needsProgramChange = true;
          } else if (object.isBatchedMesh && materialProperties.batchingColor === false && object.colorTexture !== null) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancing === false) {
            needsProgramChange = true;
          } else if (!object.isInstancedMesh && materialProperties.instancing === true) {
            needsProgramChange = true;
          } else if (object.isSkinnedMesh && materialProperties.skinning === false) {
            needsProgramChange = true;
          } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null) {
            needsProgramChange = true;
          } else if (materialProperties.envMap !== envMap) {
            needsProgramChange = true;
          } else if (material.fog === true && materialProperties.fog !== fog) {
            needsProgramChange = true;
          } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
            needsProgramChange = true;
          } else if (materialProperties.vertexAlphas !== vertexAlphas) {
            needsProgramChange = true;
          } else if (materialProperties.vertexTangents !== vertexTangents) {
            needsProgramChange = true;
          } else if (materialProperties.morphTargets !== morphTargets) {
            needsProgramChange = true;
          } else if (materialProperties.morphNormals !== morphNormals) {
            needsProgramChange = true;
          } else if (materialProperties.morphColors !== morphColors) {
            needsProgramChange = true;
          } else if (materialProperties.toneMapping !== toneMapping) {
            needsProgramChange = true;
          } else if (materialProperties.morphTargetsCount !== morphTargetsCount) {
            needsProgramChange = true;
          }
        } else {
          needsProgramChange = true;
          materialProperties.__version = material.version;
        }
        let program = materialProperties.currentProgram;
        if (needsProgramChange === true) {
          program = getProgram(material, scene, object);
        }
        let refreshProgram = false;
        let refreshMaterial = false;
        let refreshLights = false;
        const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
        if (state.useProgram(program.program)) {
          refreshProgram = true;
          refreshMaterial = true;
          refreshLights = true;
        }
        if (material.id !== _currentMaterialId) {
          _currentMaterialId = material.id;
          refreshMaterial = true;
        }
        if (refreshProgram || _currentCamera !== camera) {
          const reverseDepthBuffer2 = state.buffers.depth.getReversed();
          if (reverseDepthBuffer2) {
            _currentProjectionMatrix.copy(camera.projectionMatrix);
            toNormalizedProjectionMatrix(_currentProjectionMatrix);
            toReversedProjectionMatrix(_currentProjectionMatrix);
            p_uniforms.setValue(_gl, "projectionMatrix", _currentProjectionMatrix);
          } else {
            p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
          }
          p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
          const uCamPos = p_uniforms.map.cameraPosition;
          if (uCamPos !== void 0) {
            uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
          }
          if (capabilities.logarithmicDepthBuffer) {
            p_uniforms.setValue(
              _gl,
              "logDepthBufFC",
              2 / (Math.log(camera.far + 1) / Math.LN2)
            );
          }
          if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
            p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
          }
          if (_currentCamera !== camera) {
            _currentCamera = camera;
            refreshMaterial = true;
            refreshLights = true;
          }
        }
        if (object.isSkinnedMesh) {
          p_uniforms.setOptional(_gl, object, "bindMatrix");
          p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
          const skeleton = object.skeleton;
          if (skeleton) {
            if (skeleton.boneTexture === null)
              skeleton.computeBoneTexture();
            p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
          }
        }
        if (object.isBatchedMesh) {
          p_uniforms.setOptional(_gl, object, "batchingTexture");
          p_uniforms.setValue(_gl, "batchingTexture", object._matricesTexture, textures);
          p_uniforms.setOptional(_gl, object, "batchingIdTexture");
          p_uniforms.setValue(_gl, "batchingIdTexture", object._indirectTexture, textures);
          p_uniforms.setOptional(_gl, object, "batchingColorTexture");
          if (object._colorsTexture !== null) {
            p_uniforms.setValue(_gl, "batchingColorTexture", object._colorsTexture, textures);
          }
        }
        const morphAttributes = geometry.morphAttributes;
        if (morphAttributes.position !== void 0 || morphAttributes.normal !== void 0 || morphAttributes.color !== void 0) {
          morphtargets.update(object, geometry, program);
        }
        if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
          materialProperties.receiveShadow = object.receiveShadow;
          p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
        }
        if (material.isMeshGouraudMaterial && material.envMap !== null) {
          m_uniforms.envMap.value = envMap;
          m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
        }
        if (material.isMeshStandardMaterial && material.envMap === null && scene.environment !== null) {
          m_uniforms.envMapIntensity.value = scene.environmentIntensity;
        }
        if (refreshMaterial) {
          p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
          if (materialProperties.needsLights) {
            markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
          }
          if (fog && material.fog === true) {
            materials.refreshFogUniforms(m_uniforms, fog);
          }
          materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[camera.id]);
          WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
        }
        if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
          WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
          material.uniformsNeedUpdate = false;
        }
        if (material.isSpriteMaterial) {
          p_uniforms.setValue(_gl, "center", object.center);
        }
        p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
        p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
        p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
        if (material.isShaderMaterial || material.isRawShaderMaterial) {
          const groups = material.uniformsGroups;
          for (let i = 0, l = groups.length; i < l; i++) {
            const group = groups[i];
            uniformsGroups.update(group, program);
            uniformsGroups.bind(group, program);
          }
        }
        return program;
      }
      function markUniformsLightsNeedsUpdate(uniforms, value) {
        uniforms.ambientLightColor.needsUpdate = value;
        uniforms.lightProbe.needsUpdate = value;
        uniforms.directionalLights.needsUpdate = value;
        uniforms.directionalLightShadows.needsUpdate = value;
        uniforms.pointLights.needsUpdate = value;
        uniforms.pointLightShadows.needsUpdate = value;
        uniforms.spotLights.needsUpdate = value;
        uniforms.spotLightShadows.needsUpdate = value;
        uniforms.rectAreaLights.needsUpdate = value;
        uniforms.hemisphereLights.needsUpdate = value;
      }
      function materialNeedsLights(material) {
        return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
      }
      this.getActiveCubeFace = function() {
        return _currentActiveCubeFace;
      };
      this.getActiveMipmapLevel = function() {
        return _currentActiveMipmapLevel;
      };
      this.getRenderTarget = function() {
        return _currentRenderTarget;
      };
      this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
        properties.get(renderTarget.texture).__webglTexture = colorTexture;
        properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__hasExternalTextures = true;
        renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === void 0;
        if (!renderTargetProperties.__autoAllocateDepthBuffer) {
          if (extensions.has("WEBGL_multisampled_render_to_texture") === true) {
            console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
            renderTargetProperties.__useRenderToTexture = false;
          }
        }
      };
      this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
        renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === void 0;
      };
      const _scratchFrameBuffer = _gl.createFramebuffer();
      this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
        _currentRenderTarget = renderTarget;
        _currentActiveCubeFace = activeCubeFace;
        _currentActiveMipmapLevel = activeMipmapLevel;
        let useDefaultFramebuffer = true;
        let framebuffer = null;
        let isCube = false;
        let isRenderTarget3D = false;
        if (renderTarget) {
          const renderTargetProperties = properties.get(renderTarget);
          if (renderTargetProperties.__useDefaultFramebuffer !== void 0) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, null);
            useDefaultFramebuffer = false;
          } else if (renderTargetProperties.__webglFramebuffer === void 0) {
            textures.setupRenderTarget(renderTarget);
          } else if (renderTargetProperties.__hasExternalTextures) {
            textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
          } else if (renderTarget.depthBuffer) {
            const depthTexture = renderTarget.depthTexture;
            if (renderTargetProperties.__boundDepthTexture !== depthTexture) {
              if (depthTexture !== null && properties.has(depthTexture) && (renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height)) {
                throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
              }
              textures.setupDepthRenderbuffer(renderTarget);
            }
          }
          const texture = renderTarget.texture;
          if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
            isRenderTarget3D = true;
          }
          const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
          if (renderTarget.isWebGLCubeRenderTarget) {
            if (Array.isArray(__webglFramebuffer[activeCubeFace])) {
              framebuffer = __webglFramebuffer[activeCubeFace][activeMipmapLevel];
            } else {
              framebuffer = __webglFramebuffer[activeCubeFace];
            }
            isCube = true;
          } else if (renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
            framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
          } else {
            if (Array.isArray(__webglFramebuffer)) {
              framebuffer = __webglFramebuffer[activeMipmapLevel];
            } else {
              framebuffer = __webglFramebuffer;
            }
          }
          _currentViewport.copy(renderTarget.viewport);
          _currentScissor.copy(renderTarget.scissor);
          _currentScissorTest = renderTarget.scissorTest;
        } else {
          _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
          _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
          _currentScissorTest = _scissorTest;
        }
        if (activeMipmapLevel !== 0) {
          framebuffer = _scratchFrameBuffer;
        }
        const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        if (framebufferBound && useDefaultFramebuffer) {
          state.drawBuffers(renderTarget, framebuffer);
        }
        state.viewport(_currentViewport);
        state.scissor(_currentScissor);
        state.setScissorTest(_currentScissorTest);
        if (isCube) {
          const textureProperties = properties.get(renderTarget.texture);
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
        } else if (isRenderTarget3D) {
          const textureProperties = properties.get(renderTarget.texture);
          const layer = activeCubeFace;
          _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel, layer);
        } else if (renderTarget !== null && activeMipmapLevel !== 0) {
          const textureProperties = properties.get(renderTarget.texture);
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, textureProperties.__webglTexture, activeMipmapLevel);
        }
        _currentMaterialId = -1;
      };
      this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
        if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
          return;
        }
        let framebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
          framebuffer = framebuffer[activeCubeFaceIndex];
        }
        if (framebuffer) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
          try {
            const texture = renderTarget.texture;
            const textureFormat = texture.format;
            const textureType = texture.type;
            if (!capabilities.textureFormatReadable(textureFormat)) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
              return;
            }
            if (!capabilities.textureTypeReadable(textureType)) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
              return;
            }
            if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
              _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
            }
          } finally {
            const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
            state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer2);
          }
        }
      };
      this.readRenderTargetPixelsAsync = async function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
        if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        }
        let framebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
          framebuffer = framebuffer[activeCubeFaceIndex];
        }
        if (framebuffer) {
          const texture = renderTarget.texture;
          const textureFormat = texture.format;
          const textureType = texture.type;
          if (!capabilities.textureFormatReadable(textureFormat)) {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
          }
          if (!capabilities.textureTypeReadable(textureType)) {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
          }
          if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
            const glBuffer = _gl.createBuffer();
            _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
            _gl.bufferData(_gl.PIXEL_PACK_BUFFER, buffer.byteLength, _gl.STREAM_READ);
            _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), 0);
            const currFramebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
            state.bindFramebuffer(_gl.FRAMEBUFFER, currFramebuffer);
            const sync = _gl.fenceSync(_gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
            _gl.flush();
            await probeAsync(_gl, sync, 4);
            _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
            _gl.getBufferSubData(_gl.PIXEL_PACK_BUFFER, 0, buffer);
            _gl.deleteBuffer(glBuffer);
            _gl.deleteSync(sync);
            return buffer;
          } else {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
          }
        }
      };
      this.copyFramebufferToTexture = function(texture, position = null, level = 0) {
        if (texture.isTexture !== true) {
          warnOnce("WebGLRenderer: copyFramebufferToTexture function signature has changed.");
          position = arguments[0] || null;
          texture = arguments[1];
        }
        const levelScale = Math.pow(2, -level);
        const width = Math.floor(texture.image.width * levelScale);
        const height = Math.floor(texture.image.height * levelScale);
        const x = position !== null ? position.x : 0;
        const y = position !== null ? position.y : 0;
        textures.setTexture2D(texture, 0);
        _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, x, y, width, height);
        state.unbindTexture();
      };
      const _srcFramebuffer = _gl.createFramebuffer();
      const _dstFramebuffer = _gl.createFramebuffer();
      this.copyTextureToTexture = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = null) {
        if (srcTexture.isTexture !== true) {
          warnOnce("WebGLRenderer: copyTextureToTexture function signature has changed.");
          dstPosition = arguments[0] || null;
          srcTexture = arguments[1];
          dstTexture = arguments[2];
          dstLevel = arguments[3] || 0;
          srcRegion = null;
        }
        if (dstLevel === null) {
          if (srcLevel !== 0) {
            warnOnce("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels.");
            dstLevel = srcLevel;
            srcLevel = 0;
          } else {
            dstLevel = 0;
          }
        }
        let width, height, depth2, minX, minY, minZ;
        let dstX, dstY, dstZ;
        const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[dstLevel] : srcTexture.image;
        if (srcRegion !== null) {
          width = srcRegion.max.x - srcRegion.min.x;
          height = srcRegion.max.y - srcRegion.min.y;
          depth2 = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;
          minX = srcRegion.min.x;
          minY = srcRegion.min.y;
          minZ = srcRegion.isBox3 ? srcRegion.min.z : 0;
        } else {
          const levelScale = Math.pow(2, -srcLevel);
          width = Math.floor(image.width * levelScale);
          height = Math.floor(image.height * levelScale);
          if (srcTexture.isDataArrayTexture) {
            depth2 = image.depth;
          } else if (srcTexture.isData3DTexture) {
            depth2 = Math.floor(image.depth * levelScale);
          } else {
            depth2 = 1;
          }
          minX = 0;
          minY = 0;
          minZ = 0;
        }
        if (dstPosition !== null) {
          dstX = dstPosition.x;
          dstY = dstPosition.y;
          dstZ = dstPosition.z;
        } else {
          dstX = 0;
          dstY = 0;
          dstZ = 0;
        }
        const glFormat = utils.convert(dstTexture.format);
        const glType = utils.convert(dstTexture.type);
        let glTarget;
        if (dstTexture.isData3DTexture) {
          textures.setTexture3D(dstTexture, 0);
          glTarget = _gl.TEXTURE_3D;
        } else if (dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture) {
          textures.setTexture2DArray(dstTexture, 0);
          glTarget = _gl.TEXTURE_2D_ARRAY;
        } else {
          textures.setTexture2D(dstTexture, 0);
          glTarget = _gl.TEXTURE_2D;
        }
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
        const currentUnpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
        const currentUnpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
        const currentUnpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
        const currentUnpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
        const currentUnpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
        _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
        _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
        _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, minX);
        _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, minY);
        _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, minZ);
        const isSrc3D = srcTexture.isDataArrayTexture || srcTexture.isData3DTexture;
        const isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture;
        if (srcTexture.isDepthTexture) {
          const srcTextureProperties = properties.get(srcTexture);
          const dstTextureProperties = properties.get(dstTexture);
          const srcRenderTargetProperties = properties.get(srcTextureProperties.__renderTarget);
          const dstRenderTargetProperties = properties.get(dstTextureProperties.__renderTarget);
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, srcRenderTargetProperties.__webglFramebuffer);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, dstRenderTargetProperties.__webglFramebuffer);
          for (let i = 0; i < depth2; i++) {
            if (isSrc3D) {
              _gl.framebufferTextureLayer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get(srcTexture).__webglTexture, srcLevel, minZ + i);
              _gl.framebufferTextureLayer(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get(dstTexture).__webglTexture, dstLevel, dstZ + i);
            }
            _gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, _gl.DEPTH_BUFFER_BIT, _gl.NEAREST);
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
        } else if (srcLevel !== 0 || srcTexture.isRenderTargetTexture || properties.has(srcTexture)) {
          const srcTextureProperties = properties.get(srcTexture);
          const dstTextureProperties = properties.get(dstTexture);
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, _srcFramebuffer);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, _dstFramebuffer);
          for (let i = 0; i < depth2; i++) {
            if (isSrc3D) {
              _gl.framebufferTextureLayer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, srcTextureProperties.__webglTexture, srcLevel, minZ + i);
            } else {
              _gl.framebufferTexture2D(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, srcTextureProperties.__webglTexture, srcLevel);
            }
            if (isDst3D) {
              _gl.framebufferTextureLayer(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, dstTextureProperties.__webglTexture, dstLevel, dstZ + i);
            } else {
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, dstTextureProperties.__webglTexture, dstLevel);
            }
            if (srcLevel !== 0) {
              _gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, _gl.COLOR_BUFFER_BIT, _gl.NEAREST);
            } else if (isDst3D) {
              _gl.copyTexSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ + i, minX, minY, width, height);
            } else {
              _gl.copyTexSubImage2D(glTarget, dstLevel, dstX, dstY, minX, minY, width, height);
            }
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
        } else {
          if (isDst3D) {
            if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
              _gl.texSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image.data);
            } else if (dstTexture.isCompressedArrayTexture) {
              _gl.compressedTexSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, image.data);
            } else {
              _gl.texSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image);
            }
          } else {
            if (srcTexture.isDataTexture) {
              _gl.texSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data);
            } else if (srcTexture.isCompressedTexture) {
              _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data);
            } else {
              _gl.texSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image);
            }
          }
        }
        _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
        _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
        _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
        _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
        _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
        if (dstLevel === 0 && dstTexture.generateMipmaps) {
          _gl.generateMipmap(glTarget);
        }
        state.unbindTexture();
      };
      this.copyTextureToTexture3D = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
        if (srcTexture.isTexture !== true) {
          warnOnce("WebGLRenderer: copyTextureToTexture3D function signature has changed.");
          srcRegion = arguments[0] || null;
          dstPosition = arguments[1] || null;
          srcTexture = arguments[2];
          dstTexture = arguments[3];
          level = arguments[4] || 0;
        }
        warnOnce('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.');
        return this.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, level);
      };
      this.initRenderTarget = function(target) {
        if (properties.get(target).__webglFramebuffer === void 0) {
          textures.setupRenderTarget(target);
        }
      };
      this.initTexture = function(texture) {
        if (texture.isCubeTexture) {
          textures.setTextureCube(texture, 0);
        } else if (texture.isData3DTexture) {
          textures.setTexture3D(texture, 0);
        } else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
          textures.setTexture2DArray(texture, 0);
        } else {
          textures.setTexture2D(texture, 0);
        }
        state.unbindTexture();
      };
      this.resetState = function() {
        _currentActiveCubeFace = 0;
        _currentActiveMipmapLevel = 0;
        _currentRenderTarget = null;
        state.reset();
        bindingStates.reset();
      };
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    get coordinateSystem() {
      return WebGLCoordinateSystem;
    }
    get outputColorSpace() {
      return this._outputColorSpace;
    }
    set outputColorSpace(colorSpace) {
      this._outputColorSpace = colorSpace;
      const gl = this.getContext();
      gl.drawingBufferColorspace = ColorManagement._getDrawingBufferColorSpace(colorSpace);
      gl.unpackColorSpace = ColorManagement._getUnpackColorSpace();
    }
  };

  // src/shaders/test/fragment.glsl
  var fragment_default = "uniform sampler2D uTexture;uniform float uOpacity;varying vec2 vUv;void main(){vec4 texture=texture2D(uTexture,vUv);gl_FragColor=texture;gl_FragColor.a*=uOpacity;}";

  // src/shaders/test/vertex.glsl
  var vertex_default = "varying vec2 vUv;uniform float uTime;uniform float uManualTime;uniform float uSpeed;uniform float uElevation;uniform float uTwistFactor;uniform float uTwistFactor2;uniform vec2 uFrequency;uniform sampler2D uTexture;varying float twistPerlin2;vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x,289.0);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}vec3 fade(vec3 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}float cnoise(vec3 P){vec3 Pi0=floor(P);vec3 Pi1=Pi0+vec3(1.0);Pi0=mod(Pi0,289.0);Pi1=mod(Pi1,289.0);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0/7.0;vec4 gy0=fract(floor(gx0)/7.0)-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1/7.0;vec4 gy1=fract(floor(gx1)/7.0)-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}vec2 rotate2D(vec2 value,float angle){float s=sin(angle);float c=cos(angle);mat2 m=mat2(c,s,-s,c);return m*value;}void main(){vec3 newPosition=position;newPosition.x*=3.0;float elevation=sin(position.x*uFrequency.x+uManualTime*uSpeed)*sin(position.y*uFrequency.y+uManualTime*uSpeed)*uElevation;newPosition.xy+=elevation;float angle=newPosition.y*uTwistFactor*cnoise(vec3(newPosition.zx,uManualTime));float angle2=newPosition.y*uTwistFactor2*cnoise(vec3(newPosition.yz,uManualTime));newPosition.zy*=rotate2D(newPosition.zy,angle);gl_Position=projectionMatrix*modelViewMatrix*vec4(newPosition,1.0);vUv=uv;}";

  // src/shaders/test/vertex2.glsl
  var vertex2_default = "varying vec2 vUv;uniform float uTime;uniform float uManualTime;uniform float uSpeed;uniform float uElevation;uniform float uTwistFactor;uniform float uTwistFactor2;uniform vec2 uFrequency;uniform sampler2D uTexture;varying float twistPerlin2;vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x,289.0);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}vec3 fade(vec3 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}float cnoise(vec3 P){vec3 Pi0=floor(P);vec3 Pi1=Pi0+vec3(1.0);Pi0=mod(Pi0,289.0);Pi1=mod(Pi1,289.0);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0/7.0;vec4 gy0=fract(floor(gx0)/7.0)-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1/7.0;vec4 gy1=fract(floor(gx1)/7.0)-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}vec2 rotate2D(vec2 value,float angle){float s=sin(angle);float c=cos(angle);mat2 m=mat2(c,s,-s,c);return m*value;}void main(){vec3 newPosition=position;newPosition.x*=5.0;float elevation=sin(position.x*uFrequency.x+uManualTime*uSpeed)*sin(position.y*uFrequency.y+uManualTime*uSpeed)*uElevation;newPosition.xy+=elevation;float angle=newPosition.y*uTwistFactor*cnoise(vec3(newPosition.zx,uManualTime));float angle2=newPosition.y*uTwistFactor2*cnoise(vec3(newPosition.yz,uManualTime));newPosition.zy*=rotate2D(newPosition.zy,angle);gl_Position=projectionMatrix*modelViewMatrix*vec4(newPosition,1.0);vUv=uv;}";

  // src/WaveAnim.js
  var WaveAnim = class {
    scene;
    meshTop;
    meshBottom;
    _currentSection;
    _isMobile;
    preloaderComplete = false;
    constructor() {
      const canvas = document.createElement("canvas");
      canvas.classList.add("webgl");
      canvas.style.zIndex = "1";
      document.body.appendChild(canvas);
      this.scene = new Scene();
      const sizes = {
        width: window.innerWidth,
        height: window.innerHeight
      };
      window.addEventListener("resize", () => {
        sizes.width = window.innerWidth;
        sizes.height = window.innerHeight;
        camera.aspect = sizes.width / sizes.height;
        camera.updateProjectionMatrix();
        renderer.setSize(sizes.width, sizes.height);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
      });
      const camera = new PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);
      camera.position.set(0.25, 1, 1.2);
      this.scene.add(camera);
      const renderer = new WebGLRenderer({
        canvas,
        antialias: true,
        alpha: true,
        preserveDrawingBuffer: true
      });
      renderer.setSize(sizes.width, sizes.height);
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
      const texture = new TextureLoader().load(
        "https://cdn.prod.website-files.com/67a51f5233734befd00d7699/67bf928a8f6ad5c62f6effc8_curved.png"
      );
      texture.minFilter = LinearMipmapLinearFilter;
      texture.magFilter = LinearFilter;
      texture.anisotropy = renderer.capabilities.getMaxAnisotropy();
      texture.generateMipmaps = true;
      const geometry = new PlaneGeometry(2, 1, 400, 400);
      const params1 = {
        position: [0, 0, 0],
        rotation: [0, 0, 0],
        vertexShader: vertex_default,
        fragmentShader: fragment_default,
        freqX: -5,
        freqY: -1.3,
        twist: -3,
        elevation: 0.1
      };
      const params2 = {
        position: [0, 2, 0],
        rotation: [0, 0, Math.PI],
        vertexShader: vertex2_default,
        fragmentShader: fragment_default,
        freqX: -5,
        freqY: -1.3,
        twist: -3,
        elevation: 0.1
      };
      this.meshBottom = this.createMesh(params1, texture, geometry);
      this.meshTop = this.createMesh(params2, texture, geometry);
      const tick = () => {
        if (this.meshTop) {
          this.meshTop.material.uniforms.uManualTime.value += 23e-4;
        }
        if (this.meshBottom) {
          this.meshBottom.material.uniforms.uManualTime.value += 22e-4;
        }
        if (this.meshTop || this.meshBottom) {
          renderer.render(this.scene, camera);
          window.requestAnimationFrame(tick);
        }
      };
      tick();
      this.initAnim();
    }
    createMesh(params, texture, geometry) {
      const material = new ShaderMaterial({
        vertexShader: params.vertexShader,
        fragmentShader: params.fragmentShader,
        side: DoubleSide,
        depthWrite: false,
        transparent: true,
        uniforms: {
          uTexture: { value: texture },
          uTime: { value: 0 },
          uElevation: { value: params.elevation },
          uTwistFactor: { value: params.twist },
          uTwistFactor2: { value: -2 },
          uFrequency: { value: new Vector2(params.freqX, params.freqY) },
          uSpeed: { value: 0.5 },
          uManualTime: { value: 0 },
          uOpacity: { value: 0 }
        }
      });
      const mesh = new Mesh(geometry, material);
      mesh.position.set(...params.position);
      mesh.rotation.set(...params.rotation);
      this.scene.add(mesh);
      return mesh;
    }
    get isMobile() {
      return this._isMobile;
    }
    set isMobile(val) {
      if (this.preloaderComplete) {
        this.showHideBottomMesh(val ? 0 : 1);
      }
      this._isMobile = val;
    }
    initAnim() {
      gsap.to(this.meshTop.material.uniforms.uOpacity, { value: 1, duration: 2, ease: "linear" });
      gsap.to(this.meshBottom.material.uniforms.uOpacity, {
        value: 1,
        duration: 2,
        ease: "linear"
      });
    }
    onPreloaderComplete() {
      this.preloaderComplete = true;
      if (this.meshTop) {
        gsap.killTweensOf(this.meshTop.material.uniforms.uOpacity);
        gsap.to(this.meshTop.material.uniforms.uOpacity, {
          value: 0,
          duration: 1,
          ease: "linear",
          onComplete: () => {
            this.meshTop.geometry.dispose();
            this.meshTop.material.dispose();
            this.scene.remove(this.meshTop);
            this.meshTop = null;
          }
        });
      }
      if (this.meshBottom && this.isMobile) {
        this.showHideBottomMesh(0);
      }
    }
    showHideBottomMesh(opacity) {
      opacity = 0;
      gsap.killTweensOf(this.meshBottom.material.uniforms.uOpacity);
      gsap.to(this.meshBottom.material.uniforms.uOpacity, {
        value: opacity,
        duration: 1,
        ease: "linear"
        // onComplete: () => {
        //   this.meshBottom.geometry.dispose();
        //   this.meshBottom.material.dispose();
        //   this.scene.remove(this.meshBottom);
        //   this.meshBottom = null;
        // },
      });
    }
  };

  // src/wave.svg
  var wave_default = '<svg preserveAspectRatio="xMidYMid meet" viewBox="0 0 4320 323" fill="none" xmlns="http://www.w3.org/2000/svg">\n<g clip-path="url(#clip0_1779_1730)">\n<g opacity="0.2">\n<path d="M3328.63 609.338C3329.06 621.032 3319.9 633.687 3299.61 634.924C3282.14 635.665 3263.75 630.584 3247.99 626.484C3218.23 618.738 3189.62 609.182 3161.33 599.525C3063.84 566.243 2969.09 529.686 2874.01 493.764C2785.01 460.133 2695.94 426.565 2606.21 393.712C2538.65 369.039 2470.72 344.762 2402.15 321.23C2157.18 294.174 1908.98 279.554 1660.81 270.873C1601.46 268.84 1542.08 267.156 1482.67 265.796C1476.58 278.779 1471.54 291.913 1466.65 305.09C1455.26 335.45 1442.8 365.339 1421.65 393.654C1403.41 416.782 1415.46 447.643 1421.41 471.765C1427.46 496.16 1435.83 522.677 1426.56 547.165C1416.68 573.231 1382.79 586.407 1342.64 590.234C1311.52 593.202 1279.79 591.775 1248.71 589.443C1165.35 582.526 1068.23 571.741 1004.98 533.424C968.595 510.262 954.194 481.304 949.726 449.398C948.821 443.227 948.175 437.043 947.563 430.859C945.146 407.415 943.515 381.723 921.883 361.622C892.728 334.537 836.714 327.187 788.664 323.587C515.269 304.964 240.502 325.225 -30.7025 347.625C-105.624 353.817 -180.719 360.708 -256.181 363.655C-302.313 365.436 -348.679 365.752 -394.885 365.587C-447.943 365.398 -502.431 365.31 -554.796 359.29C-566.015 357.879 -593.951 355.998 -596.994 346.644C-596.994 346.522 -597.007 346.391 -596.994 346.273C-595.882 335.833 -549.237 331.127 -536.473 329.216C-504.875 324.492 -472.79 321.137 -440.759 317.858C-439.667 317.744 -439.128 317.689 -438.036 317.576C-292.972 302.741 -145.439 295.61 0.916057 288.205C253.385 275.491 506.461 267.388 759.642 263.342C999.135 259.612 1238.78 259.663 1478.21 264.942C1490.87 238.678 1510.33 213.765 1545.01 196.408C1593.3 172.244 1657.91 165.475 1717.54 162.263C1821.73 157.043 1929.73 181.746 2025.12 205.257C2156.49 237.638 2282.55 278.371 2406.43 320.779C2448.12 325.423 2489.7 330.411 2531.17 335.829C2669.83 354.141 2807.72 376.781 2939.95 409.2C3022.56 429.453 3103.94 453.562 3177.04 485.476C3203.92 497.208 3229.67 510.06 3253.08 524.478C3287.8 546.314 3328.54 576.308 3328.69 609.329H3328.63V609.338ZM2410.25 322.139C2477.58 345.297 2544.26 369.183 2610.6 393.435C2700.34 426.287 2789.4 459.864 2878.41 493.495C2967.96 527.333 3057.25 561.591 3148.67 593.391C3179.05 603.958 3209.69 614.402 3241.38 623.331C3258.16 628.058 3278.99 634.928 3298 634.23C3321.02 632.984 3324.66 613.577 3322.7 602.459C3317.29 571.854 3281.22 545.447 3248.18 524.672C3224.83 510.279 3199.13 497.452 3172.31 485.741C3099.36 453.89 3018.15 429.832 2935.71 409.617C2803.77 377.261 2666.18 354.667 2527.83 336.397C2488.72 331.299 2449.51 326.564 2410.2 322.143H2410.26L2410.25 322.139ZM1482.97 265.064C1542.61 266.428 1602.22 268.116 1661.81 270.158C1908.28 278.779 2154.76 293.265 2398.13 319.891C2303.64 287.62 2207.96 256.59 2109.67 229.172C2035.67 208.608 1960.1 189.584 1881.91 176.349C1829.33 167.449 1773.69 160.242 1718.98 162.983C1650.2 166.708 1574.53 176.033 1526.97 210.586C1505.49 226.318 1492.82 245.468 1482.98 265.072V265.064H1482.97ZM1408.11 422.911C1408.07 412.972 1409.91 402.637 1416.77 393.569C1437.91 365.268 1450.38 335.4 1461.75 305.052C1466.7 291.863 1471.73 278.699 1477.77 265.691C1238.63 260.416 999.268 260.374 760.068 264.092C507.24 268.137 254.511 276.228 2.39414 288.925C-143.568 296.313 -290.702 303.419 -435.379 318.211C-436.471 318.321 -437.01 318.376 -438.102 318.485C-469.694 321.714 -501.326 325.019 -532.492 329.653C-544.962 331.506 -591.102 336.098 -592.174 346.278C-592.187 346.383 -592.174 346.505 -592.174 346.627C-589.477 355.484 -562.486 357.366 -551.893 358.709C-500.314 364.64 -446.604 364.699 -394.353 364.872C-348.719 365.023 -302.926 364.703 -257.366 362.944C-182.277 360.001 -107.549 353.139 -32.9995 346.976C239.637 324.45 515.795 304.181 790.635 322.909C839.318 326.551 896.523 333.893 926.304 361.256C948.235 381.399 949.9 407.276 952.316 430.846C952.936 437.03 953.628 443.21 954.48 449.382C958.941 481.215 973.242 510.128 1009.55 533.247C1072.25 571.181 1168.25 581.933 1250.87 588.794C1280.37 591.03 1310.43 592.44 1339.97 589.615C1379.63 585.835 1412.39 572.562 1421.81 546.87C1430.76 522.433 1422.47 496.118 1416.45 471.794C1412.46 455.566 1408.52 439.362 1408.03 422.915H1408.09L1408.11 422.911Z" fill="url(#paint0_linear_1779_1730)" style=""/>\n<path d="M3355.56 604.219C3355.66 617.062 3345.26 632.171 3322.06 632.962C3304.34 633.737 3285.69 628.66 3269.68 624.543C3240.35 616.999 3212.1 607.729 3184.17 598.333C3087.24 565.721 2993.01 529.837 2898.46 494.585C2810.56 461.809 2722.62 429.095 2634 397.097C2550.96 367.01 2467.39 337.492 2382.66 309.346C2242.98 293.816 2102.3 282.286 1960.98 274.721C1837.9 268.318 1714.51 265.413 1591.08 263.565C1569.3 263.25 1547.51 262.955 1525.73 262.706C1517.21 278.005 1510.68 293.644 1504.26 309.337C1492.28 338.801 1479.22 367.781 1457.85 395.161C1439.16 417.455 1449.93 447.622 1455.07 471.209C1460.26 494.952 1467.54 520.677 1457.78 544.327C1447.29 569.729 1413.58 582.438 1374.25 586.167C1343.29 589.106 1311.74 587.679 1280.82 585.347C1196.97 578.358 1100.86 567.417 1036.1 529.972C998.957 507.417 982.332 479.014 975.521 447.277C974.243 441.278 973.171 435.258 972.119 429.242C968.017 405.887 964.355 380.574 941.752 360.969C911.105 334.389 855.352 326.938 806.782 323.259C535.544 304.568 262.934 323.857 -6.33312 345.444C-79.7037 351.321 -153.234 357.879 -227.111 360.654C-227.583 360.367 -227.816 360.224 -228.282 359.934C-154.765 357.172 -81.5812 350.639 -8.55685 344.791C262.149 323.09 536.15 303.789 808.826 322.585C858.081 326.315 914.88 333.749 946.193 360.616C969.116 380.283 972.831 405.714 976.946 429.225C977.998 435.245 979.07 441.261 980.348 447.26C987.152 478.929 1003.74 507.286 1040.8 529.795C1104.96 566.904 1200.01 577.773 1283.11 584.698C1312.45 586.925 1342.33 588.335 1371.72 585.549C1410.55 582.025 1443.16 568.95 1453.2 544.049C1462.7 520.492 1455.42 494.863 1450.23 471.243C1445.11 447.622 1434.27 417.388 1453.1 395.081C1474.45 367.718 1487.5 338.751 1499.49 309.304C1505.87 293.606 1512.38 277.962 1520.85 262.656C1283.46 260.012 1045.98 261.364 808.706 266.824C767.121 267.792 725.535 268.794 683.963 269.926C662.471 270.511 640.979 271.096 619.487 271.686C487.027 275.281 354.554 278.817 222.181 283.502C92.3909 288.133 -37.3858 293.147 -166.976 299.659C-243.13 303.486 -319.736 307.136 -395.284 314.532C-427.728 317.723 -460.172 321.36 -492.037 326.412C-506.085 328.639 -550.88 333.034 -554.056 344.876C-553.456 351.982 -535.467 354.432 -527.45 356.002C-478.182 364.733 -423.8 364.8 -373.039 365.486C-329.35 366.076 -284.848 366.652 -241.272 364.047C-240.553 364.32 -240.193 364.455 -239.481 364.729C-282.944 367.318 -327.286 366.825 -370.869 366.311C-423.66 365.688 -479.953 365.566 -531.166 356.486C-539.608 354.827 -558.11 352.247 -558.949 344.867C-555.847 332.802 -510.286 328.256 -496.038 325.983C-463.741 320.834 -430.844 317.146 -397.947 313.905C-322.153 306.487 -245.3 302.817 -168.9 298.973C-39.0636 292.448 90.9594 287.422 220.996 282.787C353.476 278.093 486.049 274.557 618.615 270.962C640.107 270.377 661.599 269.796 683.091 269.202C724.709 268.061 766.328 267.059 807.96 266.091C1045.62 260.631 1283.48 259.271 1521.27 261.923C1535.21 237.718 1556.69 215.739 1590.43 200.689C1638.19 179.38 1699.11 173.28 1756.02 170.337C1851.17 165.601 1949.68 186.536 2037.56 207.13C2157.87 235.322 2273.47 271.286 2386.98 308.925C2453.25 316.389 2519.26 324.728 2584.97 333.964C2783.64 362.19 2989.83 397.577 3165.83 464.57C3191.74 474.433 3216.91 485.139 3240.57 497.073C3256.54 505.27 3272.01 513.824 3286.35 523.152C3318.88 544.441 3355.54 572.844 3355.6 604.223C3355.57 604.223 3355.56 604.227 3355.54 604.231L3355.56 604.219ZM2391.15 310.297C2474.5 338.106 2556.78 367.166 2638.52 396.811C2727.12 428.821 2815.08 461.527 2902.98 494.299C2992.03 527.497 3080.82 561.111 3171.71 592.267C3202.28 602.749 3233.13 613.105 3265.04 621.895C3281.58 626.454 3301.95 632.954 3320.6 632.251C3344.79 631.068 3351.63 612.747 3350.37 600.262C3347.36 570.293 3313.14 543.898 3281.66 523.308C3267.33 513.992 3251.91 505.438 3235.93 497.267C3212.6 485.492 3187.78 474.913 3162.24 465.164C2986.43 398.078 2780.32 362.704 2581.74 334.486C2518.49 325.591 2454.98 317.529 2391.22 310.285C2391.19 310.285 2391.19 310.289 2391.16 310.293L2391.15 310.297ZM1526.18 261.974C1547.98 262.231 1569.78 262.517 1591.57 262.833C1715.38 264.681 1839.15 267.598 1962.59 274.014C2101.99 281.482 2240.76 292.797 2378.58 307.969C2301.66 282.522 2223.85 258.105 2144.33 236.08C2071.13 215.903 1996.39 197.254 1919.1 184.271C1866.91 175.498 1811.75 168.426 1757.47 171.028C1689.33 174.568 1614.47 183.509 1566.59 217.187C1548.48 230.57 1536.11 245.569 1526.24 261.966C1526.21 261.966 1526.21 261.97 1526.18 261.974Z" fill="url(#paint1_linear_1779_1730)" style=""/>\n<path d="M3382.07 599.281C3382.16 613.619 3370.08 630.045 3344.51 630.997C3327.04 631.771 3308.76 626.968 3292.88 622.981C3263.4 615.585 3235.03 606.412 3206.96 597.113C3110.57 565.178 3016.86 529.964 2922.82 495.385C2836.07 463.48 2749.27 431.629 2661.83 400.477C2560.87 364.173 2459.1 328.689 2355.36 295.643C2243.54 283.305 2131.02 273.845 2017.89 267.868C1894 261.591 1769.74 260.505 1645.51 260.021C1620.45 259.928 1595.39 259.865 1570.33 259.84C1559.01 276.965 1551.02 294.747 1543.1 312.587C1530.26 341.529 1516.3 369.961 1494.11 396.672C1475.7 418.348 1484.75 447.079 1489.09 470.224C1493.47 493.352 1499.77 518.48 1489.45 541.338C1478.3 566.037 1444.66 578.59 1406 582.08C1375.18 584.984 1343.78 583.566 1313 581.238C1228.72 574.178 1133.47 563.128 1067.35 526.503C1029.44 504.529 1010.58 476.665 1001.39 445.134C999.687 439.304 998.229 433.448 996.745 427.596C990.939 404.334 985.28 379.42 961.697 360.292C929.566 334.221 874.085 326.66 824.976 322.897C555.889 304.138 285.45 322.451 18.1133 343.213C-53.7259 348.791 -125.718 355.008 -198.024 357.597C-198.47 357.311 -198.689 357.168 -199.135 356.878C-127.203 354.297 -55.5835 348.1 15.8829 342.548C284.638 321.676 556.455 303.351 826.96 322.223C876.762 326.029 933.241 333.581 966.038 359.921C989.934 379.117 995.673 404.144 1001.52 427.567C1002.95 433.423 1004.45 439.274 1006.16 445.104C1015.35 476.564 1034.1 504.381 1071.93 526.314C1137.43 562.593 1231.66 573.589 1315.17 580.581C1344.39 582.8 1374.14 584.21 1403.41 581.453C1441.57 578.017 1474.11 565.376 1484.79 541.035C1494.79 518.24 1488.56 493.293 1484.21 470.249C1479.86 447.049 1470.83 418.293 1489.29 396.571C1511.5 369.886 1525.43 341.466 1538.24 312.533C1546.15 294.7 1554.14 276.931 1565.46 259.823C1329.28 259.659 1093.09 262.424 857.161 269.522C848.126 269.791 839.091 270.065 830.056 270.334C796.866 271.332 763.677 272.342 730.5 273.445C635.658 276.569 540.762 279.028 445.866 281.452C381.697 283.094 317.521 284.727 253.372 286.651C238.911 287.089 224.456 287.527 209.995 287.965C91.4505 291.539 -27.1208 294.928 -145.592 299.415C-215.527 302.063 -286.062 304.307 -355.431 310.823C-382.921 313.425 -410.332 316.683 -437.383 320.733C-455.18 323.398 -473.163 326.29 -490.148 330.647C-498.969 332.912 -514.11 336.25 -516.187 343.078C-516.253 350.003 -499.755 353.194 -491.805 354.79C-446.039 364.404 -394.067 365.049 -346.269 366.16C-306.581 367.002 -264.996 368.555 -225.488 365.12C-224.476 365.373 -223.963 365.499 -222.951 365.752C-263.072 369.254 -305.323 367.848 -345.637 366.96C-395.052 365.874 -448.296 365.049 -495.7 355.223C-503.93 353.565 -521.127 350.247 -521.007 343.057C-519.003 336.271 -504.216 332.878 -495.454 330.584C-477.977 326.004 -459.401 323.01 -441.032 320.253C-413.595 316.14 -385.791 312.831 -357.901 310.188C-288.252 303.646 -217.431 301.377 -147.21 298.716C-28.4923 294.216 90.3387 290.819 209.136 287.236C223.598 286.799 238.052 286.361 252.513 285.923C316.709 284.003 380.918 282.357 445.134 280.716C539.943 278.291 634.752 275.837 729.515 272.717C762.738 271.606 795.968 270.604 829.198 269.598C838.232 269.328 847.267 269.055 856.302 268.785C1092.72 261.667 1329.42 258.897 1566.09 259.069C1581.34 236.994 1604.34 217.953 1636.85 205.034C1683.57 186.473 1740.6 181.021 1794.59 178.348C1879.96 174.581 1967.1 191.041 2046.8 208.557C2154.39 232.203 2257.97 262.841 2359.64 295.167C2453.29 305.641 2546.33 318.077 2638.83 332.045C2769.97 352.015 2900.26 375.783 3025.35 407.933C3113.25 430.522 3202.74 456.988 3276.1 495.709C3291.39 503.931 3305.83 512.565 3319.65 521.772C3349.72 542.601 3382.03 569.543 3382.08 599.239V599.268L3382.07 599.281ZM2363.97 296.611C2466.23 329.376 2566.64 364.371 2666.29 400.195C2753.72 431.347 2840.53 463.198 2927.28 495.103C3015.84 527.665 3104.14 560.644 3194.53 591.164C3224.98 601.449 3255.7 611.598 3287.46 620.19C3304.05 624.678 3324.36 631.022 3342.98 630.298C3368.94 628.904 3378.21 611.59 3377.23 597.386C3375.24 568.432 3344.54 542.5 3314.95 521.978C3301.14 512.796 3286.71 504.175 3271.45 495.962C3198.24 457.308 3108.92 430.893 3021.19 408.35C2896.35 376.267 2766.31 352.542 2635.43 332.609C2545.5 319.028 2455.05 306.908 2364.03 296.611H2363.97H2363.97ZM1570.83 259.103C1595.77 259.137 1620.7 259.191 1645.63 259.28C1770.34 259.764 1895.07 260.867 2019.44 267.173C2130.54 273.033 2241.05 282.256 2350.9 294.246C2294.21 276.266 2236.97 259.023 2178.82 242.992C2106.42 223.203 2032.53 204.945 1956.17 192.207C1904.36 183.564 1849.67 176.626 1795.81 179.081C1742.68 181.712 1686.62 187.147 1640.73 205.488C1608.59 218.332 1585.88 237.242 1570.77 259.09C1570.8 259.09 1570.81 259.095 1570.83 259.099V259.103Z" fill="url(#paint2_linear_1779_1730)" style=""/>\n<path d="M3409.75 594.84V595.909C3409.35 612.221 3394.6 627.62 3367.04 629.031C3348.88 629.856 3329.8 624.872 3313.28 620.776C3282.46 613.126 3252.76 603.642 3223.38 594.027C3122.48 561.002 3024.31 524.596 2925.81 488.835C2847.28 460.31 2768.71 431.836 2689.68 403.871C2567.28 360.595 2443.91 318.3 2317.37 280.03C2236.93 271.635 2156.08 265.199 2074.82 261.04C1950.08 254.889 1824.98 255.626 1699.97 256.493C1672.01 256.691 1644.04 256.906 1616.07 257.154C1600.56 275.845 1591.09 296.258 1581.41 316.368C1567.82 344.594 1553.15 372.302 1530.43 398.2C1511.8 419.025 1519.54 446.919 1523.01 469.483C1526.52 492.001 1531.73 516.396 1520.94 538.446C1509.15 562.517 1475.68 574.633 1437.75 578.03C1407.05 580.905 1375.78 579.491 1345.12 577.159C1260.85 570.078 1165.88 559.133 1098.68 523.464C1059.25 502.533 1038.91 474.097 1027.2 443.033C1025.18 437.363 1023.26 431.68 1021.38 425.988C1013.82 402.835 1006.17 378.343 981.605 359.66C947.989 334.095 892.802 326.433 843.114 322.585C576.19 303.764 307.901 321.095 42.4956 341.028C-27.8056 346.307 -98.26 352.196 -169.001 354.613C-169.42 354.327 -169.633 354.183 -170.053 353.893C-99.6915 351.493 -29.6099 345.617 40.3251 340.367C307.142 320.329 576.802 302.993 845.151 321.924C895.485 325.818 951.745 333.476 985.973 359.294C1010.81 378.027 1018.54 402.671 1026.14 425.959C1028.02 431.65 1029.94 437.329 1031.96 443.004C1043.62 473.912 1063.8 502.268 1103 523.123C1169.63 558.573 1263.7 569.493 1347.35 576.523C1376.42 578.737 1406.02 580.148 1435.15 577.42C1472.52 574.081 1504.95 561.857 1516.29 538.177C1526.8 516.202 1521.56 491.933 1518.06 469.525C1514.54 446.906 1506.87 418.992 1525.55 398.12C1548.26 372.235 1562.92 344.543 1576.54 316.334C1586.22 296.258 1595.64 275.879 1611.12 257.213C1375.85 259.373 1140.58 263.553 905.672 272.292C890.185 272.865 874.692 273.429 859.206 273.993C831.835 274.982 804.464 275.984 777.093 277.049C659.008 281.625 540.77 284.218 422.544 286.765C376.611 287.754 330.671 288.744 284.745 289.884C196.068 292.103 107.377 293.98 18.6735 295.803C-92.188 298.072 -205.393 297.352 -315.456 307.182C-348.852 310.2 -382.201 314.461 -414.652 320.304C-430.818 323.217 -473.568 328.487 -478.256 341.352C-478.768 348.374 -464.127 351.481 -456.105 353.64C-406.483 365.453 -348.499 366.291 -296.214 367.545C-268.171 368.084 -237.471 369.684 -209.647 366.286C-208.362 366.505 -207.717 366.615 -206.432 366.838C-235.58 370.378 -267.465 368.837 -296.893 368.273C-350.416 367.111 -409.625 366.219 -460.186 354.028C-468.136 352.154 -484.121 348.353 -483.083 341.314C-478.289 328.222 -434.952 322.842 -418.527 319.879C-385.617 313.939 -351.808 309.603 -317.939 306.538C-207.277 296.645 -93.4796 297.344 17.9877 295.062C106.625 293.244 195.256 291.362 283.873 289.144C329.839 288.003 375.819 287.013 421.792 286.024C539.837 283.486 657.889 280.893 775.788 276.325C803.173 275.26 830.563 274.262 857.961 273.265C873.454 272.705 888.94 272.136 904.427 271.564C1139.91 262.791 1375.76 258.619 1611.61 256.459C1655.5 204.297 1745.98 190.548 1832.82 186.46C1905.97 183.366 1980.2 195.52 2049.33 209.395C2142.56 228.115 2232.49 253.075 2320.77 279.571C2445.89 292.747 2569.61 310.344 2692.46 330.222C2821.41 351.199 2949.53 375.661 3072.43 408.27C3156.24 430.505 3242.46 456.323 3311.47 494.455C3326.06 502.668 3339.71 511.319 3352.8 520.488C3380.52 540.762 3409.91 566.736 3409.55 594.852C3409.62 594.844 3409.65 594.84 3409.73 594.831L3409.75 594.84ZM2325.29 280.859C2450.61 318.814 2572.83 360.696 2694.08 403.567C2773.09 431.554 2851.66 460.032 2930.2 488.54C3022.96 522.226 3115.48 556.342 3210.11 587.902C3241.68 598.43 3273.52 608.812 3306.39 617.643C3324.06 622.392 3345.59 629.111 3365.38 628.332C3391.46 627.069 3403.87 610.676 3404.42 595.888C3405.49 567.396 3376.3 541.174 3348.23 520.635C3335.16 511.483 3321.51 502.849 3306.96 494.64C3238.1 456.572 3152.03 430.808 3068.38 408.615C2945.69 376.065 2817.79 351.649 2689.07 330.714C2568.83 311.312 2447.67 293.955 2325.28 280.871V280.863L2325.29 280.859ZM1616.7 256.396C1644.4 256.148 1672.09 255.933 1699.78 255.744C1825.39 254.872 1951.09 254.157 2076.43 260.328C2155.72 264.462 2234.64 270.73 2313.18 278.733C2226.3 252.7 2137.83 228.174 2046.12 209.711C1978.55 196.109 1905.9 184.124 1834.36 187.142C1748.62 191.188 1660.05 204.987 1616.76 256.384C1616.73 256.384 1616.73 256.388 1616.7 256.392V256.396Z" fill="url(#paint3_linear_1779_1730)" style=""/>\n<path d="M3437.33 589.952C3437.33 591.32 3437.27 592.676 3437.09 594.006C3435.18 611.118 3417.52 625.591 3389.45 627.061C3370.78 627.928 3351.18 622.851 3334.16 618.679C3303.24 611.097 3273.38 601.714 3243.86 592.192C3141.73 559.255 3042.32 522.9 2942.58 487.193C2867.67 460.382 2792.77 433.583 2717.46 407.242C2571.67 356.297 2424.51 306.479 2272.07 263.868C2225.43 259.823 2178.67 256.59 2131.75 254.182C2012.82 248.465 1893.63 250.494 1774.53 252.574C1767.81 252.692 1761.08 252.805 1754.36 252.923C1724.04 253.445 1693.71 253.984 1663.39 254.54C1642.84 274.553 1631.36 297.639 1619.66 320.123C1605.29 347.629 1589.85 374.592 1566.62 399.686C1547.84 419.615 1554.19 446.818 1556.85 468.704C1559.54 490.59 1563.76 514.308 1552.45 535.533C1539.99 558.931 1506.66 570.629 1469.48 573.934C1438.92 576.771 1407.8 575.361 1377.28 573.037C1292.56 565.885 1198.55 554.776 1130 519.978C1089.77 499.561 1067.21 471.68 1053.05 440.874C1050.67 435.363 1048.38 429.844 1046.12 424.313C1036.77 401.298 1027.14 377.206 1001.62 358.961C966.584 333.922 911.596 326.143 861.361 322.211C596.608 303.322 330.504 319.676 67.0553 338.763C-1.71463 343.743 -70.631 349.304 -139.794 351.552C-140.187 351.262 -140.386 351.115 -140.786 350.824C-71.9693 348.593 -3.40575 343.045 65.0113 338.09C329.851 318.902 597.314 302.539 863.465 321.537C914.345 325.515 970.352 333.299 1006.01 358.578C1031.8 376.874 1041.53 401.113 1050.95 424.262C1053.2 429.794 1055.49 435.313 1057.88 440.823C1071.99 471.474 1094.38 499.241 1134.34 519.612C1202.23 554.224 1295.55 565.279 1379.58 572.377C1408.5 574.587 1437.97 575.997 1466.95 573.294C1503.73 570.036 1535.76 558.282 1547.85 535.217C1558.92 514.085 1554.69 490.468 1552.04 468.708C1549.42 446.78 1543.03 419.531 1561.87 399.568C1585.09 374.491 1600.53 347.545 1614.89 320.051C1626.7 297.462 1638.51 274.936 1658.52 254.62C1423.6 258.964 1188.73 264.769 954.24 274.974C934.892 275.811 915.551 276.628 896.203 277.44C872.047 278.455 847.892 279.478 823.744 280.551C691.757 286.378 559.477 288.71 427.237 290.996C390.192 291.636 353.147 292.275 316.109 293.021C203.909 295.26 91.683 296.43 -20.5566 297.247C-105.139 297.862 -191.38 296.363 -275.423 303.469C-307.627 306.218 -339.785 310.634 -370.991 316.33C-389.813 319.765 -433.323 325.381 -440.2 339.55C-441.818 346.48 -427.99 350.02 -420.273 352.415C-367.662 367.2 -301.668 368.328 -245.043 368.993C-228.364 369.128 -209.949 370.096 -193.623 367.377C-192.085 367.553 -191.32 367.642 -189.788 367.823C-207.458 370.862 -227.386 369.873 -245.475 369.734C-303.333 369.048 -370.838 367.861 -424.607 352.765C-432.564 350.289 -446.772 346.644 -445.087 339.504C-438.096 325.099 -393.967 319.382 -374.826 315.884C-343.154 310.095 -310.517 305.608 -277.833 302.817C-193.084 295.652 -106.151 297.117 -20.8629 296.502C91.237 295.685 203.317 294.519 315.377 292.288C352.435 291.543 389.5 290.903 426.571 290.263C558.518 287.986 690.505 285.658 822.206 279.848C846.395 278.775 870.589 277.748 894.784 276.737C914.112 275.925 933.44 275.108 952.762 274.271C1187.95 264.037 1423.53 258.227 1659.15 253.87C1706 209.1 1791.88 198.041 1871.31 194.488C1925.14 192.287 1979.46 198.673 2031.37 207.147C2106.71 219.448 2179.61 237.28 2251.1 256.535C2259.41 258.796 2267.7 261.077 2275.99 263.372C2435.17 277.6 2591.33 301.65 2746.3 328.323C2872.93 350.256 2998.82 375.371 3119.38 408.463C3199.21 430.375 3282.3 455.566 3347.06 493.125C3360.95 501.338 3373.83 509.993 3386.17 519.141C3411.62 538.804 3437.55 563.448 3437.22 589.952H3437.34H3437.33ZM2280.62 264.63C2431.6 307.031 2577.44 356.419 2721.93 406.944C2797.23 433.296 2872.13 460.087 2947.03 486.894C3040.95 520.521 3134.62 554.582 3230.42 586.058C3262.74 596.679 3295.35 607.161 3329.02 616.006C3346.72 620.658 3368.1 627.153 3387.84 626.353C3414.58 624.951 3430.5 609.872 3432.25 593.976C3435.82 566.218 3408.01 539.697 3381.59 519.271C3369.26 510.14 3356.41 501.494 3342.54 493.293C3277.9 455.806 3194.95 430.669 3115.27 408.796C2994.92 375.762 2869.24 350.689 2742.83 328.795C2590.52 302.572 2437.06 278.872 2280.68 264.618C2280.66 264.618 2280.65 264.622 2280.62 264.626L2280.62 264.63ZM1664.26 253.786C1694.13 253.243 1723.99 252.713 1753.86 252.199C1760.58 252.081 1767.31 251.968 1774.03 251.85C1893.81 249.762 2013.67 247.741 2133.28 253.487C2178.22 255.79 2223 258.85 2267.68 262.648C2196.21 242.938 2123.47 224.588 2048.35 211.188C1991.77 201.098 1931.89 192.813 1872.74 195.221C1794.49 198.732 1710.45 209.799 1664.26 253.799V253.79V253.786Z" fill="url(#paint4_linear_1779_1730)" style=""/>\n<path d="M3465.18 585.035C3465.18 587.447 3464.94 589.8 3464.51 592.099C3460.96 610.032 3440.79 623.566 3411.91 625.099C3391.51 626.059 3369.77 620.19 3351.23 615.593C3318.21 607.405 3286.27 597.445 3254.65 587.317C3154.64 555.272 3057.1 520.117 2959.22 485.577C2888.05 460.453 2816.85 435.359 2745.33 410.636C2593.64 358.242 2440.55 306.761 2281.44 263.852C2262.91 258.901 2244.31 254.077 2225.62 249.379C2213.34 248.646 2201.05 247.968 2188.74 247.345C2074.76 242.016 1960.64 245.131 1846.62 248.339C1834.03 248.697 1821.46 249.042 1808.87 249.387C1802.32 249.568 1795.76 249.749 1789.21 249.926C1763.92 250.616 1738.64 251.311 1713.35 252.014C1686.16 272.7 1672.24 298.969 1658.16 323.932C1643.03 350.731 1626.8 376.949 1603.02 401.231C1584.01 420.322 1589.02 446.666 1590.77 467.997C1592.54 489.252 1595.71 512.308 1583.88 532.7C1570.67 555.449 1537.82 566.71 1501.24 569.926C1470.84 572.73 1439.88 571.299 1409.54 568.962C1324.47 561.785 1231.16 550.574 1161.42 516.619C1120.36 496.636 1095.65 469.302 1079 438.777C1076.23 433.427 1073.54 428.064 1070.89 422.688C1059.82 400.052 1048.08 376.785 1021.99 359.071C985.499 334.293 930.771 325.962 879.571 321.891C616.988 302.943 353.067 318.313 91.5766 336.553C24.338 341.239 -43.0337 346.492 -110.632 348.559C-111.005 348.269 -111.191 348.121 -111.564 347.831C-44.312 345.777 22.7069 340.548 89.5992 335.88C352.482 317.555 617.761 302.173 881.742 321.23C933.194 325.301 988.948 333.202 1026.01 357.947C1052.78 375.825 1064.48 399.636 1075.72 422.633C1078.36 428.005 1081.06 433.364 1083.83 438.714C1100.38 469.087 1124.93 496.337 1165.75 516.249C1234.93 549.993 1327.38 561.183 1411.83 568.314C1440.62 570.537 1469.91 571.943 1498.76 569.295C1534.71 566.146 1566.73 554.793 1579.39 532.41C1590.91 512.056 1587.79 489.176 1586.02 468.01C1584.25 446.633 1579.21 420.238 1598.33 401.122C1622.11 376.861 1638.27 350.651 1653.38 323.874C1667.45 298.994 1681.33 272.827 1708.34 252.161C1473.03 258.682 1237.78 266.024 1002.95 277.731C981.052 278.826 959.147 279.87 937.236 280.909C914.998 281.966 892.76 283.031 870.529 284.142C727.81 291.189 584.617 293.063 441.545 294.936C410.252 295.349 378.967 295.757 347.681 296.241C224.562 298.102 101.477 298.005 -21.655 297.007C-92.4622 296.435 -164.728 294.115 -235.189 299.815C-267.999 302.526 -300.743 307.262 -332.355 313.4C-352.289 317.273 -393.954 323.339 -402.003 337.812C-404.034 344.35 -392.25 348.846 -384.367 351.253C-358.82 359.635 -328.593 362.906 -300.456 365.596C-270.296 368.48 -239.649 370.222 -209.129 370.294C-198.976 370.248 -187.158 370.82 -177.451 368.547C-175.72 368.677 -174.854 368.745 -173.117 368.879C-184.142 371.553 -197.678 370.984 -209.189 371.035C-240.482 370.959 -271.914 369.187 -302.847 366.232C-331.676 363.478 -362.628 360.144 -388.754 351.561C-396.597 349.035 -409.327 344.535 -406.824 337.749C-398.701 323.048 -356.33 316.881 -336.13 312.958C-304.025 306.723 -270.789 301.907 -237.472 299.154C-166.166 293.374 -93.0681 295.681 -21.402 296.262C101.484 297.26 224.323 297.352 347.195 295.496C378.501 295.02 409.813 294.604 441.125 294.191C583.832 292.322 726.651 290.449 868.998 283.435C891.269 282.324 913.547 281.259 935.824 280.202C957.709 279.167 979.593 278.114 1001.48 277.024C1237.14 265.275 1473.25 257.92 1709.4 251.378C1758.39 214.379 1838.01 205.627 1910.19 202.563C2018.55 198.184 2129.93 224.323 2229.04 248.785C2423.9 261.069 2612.93 292.116 2800.54 326.463C2924.7 349.309 3048.15 375.093 3166.24 408.619C3242.25 430.202 3322.39 454.846 3383.04 491.832C3396.21 500.045 3408.33 508.705 3419.92 517.819C3443.11 536.876 3465.77 560.122 3465.46 585.056C3465.36 585.052 3465.3 585.048 3465.2 585.043L3465.18 585.035ZM2233.1 249.833C2411.45 294.709 2581.51 352.234 2749.78 410.316C2821.3 435.039 2892.5 460.142 2963.67 485.257C3058.8 518.833 3153.68 552.843 3250.67 584.235C3283.44 594.839 3316.49 605.301 3350.59 614.107C3368.62 618.763 3390.28 625.221 3410.31 624.387C3437.68 622.775 3456.25 609.3 3459.95 592.524C3465.98 565.195 3440.01 538.556 3414.88 517.928C3403.34 508.848 3391.34 500.075 3378.06 491.98C3317.54 455.061 3237.54 430.463 3161.66 408.926C3043.77 375.455 2920.51 349.721 2796.55 326.913C2611.55 293.054 2425.17 262.323 2233.1 249.833ZM1714.28 251.223C1738.95 250.545 1763.61 249.867 1788.27 249.189C1794.83 249.008 1801.38 248.831 1807.94 248.65C1820.51 248.305 1833.06 247.956 1845.63 247.602C1960.44 244.378 2075.33 241.271 2190.11 246.638C2200.51 247.16 2210.89 247.724 2221.28 248.33C2124.57 224.554 2016.75 199.351 1911.1 203.278C1840.21 206.292 1762.43 215.027 1714.21 251.231C1714.24 251.231 1714.24 251.227 1714.27 251.223H1714.28Z" fill="url(#paint5_linear_1779_1730)" style=""/>\n<path d="M3493.34 580.084C3493.34 583.562 3492.83 586.938 3491.9 590.188C3486.6 608.635 3463.83 621.546 3434.37 623.12C3415.71 624.021 3396.12 619.256 3378.97 615.244C3346.66 607.683 3315.46 598.174 3284.62 588.525C3179.9 555.773 3077.88 519.524 2975.55 483.939C2908.18 460.516 2840.8 437.102 2773.16 414.007C2582.09 348.883 2387.7 282.147 2181.25 238.4C2092.52 236.985 2003.94 240.408 1915.42 243.834C1898.04 244.504 1880.66 245.177 1863.27 245.83C1831.03 247.025 1798.8 248.208 1766.56 249.395C1730.94 270.347 1713.49 299.68 1696.39 327.721C1680.55 353.804 1663.49 379.273 1639.22 402.738C1619.96 420.983 1623.71 446.481 1624.61 467.243C1625.53 487.9 1627.62 510.212 1615.36 529.821C1601.57 551.884 1568.71 562.74 1532.92 565.856C1502.63 568.617 1471.81 567.194 1441.59 564.862C1356.12 557.617 1263.62 546.255 1192.64 513.167C1150.72 493.63 1123.89 466.818 1104.74 436.647C1101.62 431.457 1098.58 426.249 1095.58 421.029C1082.67 398.583 1069.02 375.708 1041.95 358.389C1004.08 334.154 949.442 325.705 897.696 321.545C637.284 302.534 375.547 316.923 116.013 334.297C50.2862 338.696 -15.5609 343.63 -81.621 345.528C-81.9672 345.238 -82.1403 345.09 -82.4865 344.8C-16.7793 342.914 48.7216 337.993 114.096 333.619C374.994 316.157 638.083 301.764 899.86 320.885C951.865 325.044 1007.45 333.076 1045.88 357.273C1073.63 374.752 1087.3 398.154 1100.4 420.962C1103.41 426.178 1106.44 431.381 1109.56 436.567C1128.61 466.595 1155.27 493.297 1196.92 512.792C1267.27 545.708 1359.09 557.019 1443.89 564.21C1472.54 566.437 1501.71 567.847 1530.44 565.22C1565.81 562.151 1597.38 551.24 1610.78 529.501C1622.81 509.984 1620.71 487.774 1619.8 467.248C1618.9 446.426 1615.15 420.899 1634.47 402.608C1658.73 379.126 1675.69 353.712 1691.64 327.645C1708.66 299.71 1726.06 270.549 1761.37 249.585C1759.15 249.669 1758.04 249.711 1755.81 249.795C1520.83 258.392 1285.88 267.32 1051.41 280.442C1027.63 281.764 1003.85 283.031 980.068 284.29C959.069 285.397 938.07 286.517 917.078 287.674C765.057 295.95 612.357 297.243 459.87 298.619C432.912 298.864 405.954 299.104 379.002 299.394C250.045 300.75 121.253 299.205 -7.598 295.963C-69.7499 294.397 -133.22 291.345 -195.206 296.115C-227.63 298.632 -260.054 303.726 -291.14 309.977C-312.831 314.338 -354.284 320.864 -364.004 336.027C-366.841 342.417 -356.308 347.321 -348.658 350.054C-323.651 359.664 -292.738 363.596 -264.248 366.678C-237.29 369.595 -209.593 371.658 -182.209 371.485C-175.551 371.468 -167.362 371.713 -161.297 369.679C-159.439 369.763 -158.514 369.806 -156.656 369.886C-164.1 372.47 -173.834 372.066 -182.023 372.222C-211.657 372.411 -241.558 370.201 -270.687 366.871C-298.497 363.689 -328.731 359.715 -353.179 350.319C-361.035 347.528 -371.788 342.506 -368.898 335.96C-359.45 321.28 -319.929 314.709 -298.89 310.306C-266.046 303.431 -231.798 298.161 -197.443 295.454C-134.452 290.608 -70.0229 293.648 -6.86564 295.235C121.613 298.476 250.038 300.013 378.623 298.657C405.601 298.367 432.579 298.123 459.557 297.883C611.584 296.515 763.832 295.222 915.4 286.984C936.412 285.826 957.431 284.706 978.45 283.599C1002.21 282.345 1025.97 281.078 1049.73 279.752C1284.39 266.617 1519.52 257.676 1754.68 249.075C1757.42 248.97 1760.08 248.878 1762.8 248.781C1812.79 220.033 1883.66 213.217 1948.61 210.62C2028.58 207.808 2108.97 222.083 2184.16 237.722C2205.21 238.151 2226.22 238.837 2247.22 239.801C2455.61 250.119 2655.31 285.923 2854.23 324.585C2976.13 348.353 3097.52 374.634 3213.32 408.686C3285.5 429.916 3361.99 454.164 3418.49 490.51C3430.9 498.736 3442.42 507.341 3453.13 516.476C3474.2 534.965 3493.42 556.62 3493.48 580.093C3493.43 580.084 3493.4 580.08 3493.36 580.072L3493.34 580.084ZM2187.94 238.53C2232.61 248.099 2276.54 258.897 2320.04 270.406C2476.89 312.335 2627.84 362.636 2777.61 413.704C2845.26 436.807 2912.66 460.2 2980.02 483.636C3076.4 517.158 3172.53 551.126 3270.77 582.425C3303.67 592.907 3336.84 603.234 3371.03 611.943C3389.65 616.688 3412.1 623.31 3432.76 622.421C3460.64 620.767 3481.44 608.104 3487.12 590.958C3495.97 564.269 3471.93 537.352 3448.23 516.585C3437.5 507.48 3426.04 498.871 3413.63 490.666C3357.22 454.391 3280.87 430.185 3208.81 408.994C3093.2 374.996 2972.01 348.757 2850.31 325.023C2652.16 286.538 2453.22 250.776 2245.64 240.492C2226.44 239.612 2207.23 238.964 2187.99 238.534C2187.96 238.534 2187.95 238.53 2187.93 238.526L2187.94 238.53ZM1767.98 248.57C1799.36 247.421 1830.73 246.268 1862.09 245.101C1879.46 244.453 1896.82 243.784 1914.18 243.106C2001.82 239.713 2089.51 236.333 2177.35 237.575C2104.76 222.546 2026.79 208.536 1949.57 211.314C1886.23 213.857 1816.75 220.529 1767.92 248.558C1767.95 248.558 1767.96 248.562 1767.98 248.566V248.57Z" fill="url(#paint6_linear_1779_1730)" style=""/>\n<path d="M3521.67 575.075C3521.77 579.398 3520.95 584.075 3519.32 588.281C3512.13 607.384 3487.32 619.508 3456.82 621.159C3437.62 622.097 3417.45 617.239 3399.77 613.152C3367.29 605.646 3335.9 596.241 3304.85 586.685C3198.74 554.035 3095.31 517.831 2991.57 482.301C2928.12 460.558 2864.63 438.857 2800.94 417.388C2688.28 379.48 2575.11 342.055 2459.3 308.1C2357.91 278.371 2253.73 250.065 2145.24 232.376C2090.42 233.82 2035.72 236.522 1981.02 239.204C1959.88 240.239 1938.73 241.275 1917.59 242.268C1886.99 243.7 1856.38 245.097 1825.77 246.482C1778.26 266.47 1755.78 299.356 1734.69 331.502C1717.95 356.861 1700.21 381.538 1675.42 404.22C1655.95 421.661 1658.42 446.224 1658.45 466.477C1658.49 486.499 1659.54 508.124 1646.79 526.899C1632.25 548.301 1599.88 558.733 1564.64 561.772C1534.45 564.5 1503.74 563.077 1473.63 560.741C1387.83 553.441 1295.93 541.953 1223.82 509.698C1181.02 490.553 1152.12 464.28 1130.46 434.496C1126.96 429.419 1123.52 424.33 1120.12 419.223C1105.4 397 1089.88 374.546 1061.82 357.623C1022.59 333.947 968.037 325.414 915.746 321.188C657.544 302.017 397.964 315.463 140.434 332.002C76.2052 336.124 11.8562 340.767 -52.6793 342.485C-52.9988 342.194 -53.1586 342.047 -53.4848 341.756C10.6978 340.039 74.6939 335.421 138.577 331.321C397.464 314.705 658.356 301.251 917.909 320.527C970.427 324.753 1025.96 332.878 1065.7 356.507C1094.41 373.578 1110 396.588 1124.95 419.152C1128.35 424.254 1131.78 429.343 1135.28 434.42C1156.82 464.069 1185.55 490.262 1228.11 509.332C1299.66 541.393 1390.7 552.848 1475.91 560.097C1504.45 562.324 1533.5 563.734 1562.12 561.145C1596.71 558.173 1628.25 547.653 1642.23 526.596C1654.66 507.867 1653.65 486.41 1653.57 466.49C1653.59 446.191 1651.1 421.598 1670.58 404.11C1695.38 381.45 1713.12 356.793 1729.81 331.438C1750.79 299.508 1773.11 266.845 1820.01 246.748C1796.52 247.813 1773.03 248.869 1749.53 249.934C1532.74 259.705 1315.97 269.77 1099.64 283.153C1074.18 284.723 1048.7 286.209 1023.22 287.691C1003.26 288.849 983.29 290.015 963.33 291.206C802.754 300.737 641.225 301.352 480.076 302.173C456.727 302.29 433.377 302.408 410.035 302.56C277.715 303.36 145.814 300.341 13.8403 294.536C-42.2329 292.073 -99.4713 288.314 -155.578 292.419C-188.508 294.894 -221.385 300.278 -252.77 306.942C-275.727 311.813 -315.209 318.784 -326.354 334.238C-329.843 340.477 -320.668 345.739 -313.238 348.841C-290.921 358.936 -261.938 363.529 -235.54 367.065C-210.912 370.361 -185.053 373.005 -159.786 372.672C-151.25 372.55 -146.357 371.915 -145.431 370.791C-143.5 370.829 -142.535 370.85 -140.604 370.888C-145.697 373.363 -153.088 373.384 -159.293 373.401C-185.525 373.75 -212.31 371.161 -237.91 367.781C-265.101 364.19 -294.849 359.454 -317.825 349.069C-325.409 345.886 -334.663 340.523 -331.128 334.162C-319.809 318.477 -279.662 311.413 -256.366 306.479C-224.474 299.722 -191.085 294.258 -157.628 291.745C-100.39 287.573 -42.0132 291.303 15.1918 293.816C146.646 299.596 278.034 302.61 409.835 301.815C433.204 301.663 456.574 301.545 479.943 301.427C640.553 300.619 801.548 300.009 961.585 290.52C981.566 289.316 1001.55 288.154 1021.54 286.992C1046.98 285.519 1072.41 284.033 1097.83 282.467C1314.3 269.072 1531.21 258.994 1748.14 249.219C1772.78 248.112 1797.41 246.996 1822.04 245.88C1870.29 225.817 1930.44 220.774 1986.8 218.656C2040.41 216.737 2094.28 223.38 2146.01 231.597C2198.66 230.376 2251.23 230.587 2303.8 232.931C2507.16 242.837 2700.63 280.084 2893.55 319.756C2899.25 320.923 2902.09 321.508 2907.78 322.678C3026.97 347.258 3145.72 374.154 3258.76 408.644C3327.37 429.583 3401.18 453.381 3453.77 489.172C3465.49 497.397 3476.21 506.015 3486.19 515.112C3505.06 532.852 3521.55 553.151 3521.6 575.062C3521.63 575.071 3521.63 575.075 3521.66 575.083L3521.67 575.075ZM2150.17 232.266C2258.83 250.128 2363.2 278.405 2464.82 308.192C2580.24 342.022 2693.04 379.311 2805.32 417.093C2869.01 438.563 2932.48 460.281 2995.95 482.007C3092.51 515.082 3188.85 548.541 3287.23 579.424C3321.65 590.23 3356.36 600.868 3392.1 609.855C3411.12 614.638 3434.09 621.373 3455.14 620.468C3483.48 618.776 3506.7 606.858 3514.29 589.417C3525.63 563.342 3503.86 536.261 3481.5 515.247C3471.51 506.175 3460.85 497.557 3449.13 489.344C3396.65 453.612 3322.96 429.861 3254.46 408.964C3141.59 374.529 3023.01 347.679 2903.99 323.133C2898.3 321.962 2895.46 321.381 2889.77 320.211C2697.67 280.711 2505 243.519 2302.51 233.651C2251.76 231.395 2201 231.151 2150.16 232.27L2150.17 232.266ZM1827.92 245.632C1857.35 244.289 1886.79 242.942 1916.22 241.565C1937.35 240.572 1958.46 239.541 1979.58 238.505C2033.43 235.857 2087.29 233.209 2141.26 231.727C2091.29 223.868 2039.73 217.747 1988 219.38C1933.21 221.447 1875.02 226.394 1827.91 245.624V245.632H1827.92Z" fill="url(#paint7_linear_1779_1730)" style=""/>\n<path d="M3550.38 569.985C3550.4 575.513 3549.28 581.053 3546.8 586.357C3537.71 605.806 3510.56 617.458 3479.34 619.176C3459.48 620.144 3438.58 615.05 3420.27 610.853C3386.74 603.171 3354.27 593.585 3322.14 583.848C3215.58 551.555 3111.6 515.802 3007.36 480.651C2947.91 460.605 2888.46 440.571 2828.83 420.756C2702.89 378.949 2576.3 337.639 2446.1 301.347C2338.54 271.37 2225.85 242.066 2108.98 230.721C2087.69 231.921 2066.4 233.18 2045.12 234.447C2020.78 235.891 1996.45 237.33 1972.1 238.703C1947.56 240.075 1923.02 241.422 1898.47 242.757C1832.07 259.916 1801.13 295.963 1773.23 335.299C1755.72 359.934 1737.15 383.841 1711.86 405.723C1692.22 422.351 1693.41 446.031 1692.55 465.728C1691.75 485.147 1691.71 506.023 1678.58 524.015C1663.46 544.715 1631.17 554.755 1596.69 557.697C1566.62 560.387 1536.04 558.969 1506.04 556.628C1419.62 549.248 1327.96 537.693 1254.52 506.166C1210.95 487.463 1180.3 461.729 1156.57 432.353C1152.37 427.121 1148.32 421.838 1144.26 416.559C1127.62 394.799 1110.16 372.946 1081.25 356.566C1040.86 333.686 986.669 325.12 934.198 320.834C678.193 301.592 420.803 314.056 165.258 329.712C102.52 333.556 39.6692 337.883 -23.3416 339.449C-23.6412 339.159 -23.7877 339.012 -24.0873 338.721C38.5707 337.172 101.075 332.853 163.46 329.03C420.331 313.286 679.018 300.825 936.355 320.173C989.079 324.459 1044.1 332.634 1084.97 355.476C1114.55 372.007 1132.11 394.361 1149.02 416.47C1153.08 421.749 1157.13 427.032 1161.33 432.265C1184.92 461.493 1215.39 487.13 1258.7 505.787C1331.5 537.15 1422.54 548.659 1508.28 555.984C1536.72 558.211 1565.65 559.625 1594.17 557.07C1628.18 554.182 1659.29 544.083 1673.98 523.704C1686.87 505.8 1686.86 485.021 1687.66 465.736C1688.52 445.984 1687.35 422.275 1707.03 405.596C1732.32 383.731 1750.84 359.824 1768.41 335.219C1795.95 296.409 1826.45 260.614 1891.48 243.14C1846.73 245.565 1801.97 247.943 1757.21 250.326C1554.13 261.119 1351.07 272.162 1148.42 285.868C1121.55 287.674 1094.67 289.383 1067.79 291.076C1048.59 292.288 1029.38 293.505 1010.18 294.755C841.492 305.57 671.435 305.431 502.057 305.637C481.923 305.662 461.796 305.688 441.663 305.73C307.392 305.97 173.927 301.52 40.3949 292.894C-11.0044 289.577 -63.6155 285.06 -115.288 288.735C-149.19 291.156 -182.986 296.974 -215.03 304.256C-238.36 309.561 -276.217 317.075 -288.108 332.474C-292.103 338.561 -284.44 344.122 -277.282 347.654C-257.888 358.061 -231.416 363.398 -207.254 367.431C-185.17 371.119 -161.587 374.268 -138.617 373.906C-132.186 373.775 -128.903 373.114 -128.903 371.931H-124.076C-124.076 373.493 -129.03 374.457 -137.998 374.634C-161.96 375.085 -186.594 371.936 -209.664 368.16C-234.645 364.076 -261.956 358.595 -281.983 347.852C-289.253 344.236 -297.03 338.578 -292.935 332.386C-280.898 316.772 -242.348 309.156 -218.706 303.797C-186.135 296.414 -151.78 290.52 -117.332 288.062C-64.3678 284.298 -10.4518 288.815 42.2458 292.212C175.132 300.804 307.964 305.233 441.596 304.993C461.73 304.947 481.857 304.917 501.99 304.896C670.743 304.694 840.187 304.85 1008.26 294.073C1027.48 292.823 1046.7 291.61 1065.93 290.398C1092.77 288.706 1119.61 287.005 1146.43 285.199C1349.21 271.488 1552.39 260.433 1755.59 249.635C1802.13 247.164 1848.66 244.689 1895.19 242.167C1936.54 231.677 1981.34 228.267 2025.51 226.722C2053.86 226.061 2081.84 227.408 2109.91 229.9C2193.51 225.299 2277.04 222.458 2360.89 226.091C2557.56 235.516 2743.45 273.256 2928.78 313.644C2939.77 316.035 2950.77 318.43 2961.77 320.809C3078.46 346.223 3194.9 373.603 3305.38 408.598C3370.45 429.209 3440.85 452.699 3489.52 487.871C3500.54 496.101 3510.44 504.739 3519.7 513.79C3536.4 530.709 3550.35 549.653 3550.4 569.998V569.977L3550.38 569.985ZM2115.04 230.401C2230.37 241.894 2341.43 270.448 2447.67 300.055C2578.85 336.608 2706.3 378.343 2833.16 420.461C2892.8 440.272 2952.25 460.306 3011.69 480.357C3109.61 513.382 3207.34 546.798 3307.08 577.597C3341.67 588.277 3376.54 598.771 3412.38 607.675C3432.12 612.575 3455.82 619.424 3477.61 618.49C3507.97 616.675 3533.54 605.061 3542.32 586.252C3554.02 561.2 3535.5 534.805 3514.85 513.895C3505.65 504.836 3495.74 496.227 3484.72 488.014C3436.15 452.905 3365.87 429.461 3300.91 408.888C3190.59 373.944 3074.3 346.602 2957.78 321.226C2946.79 318.83 2935.8 316.443 2924.81 314.052C2740.31 273.866 2555.23 236.181 2359.44 226.785C2277.8 223.253 2196.45 225.952 2115.04 230.384V230.405L2115.04 230.401ZM1902.38 241.772C1925.04 240.538 1947.71 239.288 1970.37 238.017C1994.69 236.644 2019 235.205 2043.32 233.765C2063.43 232.569 2083.54 231.378 2103.65 230.237C2078.03 228.035 2052.3 226.684 2026.43 227.438C1984.42 228.915 1941.88 232.127 1902.37 241.767L1902.38 241.772Z" fill="url(#paint8_linear_1779_1730)" style=""/>\n<path d="M3579.28 564.828C3578.86 571.703 3577.34 577.874 3574.14 584.454C3563.08 604.202 3533.73 615.446 3501.68 617.227C3481.8 618.207 3460.84 613.274 3442.45 609.157C3408.13 601.478 3374.9 591.842 3342 582.038C3233.92 549.829 3128.41 514.127 3022.64 479.031C2967.32 460.68 2912.01 442.343 2856.56 424.157C2712.3 376.937 2567.27 329.877 2416.77 291C2354.77 274.982 2291.62 260.29 2226.79 249.488C2174.25 240.732 2119.37 233.954 2064.78 235.508C2003.37 237.486 1936.69 243.266 1887.35 268.579C1851.53 286.963 1831.19 313.438 1811.46 339.15C1793.14 363.053 1773.75 386.215 1747.91 407.268C1728.13 423.092 1728.02 445.888 1726.26 465.033C1724.57 483.825 1723.51 503.998 1709.92 521.17C1694.09 541.17 1662.25 550.814 1628.3 553.677C1598.3 556.325 1567.82 554.906 1537.9 552.561C1451.17 545.123 1359.9 533.449 1285.41 502.74C1240.92 484.394 1208.28 459.169 1182.12 430.261C1177.5 425.146 1173.02 419.977 1168.57 414.795C1150.08 393.329 1130.77 371.881 1100.86 355.863C1059.24 333.568 1005.08 324.892 952.124 320.531C698.316 301.208 443.11 312.688 189.563 327.469C128.316 331.034 66.9698 335.071 5.48365 336.456C5.21067 336.166 5.07754 336.018 4.80456 335.728C65.9445 334.335 126.938 330.327 187.831 326.774C442.691 311.918 699.175 300.451 954.294 319.874C1007.5 324.244 1062.44 332.537 1104.52 354.79C1135.1 370.959 1154.56 392.887 1173.33 414.702C1177.78 419.88 1182.26 425.049 1186.88 430.168C1212.91 458.946 1245.36 484.082 1289.61 502.373C1363.52 532.915 1454.09 544.546 1540.2 551.934C1568.55 554.169 1597.39 555.584 1625.83 553.058C1659.18 550.01 1690.01 540.719 1705.37 520.879C1718.63 503.75 1719.69 483.729 1721.37 465.05C1723.15 445.85 1723.27 423.025 1743.09 407.15C1768.9 386.114 1788.28 362.969 1806.57 339.092C1826.46 313.193 1846.98 286.571 1883.2 268.133C1933.47 242.542 2001.44 236.813 2063.79 234.805C2118.54 233.247 2173.53 239.839 2226.29 248.499C2292.19 259.309 2356.36 274.153 2419.36 290.368C2570.48 329.27 2716.05 376.478 2860.83 423.871C2916.3 442.052 2971.63 460.407 3026.97 478.753C3126.32 511.727 3225.48 545.098 3326.65 575.812C3362.15 586.588 3397.93 597.197 3434.74 606.1C3454.48 610.878 3478.23 617.606 3499.93 616.566C3530.77 614.84 3558.66 603.238 3569.24 584.425C3583.32 560.257 3567.16 533.63 3548.08 512.594C3539.6 503.573 3530.49 494.96 3520.17 486.738C3475.42 452.24 3408.42 429.066 3346.87 408.808C3239.22 373.375 3125.34 345.549 3011.43 319.386C2995.87 315.816 2980.33 312.234 2964.77 308.66C2786.25 267.501 2607.15 229.008 2416.29 219.999C2312.98 215.625 2210.44 222.516 2107.84 229.66C2080.69 231.55 2053.54 233.428 2026.37 235.209C1941.13 240.757 1855.85 245.943 1770.56 251.138C1579.16 262.803 1387.8 274.675 1196.78 288.647C1168.63 290.697 1140.44 292.625 1112.26 294.536C1093.72 295.795 1075.17 297.058 1056.63 298.354C880.025 310.495 701.652 309.518 524.251 309.076C507.133 309.03 490.009 308.992 472.891 308.963C337.509 308.647 203.398 302.854 69.3334 291.164C21.6758 287.009 -27.1869 281.835 -75.3904 285.106C-108.407 287.359 -141.417 293.433 -172.53 300.585C-197.957 306.433 -236.466 314.473 -250.195 330.752C-254.942 336.721 -248.377 342.514 -241.719 346.501C-224.828 357.391 -200.387 363.533 -177.843 368.075C-159.154 371.839 -138.461 375.489 -118.647 375.181C-113.88 375.059 -111.843 374.352 -112.768 373.093C-110.837 373.064 -109.872 373.047 -107.941 373.018C-106.396 375.278 -113.507 375.804 -117.841 375.91C-139.42 376.318 -161.771 372.597 -182.131 368.467C-204.801 363.866 -229.442 357.635 -246.42 346.673C-253.257 342.602 -259.469 336.663 -255.022 330.66C-241.42 314.473 -203.602 306.315 -178.349 300.413C-145.998 292.856 -111.69 286.752 -77.3146 284.424C-27.613 281.061 22.6012 286.243 71.7435 290.524C205.029 302.143 338.354 307.914 472.951 308.226C490.069 308.255 507.187 308.293 524.304 308.34C700.999 308.782 878.68 309.784 1054.58 297.685C1073.14 296.388 1091.71 295.121 1110.27 293.867C1138.41 291.96 1166.55 290.032 1194.67 287.99C1385.78 274.014 1577.25 262.13 1768.75 250.46C1853.99 245.266 1939.23 240.084 2024.42 234.539C2051.56 232.759 2078.67 230.894 2105.79 228.999C2209.53 221.776 2313.19 214.876 2417.65 219.3C2609.44 228.343 2789.4 266.878 2968.8 308.26C2984.34 311.846 2999.89 315.425 3015.45 318.99C3129.52 345.191 3243.54 373.055 3351.33 408.543C3412.99 428.842 3480.07 452.063 3524.94 486.612C3535.29 494.846 3544.38 503.48 3552.91 512.502C3567.45 528.52 3579.17 546.099 3579.21 564.879C3579.24 564.858 3579.24 564.845 3579.27 564.82L3579.28 564.828Z" fill="url(#paint9_linear_1779_1730)" style=""/>\n<path d="M3608.42 559.684C3608.47 591.051 3572.5 612.546 3524.21 615.257C3503.7 616.284 3482.1 611.253 3463.09 607.06C3428.55 599.441 3395.06 589.91 3361.89 580.198C3252.19 548.082 3145.06 512.418 3037.67 477.368C2986.63 460.702 2935.57 444.056 2884.41 427.533C2742.9 381.866 2600.76 336.423 2453.5 298.54C2387.8 281.806 2320.96 266.369 2252.13 255.571C2203.66 247.968 2153.36 242.268 2103.23 243.561C2042.57 245.358 1977 250.827 1927.52 275.096C1891.74 292.65 1870.5 318.106 1849.89 342.977C1830.73 366.135 1810.55 388.53 1784.18 408.766C1764.23 423.825 1762.88 445.656 1760.24 464.292C1757.66 482.474 1755.5 501.894 1741.56 518.29C1725.04 537.718 1693.55 546.596 1660.24 549.606C1630.32 552.216 1599.94 550.798 1570.1 548.453C1483.05 540.96 1392.16 529.177 1316.66 499.271C1271.17 481.253 1236.59 456.542 1208 428.114C1202.99 423.096 1198.08 418.04 1193.21 412.972C1172.85 391.818 1151.7 370.791 1120.78 355.114C1077.95 333.392 1023.79 324.619 970.327 320.161C924.234 316.608 878.008 314.002 831.662 312.213C736.746 313.37 641.824 312.916 546.908 312.343C532.673 312.259 518.445 312.179 504.211 312.099C502.167 312.091 500.063 312.078 498.019 312.061C403.23 315.004 308.667 319.942 214.131 325.153C154.389 328.445 94.5339 332.221 34.5658 333.413C34.3194 333.118 34.1929 332.971 33.9466 332.676C93.5818 331.485 153.11 327.721 212.519 324.45C301.29 319.546 390.087 314.89 479.084 311.897C351.551 310.491 225.809 303.309 100.28 289.236C55.5383 284.231 10.1444 278.636 -35.4758 281.372C-68.3794 283.498 -101.316 289.804 -132.169 297.113C-159.127 303.494 -197.018 312.124 -212.258 328.934C-217.324 334.735 -212.178 340.797 -206.066 345.259C-183.988 363.129 -137.855 374.331 -102.921 376.293C-101.19 376.39 -98.8994 376.453 -97.5412 376.272C-96.6091 376.15 -94.5718 375.687 -96.5492 374.154C-94.645 374.095 -93.6929 374.07 -91.7821 374.011C-89.9911 375.421 -90.85 376.364 -94.3787 376.827C-96.1098 377.055 -99.2656 377.274 -104.525 376.987C-140.611 374.95 -188.023 363.878 -210.826 345.398C-218.157 340.03 -220.32 335.539 -217.078 328.837C-202.151 312.381 -164.966 303.709 -138.634 297.298C-106.33 289.43 -71.8282 282.909 -37.2668 280.695C9.98463 277.883 56.7833 283.465 103.129 288.655C233.838 303.301 364.807 310.327 497.593 311.324C609.073 308.007 720.7 307.43 832.161 311.476C921.963 310.268 1011.8 307.729 1101.08 301.2C1119.02 299.866 1136.96 298.556 1154.9 297.247C1184.31 295.109 1213.71 292.962 1243.08 290.667C1422.91 276.561 1603.04 264.045 1783.19 251.702C1881.71 244.958 1980.24 238.227 2078.66 230.944C2108.3 228.73 2137.9 226.394 2167.51 224.032C2269.6 215.895 2371.54 208.153 2474.59 212.396C2662.79 221.123 2837.98 260.669 3012.61 303.267C3031.52 307.877 3050.43 312.486 3069.36 317.058C3180.71 344 3292.22 372.34 3397.2 408.303C3455.59 428.308 3519.44 451.297 3560.59 485.244C3570.21 493.504 3578.45 502.15 3586.32 511.117C3598.83 526.205 3608.38 542.441 3608.4 559.697V559.676L3608.42 559.684ZM846.209 312.019C888.461 313.812 930.592 316.267 972.624 319.517C1026.29 323.97 1081.23 332.369 1124.48 354.045C1156.06 369.869 1177.42 391.393 1198.1 412.875C1202.98 417.939 1207.84 423.008 1212.89 428.009C1241.32 456.307 1275.71 480.929 1320.94 498.884C1395.86 528.625 1486.07 540.362 1572.5 547.805C1600.78 550.04 1629.54 551.454 1657.91 548.966C1690.67 545.999 1721.12 537.087 1737.13 517.958C1750.81 501.62 1752.92 482.352 1755.48 464.28C1758.17 445.593 1759.55 423.724 1779.55 408.623C1805.88 388.4 1826.05 366.017 1845.2 342.889C1865.96 317.824 1887.41 292.208 1923.58 274.607C1974.03 250.069 2040.9 244.66 2102.54 242.837C2220.72 239.781 2340.76 268.449 2448.58 295.782C2599.25 333.981 2744.39 380.616 2888.87 427.226C2940.03 443.749 2991.09 460.398 3042.15 477.06C3143.02 509.993 3243.7 543.325 3346.39 573.964C3382.1 584.618 3418.1 595.088 3455.07 603.899C3475.52 608.774 3500.17 615.665 3522.61 614.57C3554.66 612.777 3584.24 601.722 3596.91 582.48C3612.45 558.796 3599.45 532.746 3581.64 511.222C3573.8 502.268 3565.56 493.638 3555.97 485.387C3514.89 451.495 3451.12 428.552 3392.82 408.581C3287.97 372.668 3176.61 344.366 3065.4 317.454C3046.47 312.882 3027.57 308.272 3008.66 303.663C2834.95 261.292 2660.64 221.797 2473.44 213.112C2371.55 208.902 2270.86 216.644 2169.93 224.693C2140.28 227.063 2110.63 229.399 2080.96 231.614C1982.5 238.901 1883.94 245.628 1785.39 252.38C1605.29 264.719 1425.22 277.222 1245.45 291.324C1216.03 293.618 1186.59 295.77 1157.15 297.912C1139.22 299.213 1121.3 300.518 1103.38 301.853C1018.02 308.1 932.15 310.706 846.283 312.015H846.223L846.209 312.019ZM519.564 311.442C528.765 311.501 537.96 311.548 547.161 311.602C636.797 312.141 726.439 312.583 816.075 311.661C717.285 308.453 618.381 308.824 519.564 311.442Z" fill="url(#paint10_linear_1779_1730)" style=""/>\n<path d="M3638.07 554.388C3638.11 588.117 3597.97 610.382 3546.67 613.291C3525.53 614.364 3503.27 609.245 3483.62 604.981C3448.84 597.428 3415.06 587.986 3381.6 578.367C3270.21 546.344 3161.37 510.709 3052.28 475.705C3005.62 460.744 2958.98 445.774 2912.24 430.926C2770.08 385.765 2627.33 340.569 2479.36 303.414C2374.06 276.973 2256.96 248.962 2141.7 251.635C2081.77 253.256 2017.36 258.413 1967.76 281.638C1932.02 298.367 1909.86 322.813 1888.39 346.837C1868.35 369.233 1847.34 390.863 1820.5 410.303C1800.41 424.561 1797.83 445.534 1794.2 463.598C1790.73 481.173 1787.53 499.826 1773.19 515.436C1756.01 534.14 1724.91 542.648 1692.16 545.573C1662.32 548.158 1632.02 546.731 1602.26 544.374C1514.86 536.817 1424.41 524.921 1347.87 495.836C1301.38 478.168 1264.86 453.911 1233.9 426.014C1228.48 421.113 1223.15 416.167 1217.88 411.2C1195.67 390.383 1172.7 369.764 1140.75 354.411C1096.76 333.265 1042.51 324.396 988.565 319.857C967.679 318.228 946.766 316.776 925.821 315.479C807.143 317.723 688.418 316.751 569.72 315.618C558.375 315.509 547.03 315.404 535.685 315.298C503.887 314.978 472.095 314.41 440.336 313.4C373.111 316.001 305.986 319.378 238.867 322.872C180.597 325.903 122.22 329.384 63.7564 330.424C63.5366 330.129 63.4235 329.982 63.1971 329.687C121.334 328.652 179.378 325.187 237.316 322.173C301.405 318.839 365.508 315.601 429.69 313.05C329.362 309.472 230.764 300.998 132.686 287.329C90.5945 281.478 48.0436 275.281 4.66042 277.718C-29.1886 279.777 -62.9843 286.483 -94.4431 294.397C-121.987 301.326 -157.773 310.478 -174.165 327.195C-177.994 333.728 -176.649 338.296 -170.264 344.097C-153.333 361.31 -112.14 375.632 -80.3616 377.627C-80.1152 377.636 -79.1831 377.686 -78.9368 377.636C-78.8169 377.627 -76.5865 377.278 -80.1152 375.291C-78.2576 375.211 -77.3322 375.173 -75.4746 375.093C-72.5651 376.726 -72.6317 377.741 -75.661 378.174C-76.5931 378.309 -78.6305 378.494 -81.9728 378.318C-114.91 376.343 -157.507 362.123 -175.097 344.202C-181.536 338.346 -182.787 333.678 -178.999 327.081C-162.427 310.137 -125.922 300.897 -98.0251 293.917C-65.9937 285.898 -31.5788 279.12 2.85615 277.02C48.2167 274.835 91.8263 280.648 135.889 286.773C236.277 300.758 337.032 309.291 439.764 312.646C601.865 306.551 764.512 305.233 926.36 314.705C1000.28 313.181 1074.13 310.44 1147.56 304.761C1164.87 303.398 1182.17 302.055 1199.48 300.716C1230.14 298.346 1260.8 295.959 1291.42 293.408C1459.03 279.39 1626.86 266.533 1794.72 253.79C1907.45 245.236 2020.18 236.733 2132.75 227.417C2164.6 224.756 2196.42 221.931 2228.23 219.081C2329.01 210.039 2429.42 201.46 2531.42 205.564C2716.99 214.03 2888.27 254.746 3058.97 298.75C3080.3 304.248 3101.64 309.742 3123.01 315.18C3231.23 342.746 3339.58 371.637 3441.34 407.933C3496.71 427.685 3558.32 450.506 3596 483.931C3604.88 492.194 3612.48 500.799 3619.43 509.774C3629.93 523.738 3638.06 538.737 3637.87 554.393H3638.01L3638.07 554.388ZM935.555 315.248C953.997 316.427 972.413 317.727 990.809 319.163C1045.38 323.747 1100.43 332.638 1145.02 353.977C1177.21 369.38 1200.33 390.109 1222.66 411.048C1227.93 416.016 1233.26 420.958 1238.68 425.862C1269.51 453.629 1305.83 477.801 1352.09 495.415C1428.05 524.335 1517.83 536.194 1604.61 543.7C1632.83 545.927 1661.5 547.358 1689.81 544.912C1721.93 542.062 1752.16 533.479 1768.77 515.095C1782.81 499.549 1785.95 481.005 1789.38 463.56C1792.96 445.425 1795.61 424.448 1815.74 410.13C1842.58 390.715 1863.59 369.115 1883.55 346.72C1905.2 322.51 1927.55 297.895 1963.67 281.12C2014.25 257.634 2079.98 252.532 2140.9 250.898C2260.93 248.107 2382.61 277.516 2492.11 305.111C2637.04 342.013 2777.02 386.266 2916.51 430.606C2963.24 445.479 3009.9 460.432 3056.55 475.393C3159.04 508.284 3261.32 541.574 3365.62 572.132C3402.32 582.884 3439.3 593.45 3477.29 602.278C3497.82 607.052 3522.43 613.72 3544.88 612.609C3577.88 610.735 3609.57 600.005 3624.19 580.556C3641.46 557.609 3631.06 531.677 3614.72 509.875C3607.69 500.934 3600.15 492.325 3591.26 484.07C3553.67 450.691 3492.13 427.916 3436.86 408.202C3335.22 371.957 3227 343.103 3118.91 315.572C3097.54 310.133 3076.2 304.639 3054.87 299.133C2885.11 255.365 2714.71 214.699 2530.15 206.275C2429.44 202.226 2330.23 210.792 2230.73 219.717C2198.88 222.58 2167.02 225.404 2135.13 228.065C2022.5 237.389 1909.7 245.897 1796.91 254.456C1629.1 267.186 1461.31 280.042 1293.75 294.056C1263.08 296.611 1232.38 298.99 1201.67 301.373C1184.39 302.707 1167.1 304.054 1149.82 305.418C1078.69 310.933 1007.15 313.69 935.541 315.269V315.248H935.555ZM451.122 312.962C479.392 313.737 507.662 314.238 535.958 314.524C547.303 314.629 558.648 314.734 569.993 314.844C685.389 315.951 800.804 316.894 916.187 314.882C761.469 306.201 606.059 307.334 451.122 312.962Z" fill="url(#paint11_linear_1779_1730)" style=""/>\n<path d="M3668.07 549.076C3668.11 585.321 3623.57 608.214 3569.13 611.325C3546.22 612.495 3521.84 606.702 3500.59 602.072C3462.88 593.85 3426.2 583.705 3389.86 573.349C3280.59 542.21 3173.63 507.816 3066.4 474.004C3024.32 460.735 2982.25 447.475 2940.1 434.302C2806.99 392.652 2673.72 350.752 2535.84 315.702C2472.35 299.562 2407.73 284.757 2341.45 273.866C2289.05 265.258 2234.52 258.564 2180.14 259.675C2120.98 261.111 2057.64 265.973 2007.96 288.142C1972.28 304.063 1949.25 327.515 1926.89 350.672C1905.99 372.34 1884.17 393.136 1856.78 411.793C1836.63 425.256 1832.64 445.365 1828.18 462.865C1823.83 479.813 1819.58 497.743 1804.91 512.565C1787.14 530.502 1756.3 538.695 1724.18 541.507C1694.37 544.058 1664.11 542.618 1634.4 540.261C1546.7 532.645 1456.57 520.643 1379.08 492.367C1331.51 475.01 1293.07 451.221 1259.73 423.871C1253.9 419.084 1248.18 414.235 1242.47 409.381C1218.42 388.926 1193.65 368.703 1160.65 353.657C1115.53 333.084 1061.13 324.126 1006.72 319.504C1003.87 319.268 1000.97 319.041 998.058 318.822C862.875 322.03 727.599 320.552 592.396 318.792C583.94 318.683 575.485 318.573 567.029 318.46C516.755 317.769 466.521 316.325 416.426 313.556C365.406 315.622 314.44 318.06 263.467 320.539C206.674 323.309 149.782 326.496 92.8102 327.384C92.6104 327.09 92.5106 326.942 92.3175 326.648C148.957 325.768 205.523 322.585 261.982 319.832C310.831 317.449 359.681 315.117 408.57 313.101C326.218 308.159 245.797 298.859 165.954 285.329C125.84 278.552 86.4652 272.225 44.6133 274.014C11.024 275.946 -22.6186 283.086 -53.6513 291.122C-82.4269 298.573 -118.42 308.277 -136.183 325.402C-141.616 331.135 -139.346 337.323 -134.639 342.88C-121.316 359.589 -89.0116 374.613 -60.0162 378.781C-60.0162 378.545 -60.509 377.846 -63.7913 376.368C-61.9604 376.276 -61.0416 376.225 -59.2107 376.133C-53.7645 378.583 -54.8164 379.185 -56.614 379.45C-57.666 379.602 -59.0908 379.648 -60.5755 379.564C-90.2766 377.013 -126.736 359.82 -139.406 342.952C-144.206 337.336 -146.47 331.072 -140.95 325.275C-122.927 307.881 -86.688 298.017 -57.4197 290.491C-25.6546 282.324 8.68043 275.272 43.0088 273.302C86.7448 271.408 127.658 277.739 169.61 284.816C250.95 298.586 332.882 307.906 416.806 312.747C610.758 305.073 805.663 303.36 998.937 318.014C1064.19 316.342 1129.37 313.581 1194.15 308.289C1210.88 306.896 1227.6 305.523 1244.34 304.159C1276.24 301.549 1308.14 298.927 1340 296.115C1493.04 282.551 1646.26 269.749 1799.48 257.028C1928.77 246.301 2058.09 235.668 2187.15 223.859C2220.96 220.732 2254.73 217.419 2288.49 214.047C2388.15 204.124 2487.37 194.737 2588.54 198.694C2772.29 206.928 2940.35 248.983 3107.8 294.557C3130.86 300.83 3153.93 307.094 3177.04 313.282C3294.19 344.678 3413.17 377.231 3520.69 420.701C3561.85 437.338 3604.52 456.378 3631.78 482.6C3639.98 490.881 3646.76 499.494 3653 508.423C3661.63 521.3 3668.27 534.935 3668.09 549.059V549.08L3668.07 549.076ZM1006.15 318.595C1007.15 318.67 1008.07 318.746 1009.06 318.83C1064.1 323.499 1119.24 332.482 1164.94 353.249C1198.18 368.349 1223.1 388.652 1247.28 409.238C1252.98 414.096 1258.7 418.941 1264.55 423.728C1297.77 450.96 1335.99 474.64 1383.32 491.958C1460.21 520.096 1549.71 532.043 1636.79 539.612C1664.95 541.852 1693.55 543.283 1721.81 540.858C1753.37 538.097 1783.19 529.875 1800.42 512.22C1814.83 497.452 1819.02 479.666 1823.36 462.832C1827.83 445.273 1831.81 425.125 1852.05 411.625C1879.42 392.984 1901.2 372.201 1922.1 350.559C1944.65 327.199 1967.91 303.608 2004.01 287.636C2054.71 265.207 2119.3 260.395 2179.5 258.943C2292.95 256.615 2407.38 282.719 2511.48 308.352C2659.45 344.796 2802.19 389.482 2944.42 433.97C2986.55 447.163 3028.63 460.428 3070.72 473.68C3174.92 506.537 3278.92 539.793 3384.92 570.293C3421.9 580.931 3459.16 591.366 3497.38 600.114C3518.72 604.997 3544.14 611.8 3567.39 610.626C3602.4 608.786 3636.45 597.887 3652.61 577.466C3669.73 555.836 3663.47 529.787 3648.14 508.519C3641.91 499.591 3635.13 490.999 3626.92 482.731C3585.34 442.806 3508.78 416.617 3444.34 394.268C3356.63 363.845 3264.8 338.313 3172.75 313.665C3149.63 307.468 3126.57 301.2 3103.51 294.932C2937.02 249.631 2769.86 207.614 2587.15 199.418C2487.33 195.52 2389.39 204.886 2291.07 214.674C2257.25 218.046 2223.43 221.371 2189.54 224.495C2060.43 236.312 1931.04 246.945 1801.69 257.684C1648.49 270.406 1495.29 283.199 1342.26 296.763C1310.36 299.575 1278.42 302.202 1246.48 304.816C1229.77 306.184 1213.06 307.552 1196.36 308.946C1133.21 314.107 1069.69 316.877 1006.09 318.599C1006.11 318.595 1006.12 318.59 1006.15 318.586L1006.15 318.595ZM424.889 313.206C472.34 315.728 519.911 317.054 567.515 317.706C575.971 317.816 584.426 317.925 592.882 318.039C725.468 319.761 858.114 321.213 990.681 318.237C802.8 304.34 613.395 305.885 424.882 313.219V313.21L424.889 313.206Z" fill="url(#paint12_linear_1779_1730)" style=""/>\n<path d="M3697.96 542.791C3698 581.448 3649.48 606.016 3591.6 609.359C3568.29 610.567 3543.43 604.804 3521.75 600.177C3483.37 591.989 3446.01 581.857 3408.99 571.505C3297.86 540.433 3189.03 506.069 3079.94 472.282C3042.62 460.735 3005.31 449.179 2967.95 437.674C2834.94 396.743 2701.85 355.396 2564.19 320.998C2456.18 294.01 2336.66 265.641 2218.63 267.733C2160.23 268.992 2097.98 273.576 2048.24 294.675C2012.61 309.788 1988.66 332.251 1965.42 354.529C1943.66 375.434 1921 395.447 1893.1 413.296C1872.86 426.026 1867.75 445.222 1862.22 462.15C1856.95 478.483 1851.66 495.638 1836.62 509.69C1818.24 526.882 1787.82 534.716 1756.22 537.444C1726.44 539.949 1696.24 538.509 1666.57 536.139C1578.58 528.465 1488.69 516.375 1410.31 488.881C1361.63 471.807 1321.31 448.51 1285.6 421.72C1279.37 417.026 1273.23 412.286 1267.1 407.541C1243.46 389.208 1219.32 370.955 1189.11 356.76C1150.26 338.506 1104.8 328.428 1057.71 322.434C910.198 326.425 762.525 324.29 614.992 321.886C608.38 321.777 605.078 321.722 598.467 321.613C534.764 320.51 471.067 318.119 407.83 312.991C367.949 314.587 328.081 316.376 288.22 318.182C232.899 320.695 177.491 323.604 122.017 324.337C121.844 324.042 121.758 323.895 121.585 323.6C176.746 322.876 231.847 319.971 286.855 317.475C325.105 315.736 363.361 314.027 401.631 312.474C332.855 306.538 266.149 296.683 200.102 283.3C161.905 275.58 125.213 268.777 84.6997 270.313C51.2502 272.132 17.6875 279.566 -13.0522 287.737C-43.1062 295.727 -78.9593 306.058 -98.0875 323.608C-104.519 328.98 -102.222 335.896 -98.8332 341.651C-90.098 357.075 -68.4597 369.262 -46.6083 377.391C-45.1236 377.299 -44.3779 377.257 -42.8931 377.164C-34.7238 380.313 -35.9622 380.519 -37.0741 380.688C-38.186 380.726 -38.7452 380.747 -39.8571 380.784C-66.7352 376.92 -94.5788 357.227 -103.654 341.697C-107.122 335.88 -109.373 328.9 -102.848 323.474C-83.3934 305.641 -47.2741 295.151 -16.6808 287.085C14.7846 278.788 49.0264 271.433 83.215 269.594C125.713 267.969 163.903 274.729 203.997 282.837C270.483 296.127 338.427 306.13 407.51 312.225C614.046 304.092 821.621 302.017 1027.32 318.464C1037.97 319.378 1048.56 320.426 1059.13 321.63C1119.84 319.849 1180.44 317.012 1240.67 311.838C1256.8 310.428 1272.93 309.034 1289.06 307.641C1322.19 304.782 1355.3 301.916 1388.37 298.843C1522.62 286.289 1656.96 274.174 1791.31 262.1C1941.41 248.608 2091.59 235.339 2241.33 220.311C2276.91 216.715 2312.44 212.88 2347.96 209.003C2446.69 198.21 2544.91 188.022 2645.46 191.836C2828.09 199.872 2993.51 243.426 3158.27 290.693C3182.46 297.634 3206.66 304.559 3230.93 311.396C3321.64 336.945 3412.29 363.222 3498.41 394.605C3558.78 416.609 3630.11 442.549 3667.47 481.283C3674.78 489.336 3680.61 497.696 3686.03 506.322C3686.23 506.629 3686.33 506.781 3686.54 507.088C3693.33 518.606 3698.15 530.41 3698.16 542.782C3698.09 542.782 3698.05 542.786 3697.98 542.791H3697.96ZM1063.94 322.261C1110.69 328.42 1155.8 338.595 1194.31 356.831C1224.3 371.031 1248.32 389.153 1271.85 407.402C1277.98 412.147 1284.13 416.887 1290.35 421.585C1325.87 448.249 1366.01 471.487 1414.44 488.49C1492.31 515.827 1581.55 527.876 1668.98 535.499C1697.12 537.743 1725.68 539.175 1753.94 536.796C1784.9 534.123 1814.44 526.251 1832.24 509.353C1846.99 495.36 1852.19 478.319 1857.38 462.116C1862.92 445.117 1868.08 425.896 1888.39 413.123C1916.26 395.287 1938.89 375.287 1960.66 354.411C1984.11 331.914 2008.25 309.337 2044.33 294.157C2095.11 272.789 2158.6 268.263 2218.07 266.988C2337.33 264.87 2457.89 293.147 2567.1 320.354C2705.3 354.785 2838.87 396.268 2972.34 437.338C3009.7 448.834 3047.01 460.39 3084.33 471.946C3190.35 504.769 3296.18 538.008 3404 568.436C3442.04 579.175 3480.39 589.704 3519.7 598.468C3541.26 603.276 3566.61 609.78 3589.99 608.651C3625.94 606.732 3661.86 596.283 3680.28 575.887C3699.32 554.801 3695.31 528.958 3681.61 507.155C3681.42 506.848 3681.32 506.697 3681.13 506.389C3675.76 497.768 3669.9 489.433 3662.63 481.388C3625.37 442.709 3554.1 416.815 3493.84 394.853C3407.81 363.504 3317.25 337.265 3226.63 311.745C3202.37 304.917 3178.18 297.988 3154 291.042C2990.25 244.049 2825.72 200.55 2644.19 192.543C2545.04 188.788 2448.12 198.955 2350.77 209.597C2315.22 213.487 2279.66 217.317 2244.04 220.921C2094.24 235.966 1943.99 249.24 1793.83 262.732C1659.5 274.805 1525.17 286.912 1390.95 299.466C1357.81 302.547 1324.64 305.418 1291.45 308.277C1275.34 309.666 1259.23 311.063 1243.13 312.474C1183.73 317.576 1123.98 320.43 1064.12 322.236C1064.04 322.244 1064 322.249 1063.93 322.257L1063.94 322.261ZM413.502 312.772C475.115 317.87 536.934 319.883 599.006 320.885C605.617 320.99 608.92 321.045 615.524 321.15C761.16 323.52 906.929 325.633 1052.56 321.828C1043.4 320.775 1034.2 319.887 1024.96 319.133C822.04 302.918 617.262 304.833 413.502 312.772Z" fill="url(#paint13_linear_1779_1730)" style=""/>\n<path d="M3728.59 537.373C3728.63 578.754 3675.25 603.835 3614.05 607.38C3590.62 608.609 3565.71 603.023 3543.83 598.485C3504.39 590.301 3465.98 580.089 3427.93 569.653C3314.81 538.636 3203.97 504.28 3092.87 470.514C3060.51 460.685 3028.16 450.851 2995.78 441.05C2864.52 401.345 2733.18 361.251 2597.51 327.852C2490.85 301.596 2373.29 274.052 2257.04 275.786C2199.36 276.864 2138.28 281.17 2088.5 301.221C2052.9 315.563 2028.11 337.003 2003.97 358.401C1981.33 378.532 1957.82 397.758 1929.41 414.807C1909.15 426.754 1902.62 445.096 1896.32 461.446C1890.16 477.149 1883.85 493.554 1868.5 506.835C1849.54 523.253 1819.44 530.751 1788.41 533.39C1758.65 535.861 1728.51 534.426 1698.87 532.039C1610.59 524.306 1520.94 512.119 1441.65 485.425C1391.82 468.649 1349.59 445.786 1311.58 419.598C1304.94 415.013 1298.38 410.383 1291.85 405.731C1268.89 389.427 1245.62 373.186 1218.03 359.934C1184.52 343.84 1146.34 333.349 1105.91 326.366C949.818 330.786 793.536 327.986 637.448 324.93C634.451 324.871 632.953 324.837 629.964 324.779C555.961 323.242 481.851 319.908 408.82 311.943C376.862 313.168 344.917 314.49 312.973 315.837C259.11 318.094 205.16 320.733 151.165 321.31C151.018 321.015 150.945 320.868 150.792 320.573C204.475 320.005 258.118 317.374 311.668 315.13C342.334 313.846 373.001 312.57 403.674 311.387C345.63 304.702 289.856 294.485 234.755 281.28C198.396 272.591 164.021 265.359 124.679 266.638C90.2842 268.39 55.9492 276.346 24.6702 285.144C-5.5036 293.631 -40.2248 304.446 -60.0854 321.844C-66.5969 327.132 -65.6781 334.048 -63.3012 340.119C-63.2546 340.253 -63.228 340.325 -63.1813 340.46C-57.5021 356.785 -38.2474 369.654 -18.9992 380.267C-16.9353 381.37 -16.669 381.963 -18.1936 382.043C-19.7183 382.123 -22.4813 381.487 -26.4828 380.132C-28.3403 379.492 -29.2658 379.172 -31.1234 378.532C-29.7385 378.44 -29.0461 378.389 -27.6612 378.296C-45.4046 368.046 -62.722 355.787 -68.0683 340.485C-68.1149 340.35 -68.1415 340.279 -68.1881 340.144C-70.6383 334.019 -71.5837 327.039 -64.9723 321.701C-44.8387 304.029 -9.7913 293.029 20.8952 284.466C52.9399 275.529 88.0339 267.678 123.194 265.91C164.44 264.47 200.606 271.74 238.717 280.863C294.483 294.241 350.956 304.484 409.739 311.131C621.568 303.103 834.416 301.048 1045.33 318.127C1066.23 319.937 1086.97 322.223 1107.39 325.557C1167.45 323.705 1227.4 320.746 1286.96 315.395C1302.46 313.972 1317.98 312.562 1333.49 311.16C1367.87 308.049 1402.25 304.926 1436.57 301.575C1544.73 290.949 1652.92 280.518 1761.12 270.099C1939.32 252.94 2117.66 236.164 2295.3 216.774C2332.41 212.704 2369.45 208.359 2406.48 203.947C2504.52 192.287 2601.95 181.308 2702.13 184.995C2792.73 188.902 2881.21 200.937 2966.79 220.071C3050.28 238.736 3130.22 263.056 3210 287.177C3234.81 294.666 3259.61 302.16 3284.51 309.523C3373.41 335.846 3462.42 362.737 3546.46 394.937C3602.92 416.567 3669.76 442.318 3702.79 479.978C3709.24 487.904 3714.23 496.012 3718.82 504.423C3719.12 504.958 3719.26 505.223 3719.55 505.758C3724.81 516.072 3728.53 526.482 3728.54 537.377H3728.6L3728.59 537.373ZM1111.34 326.214C1151.58 333.307 1189.6 343.844 1222.95 359.917C1250.41 373.148 1273.61 389.343 1296.47 405.588C1303 410.24 1309.56 414.866 1316.21 419.446C1354.06 445.534 1396.07 468.291 1445.67 485.029C1524.39 511.597 1613.45 523.725 1701.13 531.408C1729.26 533.664 1757.79 535.087 1786.04 532.759C1816.48 530.17 1845.58 522.66 1863.99 506.503C1879.08 493.268 1885.31 477.001 1891.41 461.421C1897.78 445.008 1904.31 426.615 1924.7 414.639C1953.08 397.602 1976.56 378.389 1999.2 358.292C2023.56 336.709 2048.63 315.088 2084.63 300.707C2135.45 280.404 2197.88 276.156 2256.61 275.062C2372.53 273.328 2489.12 299.697 2595.67 325.776C2733.56 359.53 2866.87 400.414 3000.16 440.731C3032.54 450.531 3064.91 460.352 3097.25 470.194C3205.23 503.005 3313.02 536.232 3422.79 566.605C3461.19 577.234 3499.88 587.649 3539.52 596.325C3561.94 601.234 3588.18 607.889 3612.44 606.702C3649.54 604.69 3687.01 594.646 3707.75 574.3C3728.6 553.858 3727.13 528.103 3714.96 505.829C3714.66 505.299 3714.51 505.038 3714.21 504.508C3709.58 496.126 3704.58 488.018 3698.19 480.1C3665.19 442.507 3598.44 416.803 3542.06 395.207C3458.11 363.049 3369.2 336.183 3280.39 309.893C3255.51 302.513 3230.71 295.029 3205.91 287.535C3044.42 238.724 2882.08 193.575 2701.12 185.736C2602.33 182.078 2506.35 193.061 2409.68 204.558C2372.59 208.97 2335.48 213.322 2298.3 217.406C2120.58 236.8 1942.16 253.588 1763.89 270.76C1655.69 281.183 1547.49 291.61 1439.34 302.236C1404.97 305.591 1370.55 308.727 1336.13 311.838C1320.62 313.24 1305.11 314.65 1289.6 316.073C1230.5 321.385 1171 324.362 1111.39 326.243C1111.37 326.231 1111.36 326.227 1111.33 326.214H1111.34ZM414.986 311.716C486.166 319.331 558.344 322.564 630.437 324.063C633.433 324.122 634.931 324.151 637.927 324.214C792.484 327.237 947.242 330.02 1101.81 325.747C1082.47 322.661 1062.85 320.518 1043.1 318.809C834.676 301.941 624.325 303.856 414.986 311.728V311.72V311.716Z" fill="url(#paint14_linear_1779_1730)" style=""/>\n<path d="M3759.59 531.871C3760.15 575.993 3700.56 601.562 3636.52 605.414C3612.31 606.774 3586.37 600.973 3563.75 596.363C3523.92 588.243 3485.09 578.127 3446.6 567.784C3331.35 536.817 3218.37 502.47 3105.13 468.717C3077.95 460.617 3050.77 452.514 3023.57 444.439C3021.5 443.821 3020.45 443.509 3018.37 442.89C2888.49 404.304 2758.59 365.188 2624.43 332.819C2520.85 307.83 2407.85 282.488 2295.41 283.848C2238.45 284.753 2178.49 288.786 2128.68 307.78C2093.12 321.348 2067.47 341.79 2042.46 362.295C2018.88 381.622 1994.53 400.069 1965.6 416.327C1945.26 427.546 1937.55 444.991 1930.22 460.765C1923.13 475.84 1915.82 491.458 1900.16 503.994C1880.61 519.658 1850.99 526.802 1820.45 529.353C1790.69 531.787 1760.55 530.338 1730.91 527.947C1642.37 520.155 1552.92 507.888 1472.78 481.973C1421.74 465.467 1377.63 443.063 1337.33 417.468C1330.29 412.98 1323.31 408.455 1316.35 403.913C1266.82 371.59 1216.38 344.985 1147.86 330.386C985.708 334.928 823.361 331.649 661.26 327.957C579.221 325.983 496.795 321.748 416.48 310.525C390.182 311.476 363.883 312.465 337.59 313.476C285.166 315.488 232.655 317.854 180.117 318.279C180.017 317.984 179.97 317.837 179.87 317.542C232.095 317.13 284.3 314.76 336.419 312.76C361.686 311.796 386.946 310.836 412.219 309.923C362.871 302.657 315.945 292.221 269.719 279.221C235.138 269.522 203.027 261.818 164.59 262.934C130.362 264.567 96.0868 272.877 65.134 281.793C33.8084 290.819 -1.07261 302.261 -22.2116 320.06C-28.2237 326.054 -32.8111 332.2 -27.5912 339.209C-20.8401 347.477 -13.5895 355.547 -6.05941 363.542C-4.27508 365.449 15.5456 382.7 3.65451 383.251C-3.08999 383.331 -8.91565 381.361 -14.9078 379.631C-13.1767 379.501 -12.3112 379.433 -10.5735 379.303C-2.59064 381.791 0.871505 382.372 2.1698 382.506C5.97149 377.77 -7.25784 367.52 -10.8864 363.647C-18.4232 355.644 -25.687 347.57 -32.4848 339.306C-37.7645 332.221 -33.1106 325.999 -27.0386 319.937C-5.5867 301.865 29.6139 290.238 61.4788 281.141C93.1972 272.082 128.178 263.889 163.172 262.235C203.539 260.993 237.502 268.689 273.867 278.884C320.553 292.014 367.977 302.501 417.852 309.729C632.99 302.156 849.353 300.265 1063.47 317.803C1092.67 320.363 1121.6 323.907 1149.72 329.582C1211.16 327.696 1272.5 324.669 1333.37 318.957C1348.15 317.538 1362.94 316.136 1377.73 314.73C1413.46 311.345 1449.18 307.957 1484.84 304.303C1554.14 297.184 1623.44 290.091 1692.75 283.014C1911.84 260.619 2131.21 238.892 2349.43 213.221C2387.91 208.671 2426.29 203.813 2464.66 198.879C2562.23 186.343 2658.89 174.534 2758.94 178.138C2849.37 181.96 2937.54 194.324 3022.51 214.211C3105.41 233.613 3184.42 258.897 3263.28 283.987C3288.23 291.913 3313.17 299.832 3338.21 307.637C3422.08 333.724 3506.15 360.178 3585.37 391.641C3640.9 413.692 3707.86 440.263 3738.25 478.66C3743.9 486.452 3748.12 494.371 3751.91 502.584C3752.26 503.316 3752.43 503.683 3752.78 504.419C3756.64 513.432 3759.39 522.491 3759.41 531.871H3759.59ZM1153.11 330.243C1221.32 344.951 1271.68 371.506 1321.04 403.748C1327.99 408.291 1334.98 412.808 1342.02 417.295C1382.17 442.76 1426.02 465.096 1476.82 481.556C1556.42 507.341 1645.28 519.553 1733.26 527.299C1761.39 529.568 1789.91 530.999 1818.16 528.701C1848.04 526.272 1876.86 519.006 1895.79 503.645C1911.16 491.163 1918.39 475.65 1925.4 460.714C1932.74 444.873 1940.49 427.399 1960.9 416.133C1989.83 399.901 2014.13 381.466 2037.7 362.165C2062.97 341.462 2088.89 320.868 2124.89 307.245C2175.74 288.007 2237.02 284.02 2295.05 283.111C2408.62 281.73 2522.61 306.984 2627.32 332.179C2761.99 364.581 2892.32 403.828 3022.64 442.553C3024.72 443.172 3025.76 443.484 3027.84 444.103C3055.03 452.189 3082.22 460.281 3109.39 468.38C3219.45 501.182 3329.32 534.409 3441.15 564.74C3480.35 575.374 3519.85 585.78 3560.27 594.435C3583.22 599.348 3609.98 605.966 3634.72 604.728C3672.87 602.64 3711.61 592.583 3734.42 572.402C3756.78 552.625 3758.7 527.248 3748.08 504.47C3747.73 503.737 3747.56 503.371 3747.21 502.634C3743.38 494.442 3739.19 486.524 3733.53 478.748C3703.18 440.411 3636.28 413.89 3580.83 391.873C3501.68 360.447 3417.7 334.027 3333.93 307.961C3308.9 300.156 3283.94 292.238 3259 284.311C3180.46 259.318 3101.76 234.097 3019.19 214.758C2934.92 195.019 2847.51 182.659 2757.8 178.862C2659.26 175.313 2563.94 187.109 2467.85 199.452C2429.44 204.394 2391 209.264 2352.46 213.819C2134.16 239.49 1914.7 261.233 1695.52 283.637C1626.24 290.718 1556.95 297.803 1487.68 304.926C1451.96 308.58 1416.18 311.981 1380.39 315.361C1365.6 316.763 1350.82 318.169 1336.03 319.575C1275.36 325.267 1214.23 328.323 1153 330.23C1153.05 330.23 1153.08 330.234 1153.12 330.239L1153.11 330.243ZM422.293 310.335C500.963 321.171 581.624 325.305 661.939 327.237C822.722 330.9 983.744 334.154 1144.57 329.742C1117.4 324.337 1089.47 320.927 1061.29 318.456C849.24 301.086 635.294 302.825 422.233 310.335H422.293Z" fill="url(#paint15_linear_1779_1730)" style=""/>\n<path d="M3790.66 525.417C3791.23 572.275 3726.56 599.352 3658.92 603.453C3635.91 604.711 3611.62 599.71 3589.95 595.496C3551.89 588.1 3514.76 578.737 3477.96 569.169C3355.89 537.432 3236.29 501.839 3116.51 466.848C3094.79 460.499 3073.07 454.16 3051.35 447.82C3044.97 445.959 3041.78 445.029 3035.39 443.168C2909.75 406.527 2784.1 369.393 2654.42 338.725C2553.13 314.768 2443.34 290.899 2333.78 291.905C2277.57 292.638 2218.66 296.409 2168.9 314.343C2133.37 327.144 2106.84 346.623 2080.95 366.202C2056.45 384.725 2031.27 402.389 2001.81 417.843C1981.34 428.392 1972.67 444.894 1964.19 460.087C1956.19 474.522 1947.88 489.37 1931.93 501.165C1911.58 516.211 1882.76 522.534 1852.57 525.32C1822.78 527.703 1792.63 526.259 1762.97 523.847C1674.18 515.996 1584.84 503.67 1503.91 478.517C1451.61 462.263 1405.67 440.301 1363.08 415.346C1355.65 410.951 1348.25 406.531 1340.87 402.102C1294.47 374.158 1247.15 349.536 1186.85 334.554C1022.1 339.041 857.179 335.417 692.522 331.152C604.177 328.744 514.848 323.735 429.3 308.853C406.942 309.586 384.585 310.352 362.228 311.131C311.234 312.895 260.168 315.004 209.088 315.282C209.015 314.987 208.975 314.84 208.902 314.545C259.695 314.275 310.475 312.175 361.182 310.415C382.694 309.666 404.206 308.929 425.718 308.222C383.6 300.51 343.978 289.96 305.122 277.205C272.252 266.457 242.291 258.345 204.574 259.284C170.519 260.8 136.33 269.48 105.724 278.51C73.2861 288.078 38.2054 300.148 15.7881 318.317C9.40981 324.353 4.06348 330.622 8.05159 338.043C11.3673 343.524 14.8294 348.968 18.3847 354.385C20.968 358.385 42.5996 384.485 23.8309 384.51C15.868 384.763 8.59089 382.641 1.43359 380.738C3.14469 380.599 3.99688 380.528 5.70132 380.389C17.892 383.895 21.9734 383.82 22.4061 383.803C35.2227 381.256 16.5404 359.092 13.5577 354.449C10.0489 349.014 6.54024 343.579 3.22458 338.094C-0.830106 330.588 4.54283 324.265 11.021 318.165C33.7712 299.71 69.2114 287.451 102.215 277.807C133.607 268.634 168.501 260.088 203.336 258.556C242.957 257.503 274.949 265.506 309.517 276.885C348.719 289.75 388.693 300.341 431.231 308.041C648.093 301.027 866.068 299.592 1081.8 317.475C1118.38 320.712 1154.56 325.536 1189.22 333.745C1253.05 331.834 1316.8 328.698 1379.98 322.535C1394.02 321.133 1408.06 319.744 1422.11 318.359C1459.24 314.692 1496.37 311.004 1533.43 307.06C1539.79 306.374 1542.97 306.033 1549.33 305.351C1834.45 274.78 2120.15 245.489 2403.79 209.715C2443.45 204.684 2483 199.313 2522.52 193.861C2619.73 180.449 2715.95 167.828 2816 171.327C2906.49 175.086 2994.55 187.824 3079.1 208.502C3161.66 228.692 3239.94 255.053 3318.07 281.191C3342.72 289.451 3367.41 297.685 3392.19 305.797C3473.01 332.242 3554.03 359.041 3630.09 390.753C3682.76 412.715 3747.25 439.535 3773.97 477.389C3778.89 485.076 3782.36 492.851 3785.41 500.9C3785.76 501.784 3785.93 502.226 3786.28 503.11C3789.01 510.397 3790.76 517.941 3790.67 525.447V525.417H3790.66ZM1192.04 334.402C1252.12 349.456 1299.33 374.036 1345.62 401.913C1353 406.346 1360.38 410.77 1367.83 415.157C1410.23 440.011 1455.95 461.897 1507.99 478.096C1588.39 503.123 1677.14 515.402 1765.38 523.203C1793.52 525.485 1822.06 526.933 1850.34 524.668C1879.73 522.323 1908.06 515.39 1927.54 500.803C1943.23 489.062 1951.45 474.333 1959.36 460.028C1967.85 444.759 1976.6 428.232 1997.17 417.64C2026.59 402.203 2051.79 384.577 2076.24 366.063C2102.41 346.273 2129.21 326.673 2165.2 313.808C2216.05 295.635 2276.21 291.913 2333.53 291.177C2444.19 290.158 2554.98 313.96 2657.36 338.107C2787.54 368.808 2913.65 406.064 3039.72 442.84C3046.11 444.7 3049.29 445.631 3055.68 447.491C3077.4 453.823 3099.12 460.171 3120.83 466.519C3233.15 499.334 3345.28 532.578 3459.38 562.875C3499.81 573.614 3540.55 584.122 3582.23 592.798C3605.41 597.622 3632.28 604.042 3657.19 602.775C3696.54 600.594 3736.86 590.878 3761.95 570.823C3785.91 551.682 3790.32 526.364 3781.42 503.139C3781.08 502.255 3780.9 501.813 3780.56 500.925C3777.51 492.885 3774.05 485.126 3769.11 477.452C3742.41 439.649 3678.02 412.913 3625.4 390.959C3549.45 359.273 3468.5 332.512 3387.77 306.096C3363 297.975 3338.31 289.745 3313.65 281.482C3235.85 255.449 3157.89 229.159 3075.67 209.033C2991.85 188.511 2904.6 175.768 2814.86 172.034C2716.35 168.594 2621.48 181.198 2525.78 194.4C2486.21 199.856 2446.63 205.244 2406.92 210.283C2123.18 246.061 1837.37 275.374 1552.15 305.957C1545.79 306.643 1542.61 306.984 1536.25 307.666C1499.13 311.619 1461.94 315.307 1424.75 318.982C1410.73 320.367 1396.7 321.756 1382.68 323.149C1319.53 329.317 1255.82 332.478 1192.03 334.419V334.389L1192.04 334.402ZM434.919 308.672C518.996 323.128 606.674 328.045 693.44 330.415C856.88 334.655 1020.59 338.258 1184.12 333.876C1150.34 325.94 1115.1 321.272 1079.49 318.106C865.748 300.388 649.791 301.768 434.926 308.664V308.672H434.919Z" fill="url(#paint16_linear_1779_1730)" style=""/>\n<path d="M3822.4 519.671C3822.98 569.59 3752.75 597.117 3681.45 601.487C3658.49 602.754 3634.32 597.993 3612.61 593.918C3573.11 586.504 3534.57 576.995 3496.37 567.27C3371.71 535.546 3249.49 499.923 3127.09 464.899C3102.5 457.864 3077.92 450.826 3053.33 443.791C2931.78 409.015 2810.21 373.788 2684.87 344.741C2585.94 321.815 2478.93 299.133 2372.26 299.967C2316.78 300.527 2258.96 304.033 2209.25 320.923C2173.74 332.983 2146.38 351.472 2119.61 370.13C2094.21 387.857 2068.14 404.708 2038.14 419.371C2017.66 429.188 2007.63 444.848 1998.28 459.434C1989.38 473.209 1980.08 487.294 1963.88 498.357C1943.06 512.578 1914.59 518.606 1884.92 521.3C1855.1 523.641 1824.94 522.188 1795.26 519.759C1706.21 511.849 1616.96 499.473 1535.25 475.069C1481.69 459.072 1433.91 437.573 1389.11 413.237C1381.25 408.947 1373.44 404.632 1365.66 400.296C1322.2 376.103 1278.1 353.83 1224.76 338.898C1057.92 343.263 890.822 339.138 724.127 334.33C630.849 331.493 535.468 325.873 446.431 306.955C426.69 307.536 406.949 308.138 387.215 308.752C337.633 310.28 287.992 312.086 238.343 312.259V311.522C287.666 311.35 336.974 309.548 386.23 308.032C405.245 307.447 424.26 306.866 443.282 306.302C407.196 298.236 373.653 287.649 340.936 275.163C309.85 263.279 281.787 254.839 244.655 255.605C210.706 257.007 176.604 265.868 146.257 275.016C112.661 285.144 77.5674 297.954 53.8917 316.549C46.9808 321.924 40.5891 329.687 43.8648 336.844C44.9168 339.424 45.9688 341.95 47.0207 344.396C50.1633 351.906 70.6032 385.238 44.1778 385.752C34.8633 386.085 26.3811 383.925 17.8789 381.829C19.5634 381.681 20.4022 381.605 22.0867 381.458C28.6115 383.209 35.6223 385.003 42.8129 385.032C64.2115 384.178 44.8103 350.643 42.1937 344.434C41.1417 341.984 40.0898 339.462 39.0378 336.882C35.7555 329.658 42.1538 321.832 49.1246 316.397C72.9201 297.563 108.394 285.098 142.063 274.7C173.588 265.447 208.396 256.245 243.543 254.868C282.625 253.988 312.593 262.323 345.39 274.868C378.353 287.439 412.156 298.064 448.541 306.13C665.81 299.832 884.018 298.998 1100.03 317.125C1143.52 321.011 1186.67 327.115 1227.19 338.064C1293.92 336.128 1360.55 332.777 1426.55 326.079C1439.78 324.707 1453.03 323.347 1466.27 321.988C1504.84 318.022 1543.42 314.048 1581.92 309.784C1874.45 277.15 2167.52 245.287 2458.1 206.17C2498.77 200.66 2539.3 194.791 2579.8 188.814C2676.8 174.526 2772.74 161.072 2872.98 164.473C2963.78 168.173 3051.91 181.358 3136.23 202.878C3218.66 223.91 3296.38 251.467 3373.92 278.741C3397.91 287.173 3421.91 295.589 3446 303.907C3524.65 330.963 3603.66 358.267 3677.24 390.648C3726.46 412.311 3787.02 439.194 3809.59 476.063C3813.82 483.64 3816.71 491.302 3818.94 499.203C3819.24 500.231 3819.39 500.744 3819.69 501.776C3821.47 507.678 3822.4 513.685 3822.41 519.696V519.675L3822.4 519.671ZM1229.72 338.742C1282.87 353.716 1326.89 375.939 1370.24 400.082C1378.02 404.418 1385.84 408.737 1393.69 413.022C1438.31 437.253 1485.9 458.681 1539.23 474.631C1620.43 498.913 1709.12 511.247 1797.63 519.111C1825.82 521.405 1854.38 522.854 1882.71 520.631C1911.58 518.374 1939.6 511.778 1959.55 497.974C1975.48 486.957 1984.66 472.985 1993.46 459.346C2002.87 444.7 2012.93 429.002 2033.49 419.135C2063.43 404.485 2089.49 387.659 2114.86 369.961C2141.92 351.106 2169.59 332.47 2205.55 320.358C2256.36 303.246 2315.48 299.786 2372.08 299.226C2479.82 298.388 2587.79 321.007 2687.78 344.114C2813.61 373.19 2935.62 408.539 3057.59 443.438C3082.18 450.472 3106.76 457.511 3131.35 464.545C3246.11 497.393 3360.69 530.675 3477.23 560.956C3518.61 571.703 3560.27 582.227 3602.89 590.87C3626.74 595.707 3654.2 602.105 3679.71 600.792C3720.29 598.515 3762.28 589.14 3789.51 569.177C3814.93 550.541 3821.93 525.565 3814.83 501.78C3814.54 500.753 3814.4 500.235 3814.11 499.208C3811.91 491.323 3808.99 483.67 3804.82 476.105C3782.31 439.291 3721.8 412.45 3672.66 390.829C3599.16 358.49 3520.23 331.219 3441.67 304.185C3417.55 295.875 3393.52 287.451 3369.51 279.011C3292.28 251.841 3214.87 224.415 3132.81 203.4C3049.24 181.998 2961.88 168.843 2871.85 165.168C2773.2 161.825 2678.63 175.267 2583.19 189.327C2542.62 195.313 2502.02 201.203 2461.29 206.713C2170.59 245.864 1877.39 277.735 1584.75 310.373C1546.22 314.646 1507.6 318.624 1468.99 322.594C1455.74 323.954 1442.5 325.313 1429.25 326.686C1363.19 333.383 1296.5 336.78 1229.7 338.738V338.73L1229.72 338.742ZM451.624 306.791C539.303 325.246 633.086 330.803 724.873 333.59C890.416 338.363 1056.36 342.464 1222.05 338.191C1182.38 327.54 1140.16 321.571 1097.62 317.765C883.405 299.79 667.022 300.585 451.564 306.782C451.591 306.782 451.604 306.786 451.624 306.791Z" fill="url(#paint17_linear_1779_1730)" style=""/>\n<path d="M3854.32 513.108C3854.29 565.228 3778.85 595.273 3703.85 599.516C3677.43 601.023 3649.14 594.983 3624.27 590.205C3580.94 581.882 3538.56 571.539 3496.52 560.93C3375.16 530.313 3255.94 496.311 3136.5 462.844C3114.94 456.803 3093.39 450.762 3071.83 444.721C2954.24 411.734 2836.61 378.334 2715.45 350.845C2618.67 328.887 2514.6 307.523 2410.62 308.024C2355.86 308.411 2299.13 311.678 2249.5 327.511C2213.97 338.847 2185.78 356.334 2158.12 374.062C2131.78 390.963 2104.79 406.998 2074.27 420.882C2053.76 430.046 2042.64 444.806 2032.27 458.769C2022.41 471.891 2012.15 485.151 1995.68 495.528C1974.32 508.978 1946.39 514.661 1917.16 517.263C1887.27 519.566 1857.06 518.097 1827.32 515.655C1738.05 507.686 1648.84 495.267 1566.4 471.605C1511.52 455.852 1461.86 434.791 1414.86 411.098C1406.6 406.914 1398.38 402.692 1390.18 398.461C1349.42 377.446 1308.22 357.538 1260.61 343.066C1092.17 347.246 923.627 342.855 755.388 337.496C658.395 334.259 557.354 328.214 466.486 304.9C448.316 305.363 430.14 305.852 411.971 306.344C363.807 307.641 315.59 309.194 267.367 309.219V308.483C315.317 308.458 363.268 306.904 411.165 305.62C428.735 305.145 446.313 304.677 463.883 304.218C432.797 295.854 404.467 285.292 376.824 273.092C347.495 260.101 321.35 251.298 284.624 251.896C250.882 253.188 216.873 262.445 186.899 271.682C152.244 282.357 116.751 295.799 91.8168 314.755C85.1056 320.754 81.7367 326.378 79.999 333.661C79.7992 334.461 79.6994 334.857 79.5063 335.656C77.2759 345.276 76.4969 354.819 76.6634 364.535C76.8298 372.007 79.2999 386.644 61.9959 386.985C52.3485 387.221 42.9741 385.158 34.1523 382.902C35.8102 382.75 36.6424 382.675 38.3003 382.523C45.5108 384.232 52.8878 386.207 60.6976 386.274C74.7459 385.474 71.9029 370.408 71.7764 364.531C71.6898 354.806 72.3956 345.25 74.6194 335.614C74.8191 334.814 74.919 334.419 75.112 333.619C76.8564 326.29 80.3053 320.636 87.0564 314.6C111.711 295.849 146.745 282.425 180.933 271.736C212.492 261.869 247.999 252.502 283.579 251.163C322.302 250.448 350.391 259.09 381.404 272.839C409.208 285.123 437.704 295.719 469.023 304.084C685.612 298.59 903.001 298.506 1118.23 316.789C1168.15 321.293 1217.34 328.82 1263.26 342.245C1333.48 340.304 1403.65 336.915 1473.03 329.632C1485.34 328.315 1497.66 327.001 1509.97 325.692C1550.11 321.419 1590.25 317.121 1630.31 312.516C1877.5 283.911 2124.66 254.914 2370.56 222.15C2417.87 215.848 2465.13 209.374 2512.29 202.626C2553.85 196.648 2595.24 190.266 2636.61 183.787C2733.54 168.607 2829.33 154.311 2929.91 157.611C3021.24 161.261 3109.64 174.926 3193.93 197.389C3276.43 219.376 3353.76 248.2 3430.91 276.708C3453.85 285.182 3476.79 293.648 3499.83 302.004C3575.34 329.333 3651.24 356.911 3721.47 389.507C3768.13 411.166 3826.11 438.44 3845.18 474.728C3848.71 482.268 3850.95 489.849 3852.42 497.65C3852.64 498.749 3852.74 499.3 3852.96 500.399C3853.92 504.554 3854.34 508.924 3854.34 513.095L3854.32 513.108ZM1265.6 342.927C1313.06 357.412 1354.15 377.278 1394.8 398.246C1403.01 402.477 1411.22 406.699 1419.49 410.884C1466.3 434.483 1515.75 455.469 1570.38 471.171C1652.31 494.716 1740.98 507.092 1829.73 515.011C1857.97 517.326 1886.59 518.787 1914.99 516.61C1943.6 514.059 1970.62 508.368 1991.4 495.158C2007.61 484.848 2017.73 471.668 2027.48 458.693C2037.95 444.671 2049.11 429.857 2069.74 420.655C2100.23 406.796 2127.14 390.77 2153.47 373.91C2181.43 355.998 2209.93 338.346 2245.9 326.955C2296.63 310.895 2354.68 307.687 2410.55 307.304C2515.58 306.803 2620.6 328.113 2718.4 350.247C2840.04 377.77 2958.08 411.288 3076.09 444.393C3097.65 450.434 3119.2 456.475 3140.76 462.516C3258.21 495.423 3375.48 528.764 3494.69 559.061C3536.68 569.733 3578.97 580.16 3622.16 588.752C3646.99 593.69 3675.61 600.232 3702.11 598.847C3785.57 594.128 3860.35 557.714 3848.13 500.449C3847.9 499.347 3847.79 498.795 3847.56 497.688C3846.05 489.904 3843.84 482.331 3840.33 474.804C3821.3 438.571 3763.37 411.343 3716.78 389.722C3646.62 357.164 3570.79 329.616 3495.36 302.316C3472.3 293.955 3449.33 285.489 3426.38 277.011C3349.53 248.612 3272.49 219.881 3190.34 197.94C3106.84 175.633 3019.24 161.973 2928.69 158.352C2829.77 155.106 2735.37 169.398 2640.05 184.33C2598.65 190.817 2557.21 197.199 2515.62 203.19C2468.42 209.942 2421.13 216.417 2373.78 222.727C2127.78 255.499 1880.53 284.509 1633.25 313.13C1593.15 317.744 1552.97 322.038 1512.78 326.328C1500.49 327.637 1488.19 328.95 1475.9 330.268C1406.38 337.559 1336.07 340.994 1265.71 342.964C1265.66 342.956 1265.64 342.952 1265.59 342.943L1265.6 342.927ZM471.666 304.766C561.308 327.578 660.758 333.577 756.36 336.764C923.487 342.093 1090.91 346.454 1258.24 342.371C1213.11 329.232 1164.83 321.853 1115.8 317.424C902.255 299.289 686.578 299.36 471.673 304.766H471.666Z" fill="url(#paint18_linear_1779_1730)" style=""/>\n<path d="M3886.81 506.966C3886.82 562.841 3805.95 593 3726.38 597.55C3699.3 599.108 3670.28 593.071 3644.71 588.289C3600.31 579.979 3556.85 569.615 3513.73 558.985C3389.4 528.335 3267.21 494.24 3144.8 460.685C3140.84 459.603 3138.85 459.064 3134.89 457.982C3120.3 453.983 3105.72 449.979 3091.14 445.967C2977.38 414.702 2863.58 383.062 2746.47 357.059C2651.77 336.031 2550.52 315.926 2449.13 316.09C2395.11 316.3 2339.39 319.323 2289.88 334.107C2254.32 344.728 2225.31 361.251 2196.78 378.027C2169.5 394.091 2141.67 409.318 2110.59 422.406C2089.89 430.72 2077.83 444.953 2066.35 458.129C2055.62 470.548 2044.43 483.084 2027.74 492.741C2005.97 505.337 1978.31 510.755 1949.59 513.251C1919.58 515.499 1889.28 514.03 1859.43 511.559C1769.92 503.535 1680.72 491.074 1597.58 468.144C1541.34 452.636 1489.82 432.033 1440.65 408.977C1431.97 404.893 1423.34 400.772 1414.73 396.63C1376.81 378.482 1338.62 360.944 1296.11 347.275C1126.28 351.19 956.384 346.56 786.806 340.679C687.057 337.058 580.589 330.676 489.302 302.762C471.812 303.145 454.322 303.541 436.831 303.936C390.066 305.01 343.247 306.319 296.435 306.205C296.482 305.911 296.508 305.763 296.555 305.469C343.094 305.591 389.646 304.282 436.152 303.208C453.123 302.821 470.101 302.433 487.072 302.063C460.32 293.475 436.259 282.972 413.009 271.038C385.498 256.91 361.197 247.762 324.711 248.208C291.408 249.379 257.752 258.749 228.291 267.952C192.232 279.213 156.292 293.484 129.926 312.979C122.929 318.969 118.881 324.774 116.191 332.036C115.818 333 115.632 333.484 115.259 334.448C112.11 342.914 109.819 351.392 107.895 360.001C105.598 370.732 104.38 387.31 82.2822 388.219C71.3831 388.732 60.6106 386.257 50.5371 383.992C52.1683 383.832 52.9872 383.756 54.6251 383.597C63.074 385.487 71.8625 387.663 80.9839 387.499C100.072 386.489 101.177 368.863 103.015 359.972C104.939 351.354 107.229 342.872 110.379 334.402C110.752 333.442 110.938 332.962 111.311 332.002C114.014 324.682 118.089 318.86 125.173 312.84C151.032 293.715 186.559 279.688 221.759 268.461C252.945 258.514 288.359 248.726 323.733 247.493C362.002 246.903 388.654 255.929 417.596 270.831C440.979 282.82 465.174 293.353 492.092 301.949C707.144 297.348 922.841 298.085 1136.41 316.452C1192.65 321.583 1247.74 330.546 1298.9 346.459C1372.75 344.547 1446.62 341.1 1519.55 333.194C1530.83 331.944 1542.12 330.693 1553.4 329.451C1595.2 324.838 1636.99 320.219 1678.69 315.244C1975.52 279.688 2272.65 243.628 2566.49 199.085C2608.79 192.644 2650.89 185.766 2692.97 178.799C2789.94 162.73 2885.72 147.546 2986.77 150.762C3078.86 154.37 3167.77 168.578 3252.16 192.063C3334.96 215.103 3412.08 245.337 3489.01 275.201C3510.51 283.549 3532.02 291.884 3553.62 300.131C3626.7 327.991 3700.42 355.989 3767.86 389.191C3811.66 410.758 3865.17 438.024 3880.69 473.423C3883.58 480.937 3885.14 488.456 3885.95 496.164C3886.1 497.33 3886.18 497.911 3886.33 499.077C3886.69 501.742 3886.82 504.381 3886.82 506.97L3886.81 506.966ZM1301.13 347.145C1343.48 360.814 1381.57 378.288 1419.37 396.402C1428.01 400.528 1436.64 404.649 1445.3 408.75C1494.27 431.718 1545.57 452.244 1601.57 467.706C1684.21 490.527 1772.87 502.933 1861.85 510.915C1890.19 513.255 1918.91 514.725 1947.42 512.578C1975.47 510.132 2002.27 504.71 2023.41 492.346C2039.84 482.735 2050.89 470.308 2061.52 458.024C2073.03 444.759 2085.19 430.497 2106.01 422.141C2137.04 409.082 2164.81 393.881 2192.02 377.833C2220.87 360.864 2250.2 344.211 2286.22 333.535C2336.83 318.531 2393.81 315.559 2448.98 315.353C2551.38 315.18 2653.55 335.244 2749.25 356.436C2866.84 382.473 2981.08 414.226 3095.28 445.605C3109.86 449.609 3124.44 453.621 3139.03 457.62C3142.98 458.702 3144.96 459.241 3148.92 460.323C3269.29 493.314 3389.5 526.747 3511.63 557.087C3555.49 567.982 3599.67 578.632 3644.79 587.287C3669.67 592.061 3698.07 598.266 3724.5 596.869C3808.72 592.061 3888.96 557.845 3881.35 499.098C3881.21 497.932 3881.13 497.351 3880.99 496.185C3880.19 488.486 3878.64 480.984 3875.73 473.482C3860.19 438.142 3806.74 410.918 3762.99 389.385C3695.62 356.221 3621.98 328.247 3548.96 300.417C3527.34 292.174 3505.82 283.827 3484.29 275.479C3407.68 245.729 3330.87 215.613 3248.44 192.611C3164.82 169.276 3076.75 155.073 2985.45 151.495C2886.06 148.346 2791.67 163.501 2696.31 179.304C2654.19 186.279 2612.04 193.158 2569.71 199.607C2275.72 244.171 1978.45 280.248 1681.48 315.82C1639.72 320.792 1597.86 325.423 1555.99 330.037C1544.71 331.278 1533.42 332.529 1522.14 333.779C1449.01 341.71 1374.94 345.196 1300.87 347.136H1301.11L1301.13 347.145ZM494.382 302.64C584.464 330.074 689.494 336.368 787.865 339.942C956.344 345.789 1125.15 350.403 1293.89 346.56C1243.53 330.95 1189.33 322.122 1134 317.075C921.976 298.847 707.869 298.11 494.382 302.631V302.64Z" fill="url(#paint19_linear_1779_1730)" style=""/>\n<path d="M3919.68 500.424C3919.71 559.987 3832.97 590.731 3748.77 595.585C3723.55 597.033 3696.89 592.053 3672.9 587.843C3630.74 580.446 3589.47 570.991 3548.53 561.28C3418.43 530.414 3290.61 495.621 3162.69 461.354C3145.46 456.732 3128.24 452.101 3111.01 447.466C3000.93 417.855 2890.8 387.924 2777.6 363.331C2684.95 343.2 2586.36 324.282 2487.48 324.134C2434.15 324.177 2379.52 326.972 2330.14 340.704C2294.56 350.601 2264.75 366.181 2235.4 381.988C2207.19 397.207 2178.5 411.612 2146.85 423.913C2126.12 431.596 2112.84 444.94 2100.44 457.489C2088.81 469.226 2076.73 480.942 2059.79 489.934C2037.59 501.717 2010.44 506.836 1982.15 509.235C1952.01 511.433 1921.59 509.951 1891.63 507.459C1801.9 499.376 1712.66 486.903 1628.83 464.684C1571.21 449.411 1517.83 429.272 1466.54 406.851C1457.43 402.856 1448.37 398.831 1439.31 394.799C1404.43 379.269 1369.38 364.076 1331.58 351.485C1160.4 355.076 989.008 350.214 818.131 343.844C716.451 339.87 604.498 333.236 514.13 300.552C496.639 300.855 479.149 301.179 461.658 301.507C416.265 302.358 370.824 303.44 325.41 303.17C325.484 302.875 325.523 302.728 325.597 302.433C370.771 302.694 415.965 301.617 461.106 300.771C478.144 300.455 495.181 300.139 512.219 299.836C489.129 291.071 468.729 280.631 449.168 268.983C423.728 253.845 400.685 244.188 364.586 244.521C330.191 245.624 295.623 255.811 265.575 265.687C229.909 277.411 194.522 291.964 167.817 311.198C160.48 317.197 155.832 323.166 152.224 330.407C151.731 331.363 151.292 332.297 150.799 333.232C147.111 340.514 143.808 347.844 140.772 355.248C135.286 368.724 129.687 388.492 102.283 389.431C90.0453 390.008 78.041 387.512 66.6426 385.066C68.2538 384.902 69.0527 384.822 70.664 384.657C80.278 386.741 90.6777 389.145 101.044 388.724C125.505 388.354 131.318 366.543 135.945 355.215C138.974 347.806 142.244 340.464 145.972 333.181C146.465 332.255 146.964 331.308 147.397 330.356C150.952 323.065 155.679 317.079 163.05 311.055C190.147 291.526 225.974 276.75 262.266 264.955C293.172 254.91 328.466 244.912 363.713 243.801C401.863 243.363 426.837 252.696 453.809 268.802C473.476 280.509 493.989 290.975 517.232 299.752C730.047 296.115 943.327 297.723 1154.56 316.107C1217.22 321.874 1278.2 332.407 1334.68 350.761C1412.15 349.026 1489.61 345.457 1565.98 336.751C1576.04 335.602 1586.11 334.452 1596.17 333.299C1639.83 328.323 1683.48 323.339 1727.03 317.976C2026.04 280.968 2325.23 242.845 2620.66 195.553C2663.55 188.662 2706.23 181.316 2748.87 173.861C2845.99 156.879 2941.92 140.802 3043.58 143.934C3136.68 147.508 3226.32 162.322 3311.01 186.944C3394.28 211.159 3471.34 242.921 3548.18 274.271C3567.87 282.298 3587.56 290.318 3607.33 298.262C3677.19 326.319 3747.72 354.537 3811.66 387.907C3853.24 409.613 3903.84 437.182 3916.17 472.122C3918.64 479.557 3919.28 487.155 3919.43 494.733C3919.48 495.937 3919.52 496.543 3919.57 497.747V500.433C3919.62 500.433 3919.64 500.437 3919.69 500.441L3919.68 500.424ZM1336.65 351.359C1374.28 363.946 1409.2 379.046 1443.94 394.542C1452.99 398.575 1462.05 402.608 1471.16 406.594C1522.25 428.927 1575.4 449.003 1632.78 464.229C1716.14 486.343 1804.87 498.766 1894.1 506.806C1922.58 509.168 1951.43 510.645 1980.08 508.553C2007.69 506.204 2034.01 501.085 2055.56 489.521C2072.24 480.575 2084.17 468.969 2095.68 457.363C2108.17 444.742 2121.55 431.356 2142.39 423.627C2173.96 411.347 2202.62 396.975 2230.75 381.778C2260.47 365.764 2290.62 350.092 2326.7 340.115C2377.18 326.155 2433.14 323.427 2487.6 323.389C2586.2 323.537 2684.14 341.681 2776.66 361.651C2891.7 386.484 3003.49 417.022 3115.28 447.087C3132.5 451.726 3149.72 456.353 3166.95 460.975C3286.54 493.011 3405.98 525.426 3527.28 554.818C3572.04 565.666 3617.12 576.245 3663.08 584.917C3689.28 589.859 3719.24 596.351 3747.03 594.877C3831.34 590.032 3917.47 557.171 3914.78 497.73C3914.74 496.526 3914.71 495.92 3914.66 494.716C3914.51 487.143 3913.9 479.553 3911.38 472.131C3899.06 437.245 3848.5 409.718 3806.97 388.05C3743.1 354.722 3672.65 326.534 3602.87 298.502C3583.1 290.558 3563.41 282.534 3543.72 274.511C3467.98 243.616 3391.96 212.472 3309.99 188.477C3225.39 163.711 3135.78 148.228 3042.58 144.629C2942.6 141.564 2848.07 157.624 2752.57 174.32C2709.89 181.783 2667.16 189.129 2624.24 196.042C2328.67 243.359 2029.33 281.511 1730.19 318.531C1686.6 323.895 1642.9 328.891 1599.2 333.872C1589.13 335.021 1579.06 336.17 1568.99 337.323C1492.39 346.075 1414.41 349.485 1336.72 351.35C1336.69 351.35 1336.68 351.354 1336.66 351.359H1336.65ZM519.256 300.455C608.593 332.592 718.935 339.193 819.357 343.116C989.134 349.426 1159.62 354.263 1329.71 350.849C1274.01 332.819 1213.93 322.413 1152.19 316.734C942.415 298.472 730.599 296.856 519.256 300.447V300.455Z" fill="url(#paint20_linear_1779_1730)" style=""/>\n<path d="M3953.39 484.562C3953.39 487.521 3953.27 490.443 3953.07 493.327C3953.02 494.556 3952.99 495.171 3952.95 496.4C3950.22 557.739 3857.6 588.601 3771.21 593.614C3745.7 595.084 3718.8 590.263 3694.43 586.138C3651.53 578.88 3609.51 569.539 3567.81 559.928C3440.6 530.608 3315.59 497.448 3190.51 464.743C3170.84 459.599 3151.19 454.425 3131.54 449.259C3025.03 421.24 2918.46 392.913 2809.02 369.7C2718.32 350.462 2622.36 332.651 2525.89 332.205C2473.31 332.078 2419.6 334.612 2370.44 347.338C2334.77 356.574 2304.2 371.127 2274.01 385.988C2244.86 400.334 2215.28 413.906 2183.1 425.437C2162.29 432.543 2147.99 445.016 2134.47 456.875C2121.93 467.892 2108.98 478.82 2091.84 487.172C2069.38 498.122 2042.49 502.95 2014.75 505.236C1984.44 507.379 1953.89 505.884 1923.78 503.363C1833.84 495.217 1744.55 482.739 1660.08 461.228C1601.05 446.195 1545.83 426.514 1492.44 404.733C1482.92 400.827 1473.41 396.895 1463.91 392.963C1432.48 379.9 1400.91 367.061 1367.76 355.796C1194.97 359.189 1022.03 353.914 849.605 347.035C746.746 342.737 629.067 335.909 540.902 298.333C522.853 298.569 504.81 298.822 486.76 299.078C442.704 299.714 398.602 300.56 354.533 300.156C354.66 299.861 354.72 299.714 354.84 299.419C398.642 299.811 442.478 298.977 486.267 298.342C503.924 298.085 521.574 297.832 539.231 297.605C519.311 288.647 502.093 278.299 485.582 266.95C462.119 250.705 440.694 240.656 404.588 240.85C370.379 241.843 335.964 252.258 306.257 262.21C269.538 274.511 233.771 289.804 205.841 309.438C198.191 315.458 192.885 321.571 188.517 328.79C187.838 329.885 187.153 330.975 186.473 332.04C182.652 338.115 179.017 344.223 175.461 350.361C166.007 366.901 155.76 389.478 122.557 390.669C108.915 391.174 95.8255 388.838 83.0156 386.16C84.6268 385.992 85.4258 385.912 87.037 385.743C97.9894 388.017 109.661 390.458 121.379 389.957C151.932 388.85 162.239 365.137 170.694 350.302C174.196 344.147 177.878 338.048 181.706 331.973C182.385 330.904 183.071 329.818 183.75 328.723C188.125 321.47 193.451 315.332 201.141 309.287C227.653 290.663 261.975 276.064 296.423 263.969C328.867 252.582 366.171 241.195 403.909 240.121C441.999 239.288 465.694 249.69 490.349 266.786C506.9 278.202 524.198 288.571 544.245 297.538C754.223 294.877 964.541 297.424 1172.85 315.774C1241.99 322.194 1308.64 334.419 1370.67 354.983C1451.66 353.165 1532.74 349.498 1612.55 340.304C1621.42 339.26 1630.29 338.216 1639.15 337.176C1684.65 331.83 1730.14 326.471 1775.52 320.712C2076.71 282.273 2377.97 242.071 2674.95 192.009C2718.32 184.667 2761.49 176.866 2804.59 168.935C2901.98 151.044 2998.14 134.024 3100.54 137.081C3195.86 140.68 3287.32 156.891 3373.2 183.093C3456.23 208.431 3532.66 241.355 3608.78 274.005C3626.23 281.486 3643.69 288.958 3661.2 296.38C3727.84 324.606 3795.15 353.017 3855.56 386.518C3894.94 408.358 3942.66 436.411 3951.84 470.805C3953.07 475.284 3953.54 480.045 3953.45 484.587C3953.43 484.579 3953.42 484.575 3953.39 484.566L3953.39 484.562ZM1372.77 355.682C1405.78 366.901 1437.2 379.698 1468.5 392.698C1477.96 396.642 1487.44 400.57 1496.96 404.468C1550.14 426.169 1605.14 445.787 1663.94 460.773C1747.94 482.188 1836.74 494.619 1926.2 502.723C1954.86 505.118 1983.85 506.604 2012.69 504.562C2039.76 502.327 2065.85 497.507 2087.68 486.764C2104.55 478.462 2117.32 467.639 2129.69 456.749C2143.27 444.793 2157.71 432.303 2178.64 425.138C2210.75 413.624 2240.3 400.107 2269.35 385.765C2299.92 370.74 2330.91 355.989 2367.07 346.724C2417.4 333.829 2472.33 331.316 2526.09 331.455C2622.27 331.91 2717.71 348.98 2808.25 368.096C2919.43 391.57 3027.6 420.427 3135.75 448.876C3155.4 454.054 3175.05 459.215 3194.71 464.36C3309.77 494.459 3424.76 524.798 3541.44 552.338C3587.31 563.166 3633.46 573.707 3680.46 582.425C3708.13 587.557 3740.1 594.599 3769.41 592.924C3855.13 587.957 3945.33 556.923 3948.07 496.391C3948.11 495.162 3948.14 494.547 3948.19 493.318C3948.66 485.804 3948.72 478.26 3946.87 470.809C3937.73 436.47 3890.05 408.459 3850.73 386.657C3790.38 353.19 3723.14 324.804 3656.56 296.611C3639.06 289.186 3621.59 281.713 3604.14 274.237C3528.31 241.717 3452.18 208.907 3369.5 183.606C3284.45 157.578 3193.91 141.362 3099.43 137.784C2998.6 134.757 2904.11 151.764 2808.23 169.386C2765.08 177.321 2721.88 185.134 2678.48 192.489C2381.33 242.576 2079.91 282.804 1778.56 321.255C1733.12 327.018 1687.55 332.386 1641.99 337.74C1633.12 338.784 1624.25 339.824 1615.39 340.868C1535.29 350.104 1453.93 353.817 1372.65 355.661C1372.69 355.661 1372.72 355.665 1372.77 355.669L1372.77 355.682ZM545.923 298.245C633.155 335.223 749.116 342.047 850.79 346.303C1022.09 353.135 1193.93 358.406 1365.6 355.084C1304.36 334.827 1238.57 322.741 1170.32 316.401C963.396 298.165 754.463 295.622 545.869 298.241H545.929L545.923 298.245Z" fill="url(#paint21_linear_1779_1730)" style=""/>\n<path d="M3988.02 477.46C3987.82 482.356 3987.33 487.168 3986.67 492.047C3986.49 493.251 3986.41 493.857 3986.23 495.061C3978.02 556.687 3880.77 586.555 3793.67 591.64C3766.79 593.219 3738.27 588.024 3712.57 583.743C3668.89 576.464 3626.01 567.224 3583.46 557.685C3460.43 530.107 3339.39 498.98 3218.35 468.123C3196.47 462.537 3174.61 456.917 3152.75 451.305C3049.68 424.818 2946.56 398.078 2840.77 376.158C2751.8 357.724 2658.56 341.243 2564.31 340.266C2512.44 339.971 2459.7 342.27 2410.77 353.977C2374.99 362.535 2343.63 376.129 2312.61 390.016C2282.55 403.483 2252.09 416.201 2219.37 426.956C2198.44 433.507 2183.12 445.096 2168.56 456.277C2155.15 466.561 2141.36 476.715 2123.97 484.41C2101.14 494.51 2074.82 499.064 2047.47 501.245C2016.97 503.325 1986.25 501.813 1955.95 499.262C1865.8 491.053 1776.43 478.584 1691.33 457.763C1630.83 442.962 1573.76 423.753 1518.29 402.603C1508.35 398.794 1498.43 394.963 1488.52 391.119C1460.7 380.321 1432.8 369.654 1404 359.917C1229.59 363.074 1055.01 357.635 881.028 350.209C777.583 345.612 653.925 338.57 569.11 296.094C550.008 296.254 530.913 296.443 511.811 296.632C469.114 297.053 426.37 297.681 383.666 297.142C383.839 296.847 383.926 296.7 384.099 296.405C426.576 296.931 469.087 296.321 511.565 295.892C530.294 295.706 549.023 295.53 567.752 295.361C550.601 286.277 536.026 276.039 522.271 264.904C500.906 247.585 481.018 237.116 444.799 237.17C410.837 238.063 376.489 248.949 347.187 258.947C309.516 271.804 273.111 287.687 244.009 307.679C236.053 313.728 230.174 319.971 225.074 327.153C224.148 328.399 223.283 329.628 222.351 330.849C218.775 335.665 215.26 340.498 211.771 345.339C197.676 364.939 182.336 390.235 142.968 391.915C127.974 392.466 113.613 390.113 99.4648 387.263C101.049 387.095 101.842 387.006 103.426 386.838C115.837 389.351 128.613 391.654 141.789 391.203C178.741 389.579 193.901 363.478 206.944 345.263C210.433 340.422 213.948 335.589 217.524 330.773C218.449 329.552 219.315 328.323 220.247 327.077C225.36 319.857 231.299 313.598 239.302 307.527C267.944 287.859 303.771 272.149 340.696 259.343C371.855 248.537 407.974 237.377 444.173 236.451C482.683 236.261 504.201 246.263 527.085 264.782C540.927 275.95 555.561 286.222 572.812 295.332C779.454 293.681 986.31 297.167 1191.2 315.446C1267 322.556 1339.41 336.578 1407.27 359.193C1491.61 357.53 1576.18 353.935 1659.18 343.882C1666.5 342.994 1673.82 342.106 1681.14 341.217C1728.83 335.454 1776.52 329.67 1824.08 323.465C2127.49 283.599 2430.8 241.334 2729.31 188.498C2773.04 180.718 2816.55 172.463 2860 164.09C2957.92 145.218 3054.13 127.238 3157.57 130.257C3254.49 133.839 3347.14 150.884 3433.65 178.496C3517.63 205.299 3594.33 240.096 3670.71 274.553C3685.5 281.225 3700.3 287.893 3715.14 294.528C3778.55 322.893 3842.66 351.464 3899.49 385.083C3936.83 407.171 3981.41 435.628 3987.52 469.521C3988 472.207 3988.18 474.871 3988.18 477.511C3988.11 477.49 3988.08 477.481 3988 477.464L3988.02 477.46ZM1409.03 359.799C1437.61 369.511 1465.35 380.107 1493.01 390.833C1502.91 394.676 1512.81 398.512 1522.75 402.317C1578.02 423.387 1634.87 442.541 1695.14 457.3C1779.79 478.029 1868.69 490.451 1958.36 498.614C1987.24 501.043 2016.43 502.537 2045.5 500.563C2097.18 496.433 2131.52 480.967 2163.79 456.125C2178.46 444.865 2193.9 433.229 2214.98 426.632C2247.65 415.906 2278.02 403.205 2308.03 389.768C2339.46 375.699 2371.24 361.963 2407.53 353.35C2457.61 341.462 2511.61 339.201 2564.64 339.517C2658.6 340.489 2751.31 356.318 2840.1 374.605C2947.58 396.739 3052.26 424.022 3156.91 450.918C3178.77 456.534 3200.64 462.145 3222.51 467.736C3334.54 496.311 3446.55 525.055 3560.13 551.105C3607.32 561.928 3654.81 572.456 3703.16 581.053C3730.87 585.982 3762.65 592.638 3791.89 590.954C3878.27 585.911 3973.33 555.908 3981.42 495.044C3981.59 493.836 3981.67 493.23 3981.85 492.022C3982.84 484.432 3983.37 477.094 3982.53 469.487C3976.41 435.645 3931.89 407.23 3894.59 385.175C3837.81 351.59 3773.76 323.048 3710.4 294.721C3695.56 288.091 3680.77 281.423 3665.98 274.746C3589.89 240.412 3513.5 205.741 3429.9 178.98C3344.2 151.549 3252.47 134.496 3156.41 130.939C3054.73 127.988 2959.91 145.971 2863.68 164.507C2820.17 172.888 2776.6 181.156 2732.82 188.94C2434.13 241.805 2130.66 284.1 1827.08 323.983C1779.48 330.201 1731.75 335.985 1684.02 341.756C1676.69 342.645 1669.38 343.533 1662.05 344.421C1578.77 354.503 1493.65 358.002 1409.04 359.791V359.799H1409.03ZM574.07 296.031C658.067 337.892 779.954 344.926 882.273 349.477C1055.13 356.802 1228.75 362.27 1402.03 359.252C1334.92 336.949 1263.48 323.09 1188.56 316.052C984.958 297.895 779.401 294.406 574.063 296.022V296.031H574.07Z" fill="url(#paint22_linear_1779_1730)" style=""/>\n<path d="M4023.11 471.979C4022.79 478.323 4021.8 484.545 4020.27 490.818C4020 491.98 4019.86 492.561 4019.59 493.722C4005.68 556.249 3905.19 584.256 3816.15 589.678C3792.34 591.08 3767.44 587.237 3744.47 583.776C3704.01 577.681 3664.29 569.577 3624.9 561.2C3497.16 534.03 3371.62 502.639 3246.21 471.499C3222.31 465.555 3198.42 459.582 3174.55 453.587C3073.64 428.283 2972.7 402.646 2869.21 381.791C2783.16 364.447 2693.56 349.544 2602.75 348.298C2551.61 347.835 2499.7 349.873 2451.05 360.595C2415.14 368.509 2383.01 381.126 2351.18 394.041C2320.18 406.603 2288.88 418.474 2255.58 428.451C2234.64 435.195 2218.64 444.961 2202.62 455.667C2167.8 479.039 2131.64 493.301 2080.27 497.242C2049.51 499.258 2018.56 497.726 1988.01 495.133C1897.66 486.869 1808.17 474.417 1722.48 454.269C1660.52 439.704 1601.63 420.954 1544.12 400.444C1533.73 396.727 1523.37 392.984 1513.01 389.233C1489.36 380.679 1465.69 372.171 1441.59 364.135C1265.04 367.162 1088.36 361.289 912.302 353.341C840.968 349.986 768.41 344.526 700.386 329.86C663.401 321.882 627.248 310.798 598.406 293.837C577.886 293.913 557.36 294.01 536.84 294.119C495.434 294.343 453.995 294.751 412.596 294.073C412.796 293.778 412.889 293.631 413.089 293.336C454.242 294.006 495.441 293.597 536.594 293.383C556.767 293.273 576.934 293.176 597.108 293.101C582.314 283.907 570.077 273.732 558.618 262.824C539.936 244.963 520.568 232.885 484.555 233.445C451.013 234.236 416.997 245.291 388.208 255.247C349.306 268.705 312.248 285.388 281.788 305.86C273.505 311.947 267.054 318.3 261.248 325.448C260.069 326.85 258.958 328.235 257.779 329.599C254.763 333.101 251.794 336.616 248.871 340.148C230.189 362.371 208.77 391.755 162.983 393.094C146.651 393.704 130.998 391.309 115.525 388.29C117.083 388.118 117.862 388.029 119.427 387.857C133.169 390.547 147.224 392.883 161.752 392.374C205.181 391.153 226.473 360.881 243.984 340.051C246.953 336.532 249.889 333.009 252.892 329.502C254.071 328.138 255.182 326.753 256.361 325.351C262.18 318.182 268.672 311.804 276.967 305.692C306.808 285.607 343.167 269.177 381.131 255.794C411.957 244.929 447.93 233.517 483.943 232.696C522.659 232.654 542.786 243.064 563.332 262.69C574.87 273.635 587.181 283.852 602.068 293.071C804.976 292.444 1007.98 296.885 1209.07 315.05C1291.84 322.88 1370.27 338.839 1444.44 363.335C1531.71 361.601 1619.57 358.052 1705.39 347.368C1712.29 346.509 1715.74 346.08 1722.64 345.221C1772.55 339.02 1822.46 332.807 1872.21 326.126C2134.65 290.684 2396.43 252.591 2655.31 207.774C2698.06 200.374 2740.73 192.767 2783.27 184.878C2827.28 176.681 2871.04 168.001 2914.75 159.186C3013.12 139.379 3109.75 120.393 3214.17 123.34C3313.01 126.914 3407.15 144.906 3494.52 174.105C3579.67 202.563 3656.79 239.461 3733.57 275.959C3745.22 281.507 3756.9 287.047 3768.59 292.566C3828.79 321.032 3889.71 349.742 3942.95 383.449C3978.34 405.866 4019.59 434.728 4022.71 468.115C4022.83 469.39 4022.89 470.666 4022.89 471.933C4022.99 471.954 4023.04 471.963 4023.13 471.979H4023.11ZM1446.72 364.064C1470.59 372.049 1494.07 380.473 1517.51 388.964C1527.84 392.715 1538.2 396.453 1548.56 400.166C1605.87 420.604 1664.56 439.295 1726.3 453.814C1811.55 473.869 1900.59 486.276 1990.48 494.505C2019.6 496.968 2049.03 498.492 2078.35 496.568C2128.64 492.699 2163.79 478.344 2197.83 455.515C2213.55 444.957 2229.99 434.189 2251.23 428.123C2284.45 418.167 2315.68 406.325 2346.6 393.788C2378.55 380.835 2410.84 368.299 2446.88 360.376C2497.04 349.351 2550.42 347.086 2603.13 347.566C2694.81 348.816 2785.24 363.706 2872.15 381.176C2976.07 402.069 3077.39 427.799 3178.7 453.2C3202.58 459.186 3226.46 465.164 3250.36 471.112C3366.59 499.974 3482.89 528.924 3600.91 554.763C3643.76 564.142 3686.89 573.235 3730.75 580.548C3757.16 584.951 3786.69 590.55 3814.35 588.988C3902.68 583.789 4001.04 555.39 4014.76 493.693C4015.04 492.531 4015.18 491.954 4015.45 490.792C4017.19 483.346 4018.91 475.722 4018.11 468.174C4014.99 434.829 3973.74 406.005 3938.39 383.626C3885.19 349.953 3824.32 321.272 3764.18 292.831C3752.49 287.312 3740.81 281.772 3729.15 276.224C3652.65 239.865 3575.81 203.085 3491.02 174.665C3404.52 145.668 3311.3 127.647 3213.34 124.102C3110.98 120.793 3015.13 140.267 2918.82 159.674C2875.07 168.498 2831.25 177.186 2787.21 185.395C2744.64 193.289 2701.95 200.9 2659.17 208.305C2400.13 253.146 2138.19 291.261 1875.58 326.715C1825.77 333.409 1775.81 339.626 1725.85 345.827C1718.94 346.686 1715.49 347.115 1708.58 347.974C1622.45 358.679 1534.31 362.296 1446.72 364.064V364.072L1446.72 364.064ZM603.473 293.842C632.129 310.613 667.948 321.579 704.627 329.481C771.779 343.945 843.372 349.346 913.786 352.66C1088.67 360.561 1264.17 366.408 1439.55 363.466C1366.16 339.294 1288.62 323.482 1206.77 315.728C1006.9 297.685 805.142 293.244 603.473 293.854V293.846V293.842Z" fill="url(#paint23_linear_1779_1730)" style=""/>\n<path d="M4058.44 467.193C4058.51 474.754 4056.11 482.297 4053.75 489.673C4053.4 490.763 4053.23 491.306 4052.88 492.396C4033.22 555.327 3928.9 581.684 3838.54 587.717C3813.94 589.165 3788.2 585.3 3764.41 581.823C3723.97 575.913 3684.22 568.108 3644.77 560C3519.74 534.3 3396.78 504.516 3273.98 474.884C3248.24 468.658 3222.53 462.385 3196.82 456.113C3099.15 432.252 3001.47 408.072 2901.41 388.442C2817.13 371.906 2729.7 357.854 2641.04 356.368C2590.57 355.733 2539.6 357.555 2491.18 367.276C2455.07 374.525 2422.17 386.207 2389.52 398.141C2357.64 409.789 2325.5 420.798 2291.64 429.996C2270.48 436.163 2253.51 445.206 2236.5 455.132C2200.13 476.408 2163.15 489.664 2113.11 493.301C2082.04 495.242 2050.89 493.697 2020.05 491.062C1929.5 482.735 1839.87 470.316 1753.6 450.838C1690.13 436.508 1629.39 418.221 1569.85 398.347C1559.03 394.719 1548.22 391.065 1537.42 387.411C1518.3 380.94 1499.17 374.495 1479.87 368.24C1301.05 371.254 1121.9 364.981 943.656 356.545C870.745 352.933 796.109 347.149 727.199 330.845C690.627 322.194 655.367 310.045 628.708 291.682C606.451 291.652 584.2 291.652 561.942 291.661C521.835 291.682 481.688 291.88 441.594 291.063C441.84 290.768 441.966 290.621 442.213 290.326C482.08 291.13 522.001 290.937 561.883 290.912C583.787 290.903 605.692 290.899 627.597 290.933C614.913 281.6 604.633 271.522 595.172 260.795C578.667 242.058 560.837 229.324 524.445 229.77C491.129 230.469 457.32 241.742 428.89 251.749C388.976 265.796 351.358 283.22 319.693 304.101C311.111 310.234 304.107 316.683 297.669 323.794C296.244 325.355 294.819 326.896 293.401 328.407C290.924 331.013 289.686 332.314 287.209 334.92C263.374 360.005 235.657 392.757 183.199 394.331C165.528 394.992 148.577 392.61 131.779 389.389C133.337 389.212 134.116 389.124 135.674 388.947C150.768 391.81 166.121 394.171 182.02 393.607C232.155 392.138 259.825 358.578 282.442 334.798C284.919 332.192 286.157 330.891 288.634 328.285C290.059 326.774 291.477 325.233 292.902 323.671C299.36 316.528 306.424 310.07 315.053 303.915C346.125 283.427 383.07 266.268 422.066 252.3C452.513 241.393 488.292 229.715 524.065 229.012C562.901 228.557 582.183 240.429 600.046 260.677C609.58 271.442 619.887 281.558 632.657 290.92C831.483 291.32 1030.31 296.717 1227.28 314.713C1317.29 323.322 1401.78 341.348 1482.78 367.415C1572.73 365.756 1663.49 362.279 1751.87 350.938C1756.5 350.344 1758.81 350.049 1763.44 349.456C1815.86 342.767 1868.28 336.077 1920.54 328.866C2184.34 292.301 2447.31 252.637 2707.03 205.724C2750.62 197.852 2794.09 189.757 2837.42 181.354C2881.62 172.741 2925.57 163.648 2969.46 154.425C3068.35 133.641 3165.56 113.637 3271.06 116.508C3372.23 120.082 3468.16 139.185 3556.59 170.177C3643.22 200.542 3720.94 239.818 3798.3 278.628C3806.33 282.669 3814.38 286.693 3822.44 290.709C3879.44 319.255 3937.19 348.084 3986.8 381.85C4020.35 404.683 4058.12 433.932 4058.37 466.835V467.184C4058.37 467.184 4058.4 467.197 4058.43 467.205L4058.44 467.193ZM1485.07 368.139C1504.14 374.318 1523.04 380.692 1541.94 387.091C1552.74 390.745 1563.54 394.394 1574.36 398.027C1633.7 417.834 1694.23 436.058 1757.47 450.346C1843.33 469.744 1932.53 482.116 2022.65 490.409C2052.06 492.927 2081.8 494.455 2111.44 492.603C2160.46 488.995 2196.39 475.713 2231.99 454.926C2249.16 444.928 2266.28 435.826 2287.61 429.609C2321.37 420.44 2353.42 409.474 2385.19 397.838C2417.96 385.861 2451.01 374.281 2487.25 366.989C2537.1 356.958 2589.67 354.971 2641.66 355.623C2731.13 357.122 2819.38 371.161 2904.46 387.827C3004.92 407.504 3102.99 431.756 3201.03 455.709C3226.74 461.985 3252.44 468.271 3278.2 474.484C3391.5 501.83 3504.92 529.181 3619.93 553.551C3664.11 562.913 3708.59 571.968 3753.8 579.158C3780.16 583.351 3809.4 588.58 3836.88 587.022C3926.48 581.549 4028.83 554.224 4048.2 492.35C4048.54 491.26 4048.72 490.717 4049.06 489.626C4051.48 482.158 4053.88 474.505 4053.76 466.843C4053.54 433.987 4015.78 404.776 3982.28 381.984C3932.71 348.256 3875.01 319.458 3818.08 290.937C3810.03 286.908 3801.98 282.879 3793.94 278.855C3716.85 240.189 3639.42 201.03 3553.16 170.708C3465.63 139.935 3370.66 120.802 3270.4 117.249C3166.98 114.003 3070.53 134.53 2973.7 154.871C2929.78 164.115 2885.79 173.217 2841.54 181.83C2798.18 190.241 2754.67 198.34 2711.06 206.221C2451.18 253.163 2188.05 292.848 1924.09 329.439C1871.77 336.65 1819.29 343.352 1766.8 350.045C1762.18 350.639 1759.87 350.934 1755.24 351.527C1666.55 362.906 1575.47 366.455 1485.2 368.147C1485.15 368.147 1485.13 368.143 1485.08 368.139H1485.07ZM633.842 291.682C660.327 309.843 695.268 321.866 731.527 330.436C799.565 346.522 873.228 352.26 945.201 355.825C1122.26 364.207 1300.21 370.445 1477.83 367.52C1397.63 341.769 1314.01 323.89 1224.94 315.366C1029.16 297.466 831.529 292.09 633.902 291.678H633.842V291.682Z" fill="url(#paint24_linear_1779_1730)" style=""/>\n<path d="M4094.17 462.381C4094.17 463.438 4094.17 464.478 4094.03 465.53C4092.95 473.411 4090.4 480.942 4087.24 488.595C4086.85 489.58 4086.65 490.068 4086.26 491.053C4060.7 554.473 3953.87 579.571 3861.08 585.742C3835.97 587.258 3809.64 583.427 3785.3 580.009C3744.56 574.283 3704.45 566.714 3664.64 558.821C3542.38 534.582 3422.04 506.406 3301.91 478.273C3274.53 471.845 3247.19 465.357 3219.85 458.853C3125.32 436.382 3030.75 413.624 2934.02 395.156C2851.47 379.395 2766.16 366.177 2679.61 364.417C2629.82 363.617 2579.68 365.196 2531.57 373.948C2495.22 380.557 2461.55 391.288 2428.1 402.25C2395.39 412.989 2362.43 423.1 2328.04 431.516C2306.61 437.123 2288.68 445.467 2270.67 454.581C2232.94 473.768 2195.26 485.989 2146.43 489.357C2115.02 491.213 2083.55 489.643 2052.38 486.957C1961.63 478.563 1871.84 466.191 1785 447.365C1720 433.271 1657.41 415.464 1595.86 396.217C1584.58 392.685 1573.33 389.12 1562.08 385.546C1548.12 381.121 1534.15 376.705 1520.12 372.348C1477.29 373.022 1434.45 373.144 1391.61 372.87C1252.6 371.877 1113.74 366.61 975.179 359.719C900.916 355.863 824.303 349.767 754.794 331.809C718.654 322.472 684.346 309.257 660.105 289.56C635.85 289.396 611.595 289.274 587.34 289.165C548.484 288.988 509.595 288.975 470.766 288.041C471.065 287.75 471.212 287.603 471.512 287.312C510.134 288.238 548.824 288.251 587.466 288.428C611.368 288.537 635.277 288.651 659.179 288.815C648.333 279.335 639.838 269.375 632.081 258.775C617.7 239.124 601.754 225.754 564.636 226.095C531.593 226.697 497.997 238.215 469.967 248.246C428.907 262.938 391.05 281.158 357.847 302.341C348.959 308.521 341.442 315.042 334.398 322.11C332.667 323.84 330.929 325.541 329.198 327.224C328.186 328.184 327.68 328.664 326.661 329.624C296.927 358.01 263.444 393.329 203.589 395.577C184.554 396.293 166.298 393.881 148.148 390.492C149.686 390.315 150.452 390.227 151.983 390.046C168.402 393.119 185.107 395.493 202.351 394.858C259.935 392.681 293.365 356.663 321.834 329.51C322.846 328.551 323.352 328.071 324.371 327.107C326.102 325.427 327.84 323.722 329.571 322.004C336.628 314.915 344.165 308.378 353.08 302.181C385.378 281.276 422.988 263.401 463.029 248.848C493.09 237.92 528.677 225.973 564.203 225.366C603.539 225.025 621.355 237.554 636.848 258.699C644.685 269.337 653.234 279.343 664.139 288.866C858.618 290.297 1052.99 296.599 1245.59 314.414C1343.34 323.857 1434.36 344.16 1522.92 371.565C1615.01 369.881 1708.11 366.404 1798.52 354.533C1800.32 354.297 1801.23 354.179 1803.03 353.948C1858.47 346.707 1913.92 339.454 1969.17 331.649C2279.37 287.573 2588.94 239.174 2891.87 177.868C2936.17 168.872 2980.2 159.379 3024.15 149.748C3123.63 127.992 3221.43 106.914 3328.09 109.713C3432.07 113.3 3530.14 133.696 3619.89 166.734C3708.28 199.271 3786.72 241.33 3864.8 282.774C3869.41 285.212 3871.72 286.432 3876.32 288.874C3928.68 316.688 3981.54 344.901 4026.61 377.551C4058.65 400.76 4094.09 430.038 4094.13 462.411C4094.15 462.398 4094.16 462.394 4094.19 462.381H4094.17ZM1525.25 372.251C1539.02 376.537 1552.74 380.873 1566.46 385.222C1577.71 388.796 1588.96 392.361 1600.24 395.893C1661.59 415.077 1723.96 432.829 1788.75 446.885C1875.17 465.635 1964.53 477.961 2054.85 486.318C2084.61 488.885 2114.69 490.439 2144.69 488.662C2192.38 485.332 2229.2 473.108 2266.02 454.358C2284.21 445.159 2302.3 436.761 2323.94 431.103C2358.23 422.717 2391.08 412.627 2423.69 401.921C2457.28 390.913 2491.11 380.267 2527.59 373.615C2577.15 364.581 2628.87 362.847 2680.17 363.672C2767.51 365.44 2853.6 378.659 2936.92 394.533C3034.04 413.039 3128.98 435.877 3223.87 458.441C3251.2 464.945 3278.54 471.428 3305.91 477.856C3420.12 504.604 3534.51 531.286 3650.51 554.776C3692.68 563.313 3735.12 571.539 3778.21 578.009C3804.04 581.89 3832.41 586.593 3859.21 585.052C3950.35 578.956 4056.3 553.184 4081.34 490.995C4081.74 490.009 4081.94 489.521 4082.33 488.536C4085.5 480.9 4088.03 473.381 4089.08 465.509C4091.66 432.838 4056.06 402.751 4024.1 379.349C3978.55 345.996 3924.79 317.311 3871.58 289.034C3866.98 286.597 3864.67 285.376 3860.07 282.938C3782.25 241.629 3704.08 199.738 3616.07 167.214C3527.23 134.382 3430.12 113.961 3327.07 110.395C3222.51 107.204 3125.41 128.83 3028.03 150.126C2984.02 159.754 2939.95 169.264 2895.61 178.268C2592.49 239.612 2282.74 288.041 1972.36 332.15C1917.07 339.971 1861.58 347.225 1806.1 354.478C1804.29 354.714 1803.38 354.832 1801.57 355.063C1710.88 366.985 1617.5 370.525 1525.12 372.247H1525.24L1525.25 372.251ZM665.105 289.594C689.213 309.076 723.222 322.181 759.048 331.434C827.698 349.165 903.366 355.206 976.716 359.016C1114.86 365.878 1253.31 371.136 1391.91 372.129C1433.9 372.395 1475.89 372.281 1517.88 371.649C1430.16 344.526 1339.97 324.396 1243.16 315.046C1051.71 297.331 858.491 291.05 665.171 289.607C665.145 289.607 665.131 289.602 665.111 289.598L665.105 289.594Z" fill="url(#paint25_linear_1779_1730)" style=""/>\n<path d="M4130.16 457.346C4130.16 459.653 4129.98 461.939 4129.6 464.221C4127.81 472.27 4124.48 479.86 4120.63 487.606C4120.21 488.448 4120 488.873 4119.58 489.715C4088.29 552.944 3978.09 577.495 3883.52 583.781C3855.37 585.422 3825.85 580.994 3798.59 577.154C3755.79 571.126 3713.59 563.368 3671.67 555.256C3556.55 532.969 3443.04 507.362 3329.74 481.662C3300.89 475.103 3272.09 468.46 3243.28 461.809C3151.77 440.676 3060.23 419.316 2966.71 401.942C2885.87 386.926 2802.54 374.495 2718.02 372.487C2668.9 371.515 2619.47 372.828 2571.69 380.646C2535.06 386.64 2500.62 396.419 2466.38 406.413C2432.85 416.196 2399.14 425.428 2364.21 433.052C2342.47 438.125 2323.59 445.744 2304.64 454.075C2265.84 471.167 2227.35 482.377 2179.76 485.459C2147.94 487.223 2116.09 485.61 2084.54 482.87C1993.59 474.408 1903.63 462.103 1816.25 443.913C1749.7 430.059 1685.28 412.728 1621.76 394.104C1610.02 390.648 1598.28 387.175 1586.55 383.685C1578.39 381.26 1570.22 378.84 1562.05 376.415C1376.8 379.42 1191.2 372.491 1006.65 362.897C931.206 358.806 852.649 352.428 782.794 332.806C747.067 322.775 713.824 308.445 692.133 287.51C665.694 287.182 639.249 286.912 612.81 286.66C575.172 286.293 537.495 286.07 499.884 285.014C500.231 284.723 500.404 284.576 500.75 284.285C538.174 285.35 575.665 285.557 613.116 285.923C639.189 286.176 665.261 286.445 691.327 286.765C682.126 277.175 675.115 267.219 668.863 256.741C656.739 236.375 642.378 222.171 604.634 222.407C570.339 222.912 535.678 235.419 507.002 246.146C466.675 261.229 428.904 279.545 395.867 300.564C386.686 306.778 378.67 313.337 371.12 320.379C369.076 322.278 366.972 324.16 364.928 326.012C329.834 356.958 290.179 394.302 223.972 396.794C203.659 397.564 183.985 395.148 164.57 391.578C166.108 391.397 166.874 391.304 168.405 391.123C186.175 394.373 204.178 396.764 222.794 396.087C286.757 393.666 326.405 355.678 360.161 325.898C362.265 324.046 364.309 322.173 366.353 320.274C374.043 313.248 381.992 306.652 391.227 300.413C423.291 279.84 460.429 261.995 499.512 247.097C530.438 235.31 567.343 222.209 604.454 221.687C644.342 221.047 660.794 235.028 673.757 256.691C680.075 267.207 687.093 277.213 696.34 286.845C886.205 289.299 1075.88 296.477 1263.87 314.086C1369.86 324.421 1468.04 347.086 1564.83 375.644C1658.47 373.982 1753.22 370.458 1845.07 358.103C1902.67 350.395 1960.26 342.691 2017.65 334.385C2330.2 288.92 2641.77 238.509 2946.16 174.328C2990.46 164.945 3034.5 155.081 3078.46 145.079C3178.23 122.389 3277.39 99.6773 3385.06 102.872C3492.74 106.51 3592.17 128.653 3684.03 163.842C3773.3 198.833 3851.97 242.921 3930.11 286.996C3978.43 314.284 4027.07 341.992 4068.2 373.771C4098.42 397.118 4130.12 425.912 4130.16 457.376V457.338V457.346ZM1567.13 376.318C1575.03 378.654 1582.93 380.995 1590.82 383.331C1602.55 386.813 1614.28 390.294 1626.03 393.746C1689.35 412.311 1753.56 429.592 1819.9 443.408C1906.88 461.527 1996.46 473.794 2087.01 482.217C2117.19 484.844 2147.65 486.419 2178.09 484.743C2224.59 481.699 2262.14 470.506 2300.03 453.81C2319.19 445.403 2338.28 437.733 2360.25 432.61C2395.04 425.016 2428.62 415.801 2462.03 406.068C2496.43 396.028 2531.02 386.303 2567.82 380.292C2617.1 372.243 2668.01 370.753 2718.69 371.75C2803.97 373.78 2888.02 386.223 2969.62 401.336C3063.53 418.731 3155.43 440.188 3247.31 461.4C3276.09 468.052 3304.9 474.694 3333.74 481.253C3444.87 506.465 3556.23 531.521 3669.06 553.551C3711.37 561.81 3753.94 569.741 3797.11 576.018C3824.14 579.946 3853.72 584.724 3881.71 583.111C3975.49 576.868 4083.8 552.271 4114.76 489.681C4115.18 488.839 4115.38 488.414 4115.8 487.572C4119.62 479.839 4122.93 472.244 4124.77 464.225C4130.14 432.059 4098.38 401.593 4068.24 377.619C4026.28 344.257 3975.6 315.488 3925.46 287.182C3848.31 243.674 3770.62 199.725 3682.33 165.302C3591.45 129.874 3491.18 107.217 3384.12 103.588C3278.32 100.452 3180.46 123.201 3082.46 145.483C3038.45 155.49 2994.39 165.374 2950.04 174.757C2645.45 238.981 2333.68 289.421 2020.93 334.916C1963.49 343.221 1905.86 350.942 1848.22 358.65C1756.07 371.043 1661.06 374.638 1567.11 376.347V376.318H1567.13ZM697.086 287.573C718.705 308.302 751.661 322.493 787.108 332.444C856.118 351.817 933.676 358.149 1008.2 362.194C1191.43 371.717 1375.7 378.616 1559.64 375.703C1463.7 347.418 1366.38 324.934 1261.34 314.696C1074.47 297.188 885.899 290.04 697.153 287.577H697.093L697.086 287.573Z" fill="url(#paint26_linear_1779_1730)" style=""/>\n<path d="M4166.5 452.274C4166.5 455.856 4166.06 459.401 4165.19 462.907C4162.63 471.142 4158.54 478.871 4153.94 486.738C4153.55 487.391 4153.34 487.719 4152.94 488.372C4115.91 551.336 4002.54 575.382 3906 581.806C3884.28 583.111 3861.88 580.653 3840.6 578.182C3803.95 573.93 3767.8 567.91 3731.94 561.583C3605.65 539.301 3481.43 512.182 3357.6 485.038C3327.45 478.407 3297.35 471.68 3267.26 464.949C3103.29 428.245 2932.23 385.264 2756.4 380.536C2707.48 379.391 2658.45 380.654 2610.61 387.629C2574.01 392.963 2539.15 401.648 2504.46 410.585C2470.21 419.4 2435.82 427.731 2400.44 434.559C2378.31 439.114 2358.48 446.035 2338.57 453.549C2298.93 468.595 2259.73 478.77 2213.26 481.548C2180.98 483.181 2148.72 481.548 2116.73 478.748C1953.38 463.463 1798.79 433.519 1647.65 391.961C1635.41 388.585 1623.18 385.192 1610.96 381.791C1609.48 381.374 1607.93 380.961 1606.44 380.544C1416.83 383.731 1226.83 376.293 1037.99 366.063C961.527 361.74 881.125 355.097 811.15 333.821C775.803 323.074 743.712 307.611 724.65 285.544C695.881 285.026 667.106 284.576 638.33 284.134C601.844 283.587 565.326 283.17 528.873 281.979C529.266 281.688 529.466 281.541 529.865 281.25C566.131 282.437 602.464 282.85 638.769 283.397C667.172 283.827 695.575 284.264 723.971 284.778C716.221 275.07 710.582 265.098 705.655 254.7C695.828 233.921 682.765 218.589 644.582 218.711C610.606 219.123 576.165 231.921 547.928 242.639C506.516 258.362 468.319 277.428 433.831 298.775C424.344 305.035 415.968 311.657 407.779 318.607C405.362 320.695 402.952 322.749 400.475 324.779C360.614 357.463 314.934 395.333 244.113 397.99C222.255 398.469 201.682 396.415 180.689 392.631C182.201 392.445 182.953 392.353 184.464 392.168C203.553 395.611 222.987 398.006 242.941 397.27C311.645 394.672 357.305 356.284 395.714 324.644C398.191 322.611 400.601 320.56 403.018 318.472C411.081 311.518 419.417 304.673 429.131 298.594C462.194 277.76 499.778 259.364 539.533 243.923C570.266 231.984 607.291 218.378 644.462 217.962C661.426 217.73 679.909 219.856 691.74 228.174C702.007 235.39 706.174 245.569 710.482 254.628C715.469 265.077 721.115 275.104 728.925 284.858C913.982 288.331 1098.78 296.325 1281.97 313.699C1396.92 325.01 1503.16 350.235 1609.11 379.736C1703.51 378.01 1799.02 374.318 1891.52 361.597C1949.76 353.636 2007.98 345.642 2066 337.058C2380.87 290.213 2694.56 237.789 3000.34 170.733C3044.58 160.992 3088.55 150.762 3132.46 140.406C3233.32 116.617 3332.59 93.2996 3441.89 95.9686C3549.8 99.5552 3650.1 122.359 3741.43 158.34C3830.22 194.156 3907.74 239.359 3983.86 285.064C4027.73 311.476 4071.59 338.389 4108.48 368.875C4137.15 392.572 4166.36 421.307 4166.4 452.257C4166.45 452.257 4166.48 452.261 4166.52 452.265L4166.5 452.274ZM1611.63 380.456C1612.8 380.789 1613.99 381.109 1615.16 381.441C1627.36 384.843 1639.57 388.231 1651.8 391.603C1802.39 433.014 1956.38 462.886 2119.14 478.117C2149.79 480.799 2180.72 482.419 2211.64 480.849C2257.06 478.1 2295.3 467.959 2334.05 453.276C2354.2 445.66 2374.26 438.693 2396.66 434.096C2431.92 427.297 2466.18 418.992 2500.3 410.21C2535.53 401.143 2570.93 392.344 2608.08 386.947C2657.02 379.837 2707.25 378.625 2757.26 379.799C2934.24 384.561 3106.22 427.584 3271.28 464.524C3301.37 471.259 3331.46 477.982 3361.6 484.613C3469.47 508.263 3577.59 531.66 3687.04 552.233C3730.49 560.4 3774.2 568.221 3818.5 574.363C3845.97 578.173 3875.9 582.77 3904.27 581.12C3999.99 574.747 4111.55 550.633 4148.19 488.313C4148.58 487.66 4148.78 487.332 4149.17 486.675C4153.77 478.82 4157.87 471.104 4160.44 462.882C4168.53 430.893 4139.36 399.547 4110.73 374.781C4072.71 341.887 4025.92 313.282 3979.39 285.271C3903.29 239.599 3825.83 194.408 3737.08 158.622C3646.85 123.087 3547.83 100.267 3441.19 96.7137C3334.06 93.628 3235.38 117.548 3136.68 140.831C3092.77 151.204 3048.79 161.434 3004.52 171.175C2698.54 238.269 2384.65 290.735 2069.56 337.614C2011.51 346.21 1953.24 354.204 1894.96 362.173C1802.2 374.916 1706.46 378.684 1611.81 380.456C1611.73 380.456 1611.7 380.46 1611.63 380.465V380.456ZM729.644 285.637C748.679 307.498 780.497 322.821 815.578 333.484C884.714 354.503 964.097 361.096 1039.64 365.373C1227.11 375.531 1415.72 382.927 1603.95 379.854C1498.89 350.588 1393.46 325.578 1279.48 314.355C1097.35 297.083 913.623 289.114 729.644 285.645V285.637Z" fill="url(#paint27_linear_1779_1730)" style=""/>\n<path d="M4203.24 446.464C4202.96 451.676 4202.19 456.462 4200.76 461.598C4197.37 470.06 4192.44 477.97 4187.04 485.998C4186.74 486.419 4186.59 486.629 4186.29 487.046C4143.24 550.158 4028.03 573.24 3928.5 579.845C3906.53 581.162 3883.88 578.809 3862.28 576.435C3825.57 572.398 3789.32 566.664 3753.33 560.606C3629.28 539.726 3507.17 514.148 3385.48 488.427C3354.19 481.796 3322.96 475.048 3291.73 468.283C3131.53 433.608 2965.73 393.839 2794.88 388.594C2746.53 387.276 2698.09 388.257 2650.52 394.323C2613.49 399.046 2577.82 406.83 2542.29 414.82C2507.4 422.663 2472.41 430.072 2436.62 436.096C2414.02 440.141 2393.23 446.346 2372.37 453.082C2332.09 466.128 2292.35 475.246 2246.91 477.717C2214.12 479.212 2181.37 477.532 2148.89 474.665C1984.22 459.169 1827.42 429.546 1673.56 389.852C1666.67 388.067 1659.77 386.287 1652.88 384.493C1605.29 385.276 1557.69 385.369 1510.08 384.965C1362.98 383.613 1216.03 377.514 1069.52 369.254C992.203 364.708 909.97 357.816 840.075 334.895C804.988 323.389 774.308 306.778 757.79 283.688C726.564 282.93 695.338 282.269 664.106 281.617C628.752 280.888 593.365 280.278 558.051 278.96C558.524 278.674 558.757 278.531 559.223 278.24C594.377 279.554 629.598 280.147 664.785 280.88C695.625 281.52 726.457 282.168 757.29 282.913C750.852 273.075 746.391 263.056 742.69 252.683C735.026 231.433 723.714 215.061 684.772 215.032C651.156 215.335 617.147 228.149 589.357 238.85C546.819 255.234 507.83 275.172 472.037 297.016C462.31 303.292 453.528 309.918 444.939 316.822C442.09 319.108 439.307 321.369 436.404 323.592C412.555 341.971 388.201 360.001 358.932 375.055C330.529 388.682 300.455 397.341 264.696 399.236C241.499 399.758 219.628 397.674 197.311 393.725C198.822 393.54 199.574 393.447 201.086 393.262C221.545 396.895 242.238 399.307 263.584 398.516C337.314 395.758 388.347 356.852 431.763 323.44C434.606 321.221 437.456 318.961 440.299 316.671C448.908 309.754 457.723 303.12 467.463 296.83C501.525 275.702 539.462 256.649 579.909 240.631C610.516 228.511 647.547 214.594 684.839 214.287C701.87 214.11 720.139 216.341 731.384 225.076C741.198 232.7 744.241 243.304 747.643 252.629C751.418 263.064 755.899 273.138 762.43 283.031C942.521 287.502 1122.3 296.266 1300.57 313.375C1419.02 325.145 1529.43 350.719 1639.76 379.534C1645.02 380.915 1650.34 382.296 1655.66 383.685C1750.15 381.879 1845.84 378.158 1938.38 365.175C1997.27 356.953 2056.14 348.673 2114.79 339.812C2432.03 291.598 2747.86 237.154 3055.01 167.209C3099.12 157.127 3142.95 146.569 3186.69 135.872C3287.9 111.149 3388.78 86.0464 3499.21 89.1363C3606.29 92.5673 3706.7 114.997 3796.58 151.57C3886.28 188.064 3963.52 235.36 4038.09 283.195C4078.12 308.938 4118.03 335.181 4151.2 364.666C4177.87 388.379 4203.57 416.483 4203.6 446.46C4203.46 446.46 4203.38 446.464 4203.24 446.469L4203.24 446.464ZM1658.01 384.38C1664.54 386.08 1671.07 387.781 1677.62 389.465C1830.96 429.015 1987.19 458.576 2151.3 474.021C2182.46 476.77 2213.88 478.433 2245.35 477.002C2289.71 474.564 2328.56 465.526 2367.85 452.754C2388.99 445.938 2410.05 439.674 2432.95 435.586C2468.58 429.588 2503.42 422.208 2538.14 414.391C2574.24 406.283 2610.46 398.398 2648.09 393.628C2696.72 387.465 2746.24 386.501 2795.67 387.857C2967.87 393.708 3133.91 432.854 3295.53 467.845C3326.75 474.602 3357.97 481.354 3389.26 487.989C3493.42 510.031 3597.88 531.698 3703.51 550.785C3747.89 558.804 3792.51 566.466 3837.69 572.486C3866.19 576.283 3897.18 580.876 3926.53 579.154C4024.42 572.629 4139.02 548.958 4181.34 486.962C4181.64 486.541 4181.79 486.33 4182.08 485.913C4187.52 477.907 4192.43 470.005 4195.83 461.556C4206.53 430.059 4181.55 398.411 4154.77 372.896C4120.29 340.051 4076.51 311.388 4032.96 283.372C3959.12 235.983 3882.72 189.774 3794.44 153.158C3704.43 116.71 3605.18 93.3587 3497.92 89.8688C3389.4 86.8378 3289.83 111.97 3190.4 136.264C3146.62 146.948 3102.79 157.536 3058.66 167.618C2751.33 237.6 2435.32 292.082 2117.89 340.334C2059.2 349.199 2000.29 357.492 1941.36 365.722C1848.64 378.734 1752.77 382.527 1658.08 384.384H1658.02L1658.01 384.38ZM762.603 283.793C779.095 306.677 809.535 323.133 844.356 334.554C913.433 357.206 994.633 364.047 1071.06 368.543C1217.09 376.773 1363.56 382.852 1510.2 384.207C1556.82 384.603 1603.43 384.523 1650.03 383.773C1645.07 382.477 1640.14 381.193 1635.18 379.905C1525.34 351.224 1415.45 325.726 1297.52 314.002C1120.29 296.986 941.576 288.255 762.544 283.789C762.57 283.789 762.583 283.793 762.603 283.797V283.793Z" fill="url(#paint28_linear_1779_1730)" style=""/>\n<path d="M4240.3 440.529C4239.97 447.319 4238.69 453.663 4236.23 460.276C4231.96 469.033 4226.14 477.153 4219.77 485.375C4219.67 485.505 4219.62 485.568 4219.53 485.695C4170.78 548.381 4052.7 571.105 3950.86 577.858C3928.93 579.192 3906.34 576.986 3884.74 574.768C3847.68 570.958 3811.05 565.464 3774.67 559.646C3652.84 540.155 3532.81 516.101 3413.22 491.79C3380.93 485.202 3348.71 478.492 3316.49 471.76C3159.69 439.013 2999.36 402.894 2833.18 396.63C2785.32 395.131 2737.44 395.838 2690.14 401.012C2652.55 405.121 2616.03 411.999 2579.61 419.055C2544.21 425.908 2508.74 432.387 2472.64 437.603C2449.51 441.156 2427.75 446.645 2405.93 452.594C2365.21 463.737 2324.97 471.769 2280.45 473.89C2247.03 475.006 2213.99 473.486 2180.9 470.544C2015.89 454.922 1857.72 426.014 1702.14 388.387C1501.54 392.269 1300.44 384.064 1100.78 372.39C1022.73 367.633 938.717 360.498 869.108 335.964C834.207 323.663 805.105 305.902 791.09 281.89C757.354 280.867 723.605 279.949 689.863 279.053C655.554 278.144 621.226 277.348 586.964 275.904C587.483 275.622 587.743 275.479 588.262 275.197C622.378 276.632 656.566 277.424 690.728 278.325C724.045 279.209 757.354 280.114 790.657 281.124C785.411 271.109 782.122 261.018 779.399 250.629C773.859 229.008 764.472 211.466 724.637 211.323C691.394 211.55 657.645 224.647 630.341 235.306C586.771 252.304 546.89 272.928 509.865 295.218C499.931 301.499 490.763 308.104 481.775 314.928C478.493 317.433 475.217 319.908 471.875 322.358C422.526 358.309 365.008 397.434 284.76 400.431C260.332 401.012 236.903 398.895 213.354 394.786C214.838 394.597 215.584 394.504 217.069 394.314C239.073 398.137 260.738 400.204 283.588 399.711C362.258 396.777 418.911 357.362 467.174 322.207C470.517 319.769 473.799 317.29 477.075 314.785C486.083 307.94 495.258 301.326 505.231 295.037C540.904 273.559 579.361 253.71 621.026 237.036C651.12 224.996 687.859 210.797 724.704 210.586C741.701 210.452 760.017 212.792 770.564 221.931C779.871 229.997 781.795 241.035 784.292 250.608C787.069 261.056 790.384 271.206 795.677 281.284C970.655 286.719 1145.26 296.186 1318.47 313.029C1438.24 325.044 1551.01 350.037 1663.69 377.602C1676.94 380.848 1690.2 384.089 1703.47 387.31C1703.89 387.415 1704.33 387.528 1704.82 387.629C1798.38 385.689 1893.09 381.774 1984.63 368.715C2044.14 360.207 2103.64 351.679 2162.9 342.523C2482.49 292.941 2800.45 236.493 3108.92 163.656C3152.82 153.25 3196.43 142.372 3239.97 131.368C3341.98 105.609 3443.87 79.2519 3555.79 82.2871C3666.58 85.7685 3770.08 110.303 3861.65 149.348C3947.83 186.103 4021.48 233.142 4091.58 281.318C4128.72 306.938 4165.46 333.24 4195.31 362.527C4218.87 385.638 4240.35 412.383 4240.38 440.533H4240.33L4240.3 440.529ZM1707.45 388.295C1862.15 425.66 2019.42 454.391 2183.47 469.921C2215.23 472.75 2247.24 474.463 2279.33 473.192C2322.8 471.087 2362.01 463.126 2401.77 452.244C2423.9 446.22 2445.96 440.676 2469.4 437.072C2505.32 431.886 2540.61 425.424 2575.83 418.6C2612.8 411.444 2649.88 404.464 2688.04 400.313C2736.39 395.055 2785.36 394.378 2834.27 395.914C3001.48 402.22 3162.68 438.382 3320.44 471.331C3352.65 478.062 3384.87 484.773 3417.16 491.352C3535.49 515.411 3654.27 539.149 3774.76 558.577C3810.44 564.332 3846.35 569.779 3882.66 573.694C3904.29 576.026 3927.1 578.506 3949.11 577.171C4050.13 570.457 4166.49 547.695 4214.79 485.602C4214.9 485.471 4214.95 485.408 4215.05 485.282C4221.38 477.069 4227.2 468.953 4231.5 460.222C4244.29 430.232 4224.74 399.177 4201.08 373.502C4169.98 339.757 4128.41 310.137 4086.85 281.465C4016.98 233.449 3943.65 186.578 3857.88 149.84C3767.27 111.027 3664.75 86.4589 3554.95 82.9985C3444.95 80.0097 3344.36 106.421 3244.14 131.738C3200.59 142.747 3156.96 153.637 3113.03 164.048C2804.37 236.939 2486.18 293.425 2166.39 343.04C2107.07 352.205 2047.5 360.738 1987.94 369.254C1896.19 382.266 1801.31 386.253 1707.58 388.282C1707.53 388.282 1707.5 388.286 1707.44 388.29L1707.45 388.295ZM796.084 282.063C810.045 305.869 838.987 323.474 873.595 335.673C942.418 359.93 1025.39 367.01 1102.56 371.713C1300.8 383.315 1500.31 391.229 1699.47 387.735C1699.47 387.735 1699.41 387.714 1699.35 387.705C1686.06 384.481 1672.78 381.235 1659.51 377.998C1547.33 350.542 1435.03 325.621 1315.78 313.652C1143.57 296.919 969.982 287.472 796.024 282.063H796.084Z" fill="url(#paint29_linear_1779_1730)" style=""/>\n<path d="M4278.04 433.667C4277.63 442.415 4275.69 450.535 4271.85 458.963C4266.83 467.845 4260.22 476.147 4252.93 484.364C4198.59 546.571 4077.67 568.979 3973.38 575.908C3950.72 577.298 3927.42 575.197 3905.06 573.033C3868.86 569.531 3833.03 564.475 3797.43 559.082C3677.4 540.892 3559.03 518.185 3441.12 495.2C3407.98 488.717 3374.92 482.095 3341.87 475.444C3188.79 444.688 3033.06 411.427 2871.66 404.708C2783.7 401.589 2701.52 409.469 2616.67 423.34C2580.91 429.2 2545.1 434.74 2508.82 439.156C2485.08 442.217 2462.36 447.007 2439.58 452.164C2410.35 458.799 2380.94 464.831 2350.16 467.816C2304.62 472.232 2258.54 470.544 2213.11 466.465C2056.28 451.52 1904.23 425.706 1754.87 392.277C1699.5 393.397 1644.12 393.531 1588.73 392.988C1436.26 391.317 1284.03 384.767 1132.27 375.585C1028.55 369.052 860.435 356.848 824.928 280.274C788.656 278.935 752.376 277.723 716.091 276.54C682.754 275.453 649.391 274.473 616.095 272.898C616.661 272.616 616.947 272.473 617.52 272.191C650.69 273.753 683.926 274.729 717.143 275.811C752.976 276.973 788.802 278.169 824.622 279.486C820.474 269.286 818.19 259.074 816.393 248.625C812.851 227.139 805.593 207.349 764.727 207.648C731.91 207.774 698.66 220.879 671.849 231.483C627.127 249.168 586.334 270.646 547.971 293.45C537.857 299.714 528.397 306.281 519.075 313.017C515.3 315.766 511.525 318.481 507.69 321.154C479.128 340.927 449.673 359.993 415.245 375.724C381.569 390.223 345.942 399.619 305.102 401.652C279.343 402.267 254.595 400.141 229.734 395.868C231.219 395.678 231.965 395.586 233.45 395.396C256.712 399.404 279.869 401.509 303.99 400.936C387.588 397.636 449.74 357.879 502.923 320.994C506.758 318.317 510.533 315.606 514.308 312.857C523.663 306.121 533.144 299.541 543.264 293.261C579.849 271.505 618.771 251.05 661.036 233.828C691.037 221.603 727.829 207.012 764.84 206.898C781.838 206.806 800.181 209.273 810.021 218.804C818.809 227.32 819.608 238.783 821.213 248.596C823.011 259.124 825.321 269.396 829.569 279.659C999.313 286.02 1168.64 296.14 1336.7 312.676C1457.79 324.943 1572.87 349.292 1687.78 375.661C1701.63 378.831 1715.47 382.001 1729.32 385.163C1738.6 387.28 1747.9 389.381 1757.21 391.46C1848.82 389.347 1941.56 385.293 2031.13 372.272C2091.28 363.512 2151.42 354.689 2211.32 345.255C2533.38 294.305 2853.32 235.895 3163.17 160.108C3206.81 149.398 3250.14 138.221 3293.41 126.927C3396.24 100.094 3499.17 72.4406 3612.64 75.4295C3836.52 82.3039 4006.35 176.782 4145.32 279.423C4178.71 304.189 4211.62 329.607 4237.9 357.682C4259.27 380.494 4278.31 406.59 4278.04 433.658V433.679V433.667ZM1760.18 392.151C1908.65 425.336 2059.78 450.964 2215.64 465.816C2259.33 469.736 2303.63 471.466 2347.44 467.235C2377.79 464.301 2406.75 458.272 2435.56 451.735C2458.69 446.506 2481.75 441.669 2505.85 438.558C2541.94 434.168 2577.57 428.653 2613.14 422.831C2699.55 408.682 2783.26 400.797 2872.84 403.984C3035.17 410.72 3191.72 444.044 3345.69 474.985C3378.75 481.624 3411.81 488.258 3444.94 494.733C3535.1 512.329 3625.47 529.551 3716.63 544.971C3766.77 553.454 3817.18 561.532 3868.1 567.914C3901.33 572.078 3937.47 577.293 3971.58 575.218C4075.08 568.344 4194.25 545.893 4248.15 484.263C4255.44 476.058 4262.07 467.774 4267.09 458.9C4282.29 429.36 4266.99 398.061 4245.27 371.519C4217.79 337.909 4179.25 308.239 4140.62 279.579C4002.79 177.751 3834.16 82.9985 3611.88 76.162C3500.35 73.2278 3398.7 100.949 3297.67 127.301C3254.36 138.6 3210.98 149.785 3167.31 160.499C2857.25 236.329 2537.11 294.784 2214.83 345.764C2154.87 355.198 2094.68 364.03 2034.47 372.799C1944.78 385.84 1851.96 389.974 1760.24 392.138C1760.21 392.146 1760.2 392.151 1760.18 392.159L1760.18 392.151ZM829.808 280.455C865.309 356.212 1031.06 368.408 1134 374.899C1285.27 384.055 1437.01 390.576 1588.97 392.248C1643.24 392.774 1697.51 392.652 1751.76 391.587C1742.91 389.595 1734.06 387.6 1725.22 385.592C1711.38 382.435 1697.54 379.273 1683.71 376.091C1569.23 349.826 1454.6 325.536 1333.98 313.316C1166.9 296.872 998.561 286.799 829.815 280.446V280.455H829.808Z" fill="url(#paint30_linear_1779_1730)" style=""/>\n<path d="M4316.11 426.851C4315.64 437.607 4312.93 447.483 4307.38 457.649C4301.96 466.624 4294.09 474.854 4286.22 483.03C4226.32 544.693 4102.73 566.841 3995.83 573.938C3937.87 577.483 3874.88 566.176 3818.99 558.19C3701.14 541.347 3584.81 520.159 3468.95 498.58C3435.08 492.241 3401.28 485.749 3367.49 479.241C3218.08 450.455 3066.72 419.893 2910.03 412.757C2822.23 409.267 2738.82 416.024 2653.18 427.596C2617.22 432.463 2581.23 437.072 2544.9 440.672C2520.46 443.248 2496.75 447.31 2472.99 451.693C2442.4 457.346 2411.7 462.558 2379.97 464.936C2335.05 468.308 2289.92 466.406 2245.29 462.356C2097.46 448.178 1952.98 425.306 1810.91 396.024C1595.11 401.071 1378.39 392.294 1163.69 378.764C1059.22 371.969 887.409 358.629 858.953 278.771C820.17 277.066 781.368 275.517 742.559 274.005C710.068 272.738 677.551 271.572 645.106 269.863C645.752 269.581 646.072 269.442 646.718 269.164C679.015 270.869 711.393 272.031 743.737 273.285C782.047 274.78 820.35 276.308 858.64 277.984C855.491 267.564 854.106 257.188 853.26 246.609C851.636 224.988 846.616 203.762 804.691 203.969C772.353 203.981 739.623 217.12 713.364 227.644C667.47 246.036 625.692 268.356 585.957 291.69C575.711 297.912 565.997 304.408 556.383 311.021C552.042 314.019 547.707 317.024 543.266 319.963C512.507 340.439 480.296 360.056 443.397 376.095C407.191 390.997 368.648 400.81 325.339 402.902C298.221 403.555 272.155 401.395 245.949 396.967C247.434 396.777 248.18 396.684 249.664 396.495C274.246 400.658 298.714 402.793 324.167 402.187C412.891 397.808 480.069 358.742 538.506 319.807C542.92 316.856 547.275 313.867 551.622 310.874C561.236 304.252 570.957 297.748 581.197 291.513C618.368 269.665 657.457 248.869 699.855 231.159C729.982 218.572 767.313 203.249 804.877 203.244C821.755 203.202 840.431 205.766 849.419 215.684C857.608 224.718 857.322 236.547 858.087 246.613C858.94 257.276 860.344 267.72 863.594 278.215C1028 285.523 1192.04 296.153 1354.89 312.368C1477.29 324.892 1594.58 348.542 1711.66 373.737C1726.14 376.844 1740.62 379.959 1755.11 383.049C1774.41 387.166 1793.73 391.233 1813.09 395.232C1901.67 392.908 1991.12 388.589 2077.67 375.846C2138.46 366.825 2199.25 357.753 2259.76 348.008C2584.23 295.706 2906.31 235.297 3217.44 156.597C3260.77 145.605 3303.79 134.142 3346.75 122.587C3450.46 94.6888 3554.46 65.6756 3669.55 68.6097C3893.03 73.9982 4066.5 172.45 4199.09 277.575C4250.94 319.108 4316.66 370.984 4316.12 426.876V426.855L4316.11 426.851ZM1816.23 395.885C1957.38 424.94 2100.93 447.635 2247.77 461.724C2291.1 465.652 2334.93 467.471 2378.53 464.174C2409.46 461.834 2439.4 456.74 2469.23 451.225C2493.37 446.776 2517.47 442.667 2542.3 440.053C2578.43 436.466 2614.22 431.882 2649.97 427.045C2737.11 415.27 2822.01 408.484 2911.32 412.041C3068.9 419.206 3221.06 449.84 3371.32 478.778C3405.08 485.286 3438.87 491.777 3472.72 498.109C3587.35 519.456 3702.45 540.345 3819 557.146C3855.11 562.353 3891.45 567.228 3928.13 570.596C3949.68 572.574 3972.16 574.574 3993.98 573.248C4100.05 566.201 4222.07 544.049 4281.45 482.916C4289.33 474.758 4297.19 466.54 4302.61 457.582C4340.95 393.805 4252.49 324.219 4194.39 277.693C4062.49 172.522 3891.42 76.002 3668.82 69.3212C3555.65 66.4417 3452.88 95.5055 3350.96 122.928C3307.96 134.492 3264.91 145.95 3221.56 156.959C2910.24 235.718 2587.95 296.161 2263.28 348.5C2202.7 358.246 2141.86 367.326 2081.01 376.356C1994.4 389.107 1904.92 393.502 1816.29 395.876H1816.23L1816.23 395.885ZM863.78 278.99C892.356 358.01 1061.72 371.325 1165.42 378.073C1378.46 391.498 1593.46 400.229 1807.58 395.354C1788.7 391.443 1769.85 387.474 1751.02 383.462C1736.54 380.363 1722.06 377.257 1707.59 374.15C1590.9 349.047 1474.02 325.448 1352.04 312.97C1190.18 296.851 1027.13 286.277 863.713 278.977C863.74 278.981 863.753 278.985 863.773 278.99H863.78Z" fill="url(#paint31_linear_1779_1730)" style=""/>\n<path d="M4355.27 419.451C4354.75 432.299 4351.05 444.503 4342.96 456.336C4336.35 465.277 4328.25 473.499 4319.58 481.687C4253.77 543.157 4128.58 564.647 4018.31 571.964C3960.07 575.525 3897.01 564.892 3840.63 557.323C3724.97 541.797 3610.68 522.134 3496.87 501.957C3462.35 495.806 3427.91 489.492 3393.47 483.156C3247.71 456.336 3100.54 428.341 2948.47 420.793C2860.59 416.916 2775.78 422.486 2689.25 431.806C2653.24 435.675 2617.22 439.367 2580.97 442.183C2555.79 444.258 2531.08 447.601 2506.35 451.2C2429.48 462.44 2355.95 465.437 2277.48 458.235C2139.73 444.936 2004.29 424.898 1870.83 399.644C1803.12 401.526 1735.37 401.766 1667.62 401.033C1509.79 399.092 1352.14 392.096 1195.13 381.921C1089.61 374.849 914.695 360.3 893.176 277.373C851.963 275.281 810.724 273.365 769.485 271.475C737.733 270.031 705.955 268.68 674.256 266.824C674.949 266.546 675.295 266.411 675.987 266.133C707.586 267.981 739.258 269.333 770.903 270.764C811.63 272.616 852.343 274.515 893.043 276.577C890.819 265.906 890.34 255.318 890.32 244.571C890.44 222.891 887.883 200.18 844.839 200.256C813.188 199.961 780.683 213.377 755.197 223.729C708.092 242.854 665.221 265.998 624.062 289.889C613.775 296.043 603.888 302.412 594.114 308.891C589.148 312.196 584.161 315.496 579.081 318.733C514.852 359.458 440.895 400.389 345.746 404.102C317.29 404.83 289.893 402.645 262.402 398.023C263.86 397.83 264.593 397.733 266.051 397.539C291.97 401.871 317.763 404.014 344.575 403.369C438.212 398.865 510.917 358.806 574.38 318.548C579.454 315.311 584.44 312.015 589.414 308.719C599.208 302.231 609.108 295.854 619.421 289.699C653.244 269.947 688.537 251.029 726.068 234.144C759.145 219.262 802.442 199.186 845.146 199.519C862.077 199.519 880.786 202.238 889.061 212.518C896.711 222.024 895.307 234.253 895.2 244.571C895.22 255.407 895.706 266.07 897.983 276.826C1056.99 284.993 1215.62 296.11 1373.19 311.998C1496.93 324.783 1616.34 347.692 1735.55 371.729C1750.71 374.781 1765.85 377.838 1781.01 380.873C1811.59 386.977 1842.2 392.997 1872.91 398.831C1957.1 396.238 2042.12 391.768 2124.3 379.37C2185.76 370.096 2247.16 360.704 2308.34 350.706C2635.21 297.053 2959.46 234.67 3271.81 153.018C3314.78 141.758 3357.43 130.05 3400.02 118.242C3504.63 89.2415 3609.82 58.8516 3726.6 61.7311C3837.63 65.002 3940.44 90.7233 4030.72 131.069C4117.7 170.337 4189.93 221.502 4253.04 275.66C4299.71 316.292 4355.55 366.762 4355.43 419.438C4355.36 419.438 4355.33 419.442 4355.25 419.446L4355.27 419.451ZM1876.14 399.505C2008.67 424.54 2143.17 444.422 2279.93 457.628C2356.39 464.629 2428.05 461.644 2502.93 450.691C2528.08 447.033 2553.2 443.652 2578.81 441.539C2614.85 438.739 2650.67 435.064 2686.46 431.217C2774.31 421.757 2860.65 416.163 2949.87 420.099C3102.74 427.676 3250.63 455.721 3397.17 482.684C3431.59 489.007 3466.01 495.33 3500.51 501.477C3613.51 521.511 3726.96 541.056 3841.77 556.59C3897.1 564.079 3959.23 574.776 4016.43 571.278C4126 564.374 4249.73 542.365 4314.8 481.561C4323.48 473.385 4331.59 465.181 4338.2 456.248C4380.96 394.129 4303.78 323.714 4248.15 275.79C4122.92 168.321 3947.86 67.6078 3725.67 62.4678C3610.84 59.6389 3506.89 90.1087 3404.1 118.608C3361.5 130.438 3318.82 142.141 3275.83 153.397C2963.25 235.091 2638.8 297.538 2311.68 351.22C2250.45 361.218 2188.99 370.631 2127.47 379.909C2045.3 392.311 1960.31 396.853 1876.14 399.497V399.505H1876.14ZM897.996 277.638C919.675 359.706 1092.2 374.23 1196.92 381.252C1353.41 391.41 1510.55 398.377 1667.87 400.309C1734.35 401.029 1800.85 400.806 1867.29 399.004C1837.11 393.258 1807.01 387.335 1776.95 381.336C1761.79 378.296 1746.62 375.244 1731.47 372.192C1612.65 348.227 1493.62 325.368 1370.3 312.629C1213.67 296.839 1056 285.763 897.937 277.634H897.996V277.638Z" fill="url(#paint32_linear_1779_1730)" style=""/>\n<path d="M4394.38 410.442C4393.83 426.157 4388.88 440.693 4378.54 455.023C4371.17 463.993 4362.36 472.211 4352.93 480.357C4281.72 541.212 4153.83 562.496 4040.77 569.998C3982.63 573.639 3920.03 563.852 3863.49 556.771C3749.57 542.504 3636.92 524.192 3524.72 505.35C3489.65 499.431 3454.65 493.322 3419.67 487.197C3277.58 462.343 3134.33 436.807 2986.9 428.855C2898.78 424.565 2812.45 428.847 2725.04 435.969C2689.08 438.895 2653.12 441.674 2617 443.711C2591.03 445.277 2565.35 447.887 2539.66 450.716C2462.28 459.266 2387.66 461.388 2309.6 454.147C2182.97 441.842 2057.92 424.469 1934.37 403.075C1858.65 405.601 1782.84 405.946 1707.05 405.079C1546.51 403.02 1386.17 395.754 1226.51 385.104C1119.63 377.732 942.318 361.9 927.464 276.14C883.941 273.626 840.398 271.286 796.842 269.004C766.309 267.4 735.749 265.881 705.262 263.94C690.601 271.867 676.167 279.941 661.885 288.142C651.619 294.17 641.692 300.388 631.811 306.668C626.086 310.314 620.34 313.943 614.547 317.551C545.018 360.035 466.095 400.692 365.8 405.348C336.012 406.114 307.303 403.913 278.494 399.126C279.952 398.932 280.685 398.836 282.143 398.646C309.38 403.172 336.518 405.34 364.688 404.632C463.552 400.002 541.436 359.206 609.907 317.374C615.699 313.774 621.445 310.146 627.171 306.504C637.031 300.207 646.978 293.993 657.245 287.956C700.541 263.094 745.223 238.551 794.618 218.585C820.631 208.069 852.928 195.444 885.073 195.865C902.164 195.92 920.733 198.765 928.256 209.445C935.327 219.481 932.864 231.976 931.978 242.593C931.133 253.66 930.806 264.576 932.225 275.63C1085.81 284.584 1239 296.144 1391.28 311.682C1516.27 324.711 1637.66 346.829 1758.84 369.742C1774.77 372.757 1790.71 375.762 1806.66 378.76C1849.68 386.821 1892.77 394.735 1936.04 402.271C2014.68 399.408 2093.87 394.66 2170.61 382.948C2232.71 373.434 2294.75 363.727 2356.55 353.455C2685.89 298.455 3012.31 234.076 3325.92 149.499C3368.43 137.99 3410.66 126.06 3452.82 114.032C3558.38 83.9246 3664.81 52.0909 3783.37 54.9156C4008.61 60.2661 4186.19 161.291 4306.7 273.807C4349.12 313.981 4394.34 360.494 4394.38 410.459V410.45V410.442ZM1939.7 402.885C2062.33 424.102 2186.46 441.307 2312.14 453.524C2388.36 460.588 2461.17 458.462 2536.74 450.122C2562.85 447.256 2588.93 444.599 2615.33 443.025C2651.21 441 2686.95 438.226 2722.68 435.321C2811.37 428.097 2898.95 423.799 2988.36 428.156C3136.53 436.138 3280.46 461.729 3423.25 486.709C3458.22 492.83 3493.19 498.93 3528.24 504.849C3639.24 523.493 3750.7 541.549 3863.36 555.769C3919.23 562.82 3981.35 572.827 4038.84 569.316C4151.16 561.861 4277.43 540.623 4348.06 480.222C4357.47 472.089 4366.28 463.884 4373.67 454.934C4420.98 393.893 4355.08 323.895 4301.83 273.913C4241.88 217.949 4170.76 165.888 4084.03 125.87C3994.91 85.1581 3893.05 58.818 3782.51 55.6354C3665.94 52.8612 3560.71 84.7876 3456.97 114.378C3414.79 126.422 3372.54 138.352 3329.99 149.865C3016.21 234.514 2689.58 298.931 2360.03 353.964C2298.16 364.245 2236.06 373.948 2173.9 383.479C2097.22 395.177 2018.1 399.989 1939.51 402.902C1939.59 402.902 1939.63 402.898 1939.71 402.894L1939.7 402.885ZM932.284 276.426C947.318 361.315 1122.3 377.114 1228.36 384.434C1387.48 395.055 1547.29 402.3 1707.29 404.35C1781.75 405.201 1856.21 404.868 1930.6 402.452C1887.88 394.996 1845.33 387.179 1802.83 379.227C1786.88 376.234 1770.93 373.224 1754.99 370.21C1634.15 347.368 1513.12 325.296 1388.5 312.301C1237.16 296.86 1084.92 285.363 932.284 276.439V276.43V276.426ZM926.159 260.463C926.179 254.493 926.612 248.528 927.091 242.567C928.895 220.904 928.875 196.614 884.647 196.589C859.46 196.37 834.16 205.547 813.194 213.39C775.124 227.627 740.316 245.24 706.567 263.224C737.113 265.182 767.733 266.706 798.327 268.31C841.304 270.566 884.267 272.865 927.211 275.344C926.572 270.36 926.212 265.464 926.099 260.467H926.159V260.463Z" fill="url(#paint33_linear_1779_1730)" style=""/>\n<path d="M4434.58 401.547C4433.97 420.149 4427.61 437.148 4414.11 453.709C4405.91 462.676 4396.41 470.902 4386.26 479.014C4309.67 539.246 4179.36 560.324 4063.28 568.032C4033.48 569.918 4002.65 567.333 3973.13 564.9C3931.28 561.452 3889.72 556.674 3848.33 551.509C3749.14 539.137 3650.71 524.293 3552.67 508.734C3517.05 503.064 3481.49 497.2 3445.95 491.323C3307.51 468.422 3168.28 445.235 3025.37 436.912C2936.75 432.177 2849.12 435.073 2760.73 440.032C2724.87 442.04 2689 443.951 2653.06 445.231C2626.3 446.25 2599.71 448.135 2573.12 450.186C2495.3 456.197 2419.66 457.346 2341.83 450.047C2227.34 438.84 2113.96 423.963 2001.56 406.211C1754.19 416.163 1504.07 405.167 1258 388.269C1149.59 380.591 970.229 363.424 961.986 275.033C916.426 272.073 870.832 269.307 825.238 266.575C798.38 264.971 771.509 263.405 744.677 261.612C729.63 269.737 714.777 277.988 700.062 286.348C689.982 292.183 680.149 298.165 670.361 304.193C663.77 308.268 657.159 312.33 650.434 316.321C575.865 360.325 491.762 401.766 386.22 406.548C355.121 407.377 325.06 405.142 294.953 400.187C296.411 399.989 297.144 399.892 298.602 399.694C327.158 404.384 355.6 406.573 385.102 405.82C488.526 401.042 572.816 359.361 645.727 316.123C652.451 312.141 659.063 308.079 665.654 304.004C675.455 297.963 685.308 291.977 695.415 286.146C710.203 277.756 725.116 269.463 740.216 261.296C737.553 261.115 734.957 260.938 732.42 260.757C733.239 260.488 733.645 260.357 734.464 260.088C736.754 260.248 739.105 260.408 741.515 260.581C776.609 241.839 812.675 223.241 852.39 208.494C874.008 200.466 899.495 191.819 925.347 192.152C942.558 192.244 961.081 195.267 967.858 206.288C974.337 216.821 970.781 229.681 969.097 240.559C967.372 251.904 966.167 263.132 966.806 274.532C1114.91 284.222 1262.64 296.132 1409.59 311.32C1535.77 324.606 1658.99 345.873 1782.02 367.659C1798.87 370.643 1815.72 373.62 1832.58 376.592C1889.27 386.548 1946.05 396.28 2003.11 405.378C2074.98 402.237 2147.17 397.35 2217.27 386.48C2280.01 376.693 2342.7 366.745 2405.13 356.166C2670.58 311.093 2933.66 259.587 3189.61 196.033C3253.68 180.125 3317.29 163.467 3380.29 145.934C3422.34 134.205 3464.09 122.069 3505.78 109.844C3612.32 78.5951 3720.03 45.2796 3840.41 48.0411C3953.15 51.1858 4056.95 78.0479 4147.19 120.187C4233.61 160.937 4304.13 214.177 4360.66 271.905C4397.84 310.672 4434.78 354.983 4434.8 401.542C4434.72 401.542 4434.68 401.547 4434.6 401.551L4434.58 401.547ZM2006.75 405.996C2118.24 423.58 2230.71 438.314 2344.28 449.432C2420.56 456.584 2494.55 455.435 2570.81 449.533C2597.79 447.462 2624.75 445.563 2651.89 444.524C2687.65 443.24 2723.32 441.345 2758.99 439.341C2848.5 434.315 2937.24 431.419 3026.97 436.222C3170.52 444.574 3310.34 467.824 3449.4 490.822C3484.92 496.703 3520.45 502.559 3556.07 508.225C3665.47 525.539 3775.31 542.256 3886.25 555.235C3942.32 561.793 4003.9 570.878 4061.35 567.35C4176.54 559.701 4305.5 538.64 4381.44 478.883C4391.61 470.792 4401.09 462.575 4409.29 453.617C4460.63 394.02 4405.5 323.962 4355.71 272.018C4244.19 156.95 4062.68 53.8926 3839.53 48.7778C3721.15 46.0583 3614.62 79.4834 3509.92 110.193C3468.22 122.435 3426.44 134.572 3384.37 146.304C3321.33 163.85 3257.67 180.52 3193.56 196.437C2937.44 260.025 2674.2 311.573 2408.58 356.68C2346.12 367.267 2283.39 377.215 2220.6 387.015C2150.6 397.872 2078.53 402.81 2006.75 405.996ZM966.673 275.357C975.129 362.868 1152.33 379.985 1259.84 387.608C1504 404.371 1752.13 415.317 1997.6 405.618C1941.11 396.588 1884.88 386.952 1828.72 377.097C1811.87 374.133 1795.03 371.148 1778.18 368.164C1655.45 346.429 1532.55 325.2 1406.68 311.947C1260.64 296.864 1113.85 285.014 966.673 275.357ZM961.473 267.021C961.72 258.156 962.765 249.379 964.07 240.555C967.386 218.963 970.149 193.065 924.655 192.901C899.874 192.611 875.067 201.817 854.58 209.601C815.797 224.339 780.357 242.508 745.829 260.905C772.8 262.719 799.818 264.285 826.823 265.897C871.824 268.583 916.812 271.32 961.773 274.233C961.587 271.812 961.46 269.413 961.46 267.03V267.021H961.473Z" fill="url(#paint34_linear_1779_1730)" style=""/>\n<path d="M4475.43 391.469C4474.83 413.035 4467.33 433.776 4449.63 452.392C4441.01 461.476 4430.38 469.647 4419.51 477.679C4337.67 537.255 4204.68 558.16 4085.62 566.062C4056.2 567.931 4025.88 565.746 3996.65 563.603C3954.75 560.53 3913.1 556.14 3871.61 551.362C3773.97 540.113 3677 526.478 3580.39 512.127C3544.15 506.722 3507.97 501.119 3471.81 495.499C3337.12 474.572 3201.92 453.633 3063.61 444.966C2974.51 439.754 2885.78 441.168 2796.55 444.002C2760.65 445.142 2724.75 446.203 2688.82 446.763C2661.38 447.226 2634.03 448.371 2606.66 449.634C2528.38 453.276 2451.58 453.339 2373.74 445.959C2272.44 435.97 2171.86 423.5 2071.92 409.044C1976.77 413.864 1881.14 414.353 1785.74 413.166C1619.85 410.867 1454.14 403.092 1289.25 391.473C1178.95 383.453 998.368 364.931 996.264 274.106C949.013 270.692 901.735 267.464 854.443 264.273C830.721 262.673 806.992 261.098 783.283 259.394C768.003 267.695 752.89 276.11 737.863 284.597C728.122 290.141 718.548 295.799 709.027 301.499C701.351 306.071 693.667 310.63 685.884 315.13C606.908 360.494 516.326 402.852 406.264 407.786C373.833 408.649 342.454 406.401 311.035 401.282C312.493 401.084 313.226 400.987 314.684 400.789C344.531 405.655 374.332 407.874 405.145 407.066C513.79 402.153 603.279 359.69 681.177 314.941C688.933 310.445 696.61 305.894 704.26 301.318C713.814 295.622 723.402 289.956 733.156 284.395C748.316 275.866 763.582 267.417 779.009 259.082C772.637 258.619 766.698 258.173 761.185 257.748C762.078 257.482 762.524 257.352 763.409 257.087C768.669 257.495 774.302 257.92 780.36 258.362C816.38 239.103 853.178 219.772 893.805 204.465C915.011 196.475 939.738 188.115 965.185 188.49C982.502 188.746 1000.92 191.777 1007.07 203.173C1012.96 214.11 1008.26 227.518 1005.84 238.581C1003.31 250.267 1001.26 261.823 1001.14 273.631C1143.74 283.995 1286.01 296.195 1427.65 311.009C1554.83 324.53 1679.64 344.88 1804.29 365.55C1822.28 368.534 1840.27 371.515 1858.26 374.474C1929.73 386.232 2001.31 397.691 2073.27 408.202C2137.22 404.839 2201.31 399.888 2263.66 390.05C2327.05 380.006 2390.38 369.776 2453.44 358.915C2739.52 309.561 3023.12 252.751 3296.88 180.335C3343.03 168.131 3388.86 155.464 3434.42 142.414C3475.91 130.497 3517.1 118.187 3558.24 105.803C3665.79 73.3962 3774.87 38.5441 3897.14 41.2089C4010.79 44.3282 4115.1 71.7966 4205.41 114.782C4291.7 156.273 4361.38 210.46 4414.25 270.036C4446.38 307.115 4475.41 348.387 4475.43 391.477V391.469H4475.43ZM2077.18 408.766C2176.26 423.079 2275.98 435.426 2376.42 445.332C2453 452.602 2528.26 452.505 2605.28 448.927C2632.99 447.651 2660.68 446.498 2688.45 446.022C2724.2 445.471 2759.91 444.41 2795.62 443.282C2885.76 440.423 2975.38 439.022 3065.4 444.284C3204.28 452.989 3340.03 473.97 3475.28 494.99C3511.4 500.597 3547.53 506.2 3583.73 511.597C3702.43 529.189 3821.73 546.335 3942.29 558.118C3988.08 562.593 4037.13 568.302 4083.69 565.384C4201.85 557.537 4333.51 536.649 4414.67 477.528C4425.52 469.508 4436.11 461.35 4444.74 452.291C4499.89 394.251 4456.05 323.97 4409.35 270.124C4356.49 210.607 4286.87 156.462 4200.66 115.001C4111.88 72.7606 4008.13 45.0481 3896.34 41.9413C3776.06 39.3103 3668.14 74.2887 3562.4 106.135C3521.26 118.528 3480.06 130.842 3438.58 142.764C3312.13 178.904 3183.42 211.672 3052.96 241.565C2857.09 286.251 2657.81 324.753 2456.96 359.412C2393.87 370.281 2330.5 380.519 2267.07 390.568C2204.87 400.368 2140.96 405.361 2077.18 408.775V408.766H2077.18ZM1001.14 274.443C1003.59 364.35 1181.86 382.826 1291.28 390.791C1455.64 402.359 1620.84 410.13 1786.18 412.429C1880.11 413.603 1974.26 413.128 2067.95 408.468C1996.55 398.019 1925.53 386.64 1854.6 374.975C1836.61 372.016 1818.63 369.035 1800.65 366.051C1676.28 345.427 1551.77 325.103 1424.88 311.611C1284.17 296.898 1142.83 284.757 1001.15 274.452V274.439L1001.14 274.443ZM996.258 272.275C996.417 261.027 998.521 249.77 1001.02 238.539C1005.73 217.12 1011.38 189.487 964.639 189.214C934.758 188.788 904.285 201.986 880.489 211.9C846.793 225.943 815.308 242.113 784.641 258.661C808.557 260.37 832.485 261.97 856.421 263.586C903.053 266.718 949.672 269.909 996.258 273.265C996.258 272.932 996.258 272.599 996.258 272.271V272.275Z" fill="url(#paint35_linear_1779_1730)" style=""/>\n<path d="M4517.83 380.039C4517.17 405.407 4507.35 429.705 4485.23 451.078C4475.77 460.171 4464.48 468.346 4452.86 476.345C4365.85 535.222 4230.22 555.984 4108.14 564.096C4038.21 568.415 3963.74 558.447 3895.12 551.214C3799.03 541.086 3703.54 528.642 3608.37 515.508C3571.32 510.372 3534.35 505.034 3497.37 499.683C3366.66 480.757 3235.64 461.994 3102.11 453.015C3012.75 447.331 2923.32 447.142 2833.62 447.883C2797.38 448.186 2761.14 448.426 2724.9 448.262C2696.94 448.161 2669.01 448.565 2641.07 449.057C2562.09 450.459 2484.32 449.369 2406.06 441.846C2318.7 433.166 2231.78 422.932 2145.25 411.419C2038.98 417.889 1931.95 418.567 1825.29 417.186C1656.71 414.765 1488.27 406.708 1320.75 394.622C1208.53 386.266 1027.02 366.345 1030.87 273.323C982.483 269.459 934.066 265.763 885.643 262.113C864.478 260.522 843.312 258.926 822.16 257.272C806.653 265.708 791.294 274.25 775.94 282.795C766.786 287.91 757.771 293.134 748.776 298.363C739.781 303.57 730.773 308.765 721.671 313.892C637.648 360.696 541.874 403.913 426.585 408.99C392.862 409.911 360.085 407.634 327.395 402.342C328.833 402.145 329.545 402.048 330.983 401.85C362.162 406.88 393.301 409.112 425.466 408.27C538.811 403.193 634.406 359.711 716.964 313.703C726.066 308.575 735.087 303.393 744.062 298.182C753.057 292.953 762.065 287.729 771.226 282.614C786.68 273.993 802.193 265.409 817.879 256.96C808.677 256.232 799.476 255.495 790.281 254.708C791.22 254.451 791.693 254.321 792.632 254.064C801.473 254.813 810.329 255.529 819.177 256.228C854.524 237.234 890.384 218.079 929.805 202.504C952.016 193.731 978.162 184.347 1005.24 184.789C1022.72 185.092 1041.05 188.317 1046.45 200.028C1051.72 211.458 1045.93 225.219 1042.74 236.552C1039.41 248.638 1036.53 260.61 1035.56 272.881C1172.65 283.86 1309.43 296.266 1445.74 310.647C1574.33 324.497 1701.07 343.992 1827.7 363.622C1846.43 366.522 1865.15 369.427 1883.89 372.31C1971.01 385.722 2058.27 398.777 2145.99 410.556C2201.13 407.045 2256.23 402.195 2310.02 393.586C2374.07 383.289 2438.02 372.761 2501.71 361.626C2790.17 311.093 3075.95 252.645 3351.13 177.818C3397.24 165.277 3443.03 152.265 3488.53 138.853C3529.43 126.767 3570.05 114.293 3610.61 101.749C3719.18 68.1762 3829.64 31.7244 3953.84 34.3512C4178.88 39.1966 4370.88 145.205 4467.84 268.141C4494.87 302.922 4517.63 340.746 4517.65 380.035C4517.73 380.035 4517.76 380.039 4517.83 380.044V380.039ZM2150.19 411.12C2235.92 422.507 2322.03 432.644 2408.57 441.236C2485.79 448.666 2562.52 449.714 2640.42 448.333C2668.62 447.841 2696.81 447.437 2725.02 447.542C2761.09 447.706 2797.17 447.466 2833.24 447.163C2923.68 446.422 3013.85 446.616 3103.94 452.354C3237.96 461.362 3369.46 480.163 3500.64 499.166C3537.57 504.52 3574.51 509.846 3611.51 514.981C3701.41 527.396 3791.62 539.086 3882.32 548.92C3925.03 553.551 3967.88 557.815 4010.94 560.85C4042.24 563.056 4074.72 565.443 4106.2 563.435C4227.4 555.374 4361.72 534.645 4448.06 476.202C4459.67 468.224 4470.91 460.057 4480.37 450.981C4539.42 394.041 4506.87 324.513 4463.18 268.247C4414.06 206.823 4344.8 152.21 4259.22 109.57C4170.38 66.446 4066.02 38.1358 3953.3 35.1006C3831.12 32.5242 3721.82 69.0897 3615.09 102.094C3574.51 114.651 3533.87 127.112 3492.95 139.207C3410.84 163.353 3327.71 186.077 3243.67 207.412C3002.86 268.55 2755.47 318.405 2505.47 362.131C2441.73 373.283 2377.73 383.815 2313.64 394.121C2260.04 402.713 2205.11 407.583 2150.17 411.128V411.12H2150.19ZM1035.55 276.881C1035.59 366.783 1213.98 385.853 1322.78 393.965C1489.75 406.005 1657.63 414.045 1825.66 416.453C1930.78 417.813 2036.3 417.203 2141.04 410.875C2053.85 399.151 1967.13 386.169 1880.53 372.837C1861.8 369.945 1843.08 367.048 1824.35 364.148C1697.94 344.552 1571.44 325.09 1443.07 311.257C1307.67 296.978 1171.79 284.635 1035.61 273.719C1035.61 274.767 1035.55 275.828 1035.55 276.876V276.881ZM1030.79 272.503C1031.8 260.358 1034.65 248.495 1037.96 236.526C1043.92 215.352 1052.58 185.909 1004.61 185.517C975.379 185.021 945.738 197.89 922.548 207.648C887.627 222.34 855.243 239.36 823.378 256.556C844.803 258.227 866.235 259.84 887.667 261.461C935.391 265.06 983.102 268.701 1030.79 272.503Z" fill="url(#paint36_linear_1779_1730)" style=""/>\n<path d="M4560.76 367.688C4560.08 397.261 4547.85 425.433 4520.74 449.777C4510.5 458.896 4498.52 467.067 4486.14 475.019C4394.04 533.214 4255.7 553.82 4130.53 562.147C4060.87 566.474 3987.21 557.626 3918.59 551.084C3824.02 542.067 3729.97 530.831 3636.22 518.917C3597.93 514.034 3559.71 508.932 3521.49 503.83C3395.23 486.953 3268.78 470.333 3140.45 461.093C3051.23 454.934 2961.71 453.099 2872.04 451.802C2834.95 451.267 2797.85 450.691 2760.78 449.79C2732.55 449.116 2704.3 448.801 2676.05 448.544C2596.2 447.82 2517.14 445.471 2438.1 437.767C2365.17 430.467 2292.5 422.288 2220.03 413.351C2148.82 418.609 2077.05 420.793 2005.4 421.543C1787.4 423.829 1568.55 413.818 1352.1 397.817C1237.87 389.107 1055.56 367.755 1065.24 272.688C1016.98 268.486 968.69 264.411 920.393 260.37C900.506 258.703 880.619 257.044 860.745 255.352C845.059 263.864 829.466 272.452 813.906 281.052C805.797 285.565 797.721 290.103 789.651 294.645C778.912 300.72 768.139 306.769 757.227 312.718C669.062 360.148 566.257 405.963 446.734 410.244C411.68 411.195 377.584 408.901 343.582 403.454C345.02 403.256 345.733 403.159 347.171 402.961C379.668 408.147 412.112 410.408 445.615 409.52C564.193 404.308 665.001 359.951 752.586 312.516C763.479 306.555 774.251 300.51 785.011 294.452C793.06 289.893 801.136 285.35 809.265 280.85C824.971 272.191 840.698 263.544 856.543 254.977C844.16 253.908 831.783 252.835 819.419 251.685C820.431 251.433 820.943 251.307 821.955 251.054C833.946 252.165 845.957 253.214 857.968 254.249C893.202 235.28 928.782 216.092 967.738 200.192C990.342 190.969 1017.56 180.537 1045.52 181.11C1063.2 181.459 1081.4 184.89 1086.06 196.909C1090.69 208.839 1083.86 222.937 1079.92 234.556C1075.73 247.076 1072.03 259.49 1070.27 272.254C1201.84 283.738 1333.16 296.321 1464.12 310.322C1592.92 324.324 1720.33 342.746 1847.68 361.197C1868.38 364.194 1889.1 367.191 1909.81 370.184C2013.19 385.07 2116.7 399.543 2220.74 412.475C2266.52 408.968 2312 404.275 2356.75 397.164C2421.43 386.606 2486.03 375.8 2550.35 364.371C2841.19 312.655 3129.17 252.57 3405.75 175.313C3451.82 162.444 3497.54 149.087 3542.96 135.317C3583.25 123.062 3623.27 110.463 3663.25 97.7998C3772.86 63.0445 3884.76 24.9509 4010.93 27.5188C4125.48 30.5372 4233.19 59.1295 4322.54 103.908C4408.08 147.331 4476.78 203.004 4521.85 266.272C4543.89 298.295 4560.75 332.453 4560.76 367.692V367.684L4560.76 367.688ZM2224.82 412.984C2296.56 421.816 2368.5 429.907 2440.69 437.136C2518.96 444.764 2597.26 447.075 2676.33 447.786C2704.74 448.043 2733.14 448.363 2761.53 449.045C2798.48 449.95 2835.44 450.514 2872.4 451.049C2962.58 452.345 3052.63 454.214 3142.36 460.407C3271.1 469.677 3397.93 486.339 3524.59 503.257C3562.78 508.364 3600.97 513.453 3639.23 518.332C3743.66 531.568 3848.45 544.108 3953.97 553.403C4010.67 558.4 4071.17 565.022 4128.61 561.448C4252.9 553.18 4389.96 532.591 4481.38 474.829C4493.71 466.885 4505.68 458.727 4515.9 449.638C4578.52 394.47 4556.81 324.349 4516.94 266.339C4471.95 203.118 4403.3 147.495 4317.84 104.11C4228.91 60.1187 4123.93 31.2149 4010.25 28.2302C3886.09 25.7128 3775.3 63.9327 3667.5 98.1071C3627.51 110.787 3587.47 123.391 3547.15 135.645C3501.71 149.428 3455.95 162.793 3409.85 175.671C3133.07 252.978 2844.9 313.097 2553.85 364.842C2489.48 376.267 2424.86 387.095 2360.13 397.653C2315.58 404.738 2270.32 409.453 2224.74 412.976C2224.77 412.976 2224.78 412.98 2224.8 412.984H2224.82ZM1069.64 281.078C1069.73 369.784 1247.16 388.972 1354.21 397.139C1568.58 412.98 1785.28 422.928 2001.18 420.836C2072.86 420.141 2144.66 418.019 2215.91 412.82C2112.37 399.93 2009.34 385.529 1906.46 370.719C1885.72 367.73 1865 364.733 1844.26 361.731C1717.1 343.305 1589.87 324.896 1461.25 310.92C1331.18 297.016 1200.75 284.509 1070.08 273.1C1069.83 275.748 1069.64 278.413 1069.64 281.086V281.078ZM1065.31 271.833C1067.11 259.2 1070.78 246.907 1074.96 234.514C1082.06 213.6 1093.93 182.381 1044.64 181.83C1016.35 181.274 987.465 193.907 965.041 203.43C928.789 218.825 895.233 236.703 862.05 254.599C882.256 256.325 902.477 258.008 922.69 259.701C970.241 263.679 1017.79 267.691 1065.31 271.82V271.829V271.833Z" fill="url(#paint37_linear_1779_1730)" style=""/>\n<path d="M4605.43 354.508C4604.71 388.522 4589.47 421.341 4556.24 448.46C4545.19 457.578 4532.55 465.757 4519.43 473.68C4421.86 531.416 4281.9 551.564 4153 560.173C4083.63 564.492 4010.76 556.742 3942.19 550.911C3849.12 542.997 3756.5 532.982 3664.13 522.302C3623.53 517.591 3583 512.658 3542.46 507.715C3421.76 492.994 3300.96 478.521 3178.88 469.138C3090.56 462.541 3001.87 459.039 2913.12 455.818C2874.33 454.412 2835.55 452.972 2796.79 451.28C2768.7 450.055 2740.58 449.062 2712.46 448.102C2631.3 445.336 2550.57 441.602 2470.21 433.667C2412 427.79 2353.91 421.467 2295.91 414.778C2166.34 426.237 2034.57 427.087 1903.99 425.281C1730.04 422.625 1556.23 414.05 1383.48 400.999C1267.19 391.936 1084.34 369.136 1099.65 272.204C1053.81 267.876 1007.96 263.628 962.098 259.394C941.039 257.453 919.973 255.516 898.921 253.542C887.855 259.549 876.836 265.59 865.818 271.635C860.225 274.696 857.429 276.224 851.836 279.28C845.431 282.787 839.039 286.306 832.654 289.83C819.472 297.112 806.249 304.37 792.866 311.505C699.222 360.936 592.063 406.089 466.9 411.461C430.541 412.45 395.147 410.135 359.854 404.531C361.292 404.329 362.004 404.233 363.442 404.03C397.205 409.398 431.06 411.68 465.848 410.741C589.652 405.39 695.714 360.161 788.286 311.295C801.688 304.172 814.884 296.91 828.073 289.628C834.458 286.1 840.85 282.581 847.255 279.07C852.848 276.009 855.644 274.481 861.237 271.425C872.402 265.317 883.581 259.217 894.773 253.134C879.293 251.681 863.813 250.221 848.367 248.65C849.432 248.406 849.965 248.28 851.03 248.036C866.03 249.551 881.051 250.974 896.078 252.393C932.077 232.94 968.23 213.104 1007.86 196.618C1030.44 187.235 1057.4 176.82 1085.48 177.422C1103.49 177.831 1121.4 181.455 1125.34 193.802C1129.32 206.28 1121.5 220.584 1116.78 232.548C1111.73 245.539 1107.09 258.488 1104.59 271.787C1230.67 283.721 1356.57 296.367 1482.22 309.977C1610.07 323.991 1736.96 341.188 1863.82 358.359C1887.72 361.592 1911.61 364.826 1935.52 368.05C2055.49 384.178 2175.62 399.859 2296.26 413.885C2332.2 410.581 2367.97 406.518 2403.13 400.717C2468.47 389.903 2533.68 378.781 2598.65 367.103C2891.51 314.284 3181.32 252.65 3458.97 173.12C3505.39 159.826 3551.44 146.018 3597.15 131.785C3636.8 119.408 3676.18 106.691 3715.52 93.9143C3826.21 57.9466 3939.6 18.1607 4067.84 20.6739C4183.37 23.6165 4291.81 52.8066 4381.25 98.4818C4466.35 142.461 4535.66 199.393 4575.59 264.399C4592.89 293.172 4605.66 323.528 4605.48 354.524C4605.45 354.512 4605.45 354.508 4605.42 354.495L4605.43 354.508ZM2300.48 414.353C2357.86 420.966 2415.33 427.222 2472.93 433.031C2552.75 440.916 2632.96 444.616 2713.56 447.361C2741.79 448.329 2770.02 449.327 2798.23 450.556C2836.9 452.248 2875.6 453.68 2914.3 455.094C3003.38 458.327 3092.41 461.859 3181.06 468.468C3303.42 477.877 3424.51 492.371 3545.49 507.13C3585.99 512.068 3626.51 516.998 3667.09 521.704C3754.33 531.795 3841.81 541.195 3929.66 548.899C4001.41 555.192 4078.54 564.117 4151.2 559.478C4278.58 550.953 4418.45 530.545 4514.84 473.486C4527.95 465.589 4540.56 457.418 4551.6 448.321C4617.73 394.218 4607.21 324.909 4570.84 264.454C4491.91 136.096 4290.86 25.8392 4067.3 21.4022C3941.13 18.9311 3828.82 58.8643 3719.98 94.2258C3680.64 107.002 3641.26 119.724 3601.61 132.105C3555.87 146.355 3509.81 160.167 3463.37 173.469C3185.55 253.054 2895.55 314.722 2602.5 367.574C2537.49 379.277 2472.23 390.395 2406.85 401.21C2371.82 406.859 2336.36 411.031 2300.6 414.361C2300.56 414.361 2300.53 414.357 2300.48 414.353ZM1103.49 285.001C1103.58 372.731 1279.97 392.071 1385.7 400.318C1557.9 413.334 1731.14 421.875 1904.53 424.528C2033.57 426.321 2163.75 425.492 2291.82 414.281C2171.61 400.288 2051.92 384.67 1932.38 368.593C1908.47 365.373 1884.56 362.144 1860.66 358.907C1733.94 341.765 1607.21 324.577 1479.5 310.575C1354.74 297.062 1229.72 284.504 1104.53 272.641C1103.87 276.725 1103.51 280.892 1103.54 284.997C1103.51 284.997 1103.5 285.001 1103.48 285.005L1103.49 285.001ZM1099.84 271.332C1102.39 258.181 1106.94 245.35 1111.97 232.498C1120.08 211.916 1135.18 178.824 1084.68 178.146C1056.46 177.498 1028.04 190.148 1005.9 199.683C968.743 215.684 934.454 234.321 900.346 252.784C921.771 254.788 943.203 256.762 964.635 258.741C1009.71 262.892 1054.78 267.072 1099.83 271.324V271.332H1099.84Z" fill="url(#paint38_linear_1779_1730)" style=""/>\n<path d="M4650.92 340.047C4650.93 379.025 4631.11 416.916 4591.83 447.146C4579.97 456.26 4566.66 464.469 4552.8 472.35C4450.28 529.362 4307.56 549.4 4175.46 558.211C4106.52 562.522 4034.48 555.837 3966.11 550.747C3874.43 543.923 3783.12 535.129 3692.04 525.704C3646.31 520.947 3600.64 515.945 3554.98 510.94C3442.68 498.614 3330.31 486.473 3217.25 477.199C3131.52 470.304 3045.48 465.244 2959.42 460.297C2917.2 457.868 2874.99 455.431 2832.81 452.783C2805.56 451.078 2778.29 449.483 2751.01 447.917C2667.86 443.122 2584.89 437.851 2502.39 429.579C2458.68 425.13 2415.02 420.511 2371.41 415.729C2230.44 430.606 2085.86 431.398 1943.35 429.36C1766.74 426.595 1590.26 417.792 1414.93 404.186C1333.65 397.745 1234.26 388.248 1172.55 350.412C1138.29 329.401 1127.75 301.129 1133.88 271.867C1096.51 268.061 1059.14 264.285 1021.76 260.505C993.524 257.651 965.281 254.805 937.051 251.921C932.411 254.456 927.71 257.007 923.003 259.558C911.977 265.552 900.939 271.534 889.9 277.521C888.788 278.135 888.229 278.438 887.117 279.053C867.762 289.581 848.374 300.076 828.64 310.323C729.983 361.134 617.603 407.2 487.207 412.715C449.556 413.759 412.771 411.414 376.199 405.643C377.637 405.441 378.35 405.344 379.788 405.142C414.842 410.661 449.989 412.968 486.089 411.995C614.148 407.402 727.246 359.576 823.933 310.112C843.687 299.887 863.081 289.396 882.403 278.851C883.515 278.236 884.074 277.933 885.186 277.318C896.245 271.349 907.27 265.354 918.289 259.36C923.129 256.746 927.956 254.119 932.77 251.484C914.261 249.581 895.745 247.67 877.27 245.64C878.408 245.4 878.974 245.283 880.113 245.047C898.096 247.025 916.112 248.882 934.128 250.738C970.82 230.902 1007.49 210.561 1047.63 193.507C1070.1 183.964 1097.23 173.082 1125.45 173.76C1143.72 174.214 1161.4 178.087 1164.59 190.704C1167.87 203.687 1159.03 218.303 1153.54 230.574C1147.56 244.095 1142 257.575 1138.69 271.475C1259.34 283.768 1379.89 296.452 1500.29 309.666C1629.06 323.907 1757.24 340.157 1885.42 356.364C1910.68 359.563 1935.95 362.746 1961.22 365.928C2097.7 382.99 2234.28 399.711 2371.33 414.828C2397.62 411.945 2423.8 408.636 2449.6 404.3C2515.6 393.233 2581.42 381.77 2647.05 369.865C2942.13 315.694 3234.13 252.54 3513.12 170.682C3559.58 157.051 3605.65 142.886 3651.36 128.266C3690.3 115.784 3729 103.003 3767.64 90.134C3879.4 52.9413 3994.33 11.4041 4124.66 13.8584C4350.17 18.1481 4558.73 129.52 4629.33 262.547C4642.33 287.822 4650.39 313.463 4650.91 340.089V340.051L4650.92 340.047ZM2375.61 415.254C2418.72 419.977 2461.86 424.544 2505.05 428.944C2587.24 437.182 2669.91 442.427 2752.74 447.205C2780.05 448.784 2807.36 450.375 2834.66 452.084C2876.78 454.732 2918.92 457.174 2961.07 459.59C3047.35 464.545 3133.6 469.613 3219.55 476.53C3332.79 485.812 3445.33 497.97 3557.82 510.317C3603.45 515.322 3649.07 520.328 3694.76 525.072C3796.65 535.592 3898.81 545.514 4001.49 552.469C4057.87 556.287 4116.87 561.099 4173.62 557.512C4304.81 548.756 4446.37 528.76 4548.15 472.135C4562.02 464.28 4575.29 456.088 4587.14 446.991C4656.11 394.352 4656.75 324.892 4624.57 262.555C4589.24 195.949 4520.34 137.918 4435.42 93.245C4346.65 47.7886 4239.31 17.3735 4124.19 14.5404C3995.95 12.124 3882.07 53.8253 3772.17 90.3908C3733.51 103.247 3694.79 116.045 3655.83 128.543C3610.09 143.168 3564 157.346 3517.5 170.986C3238.34 252.89 2946.16 316.086 2650.9 370.29C2585.23 382.207 2519.37 393.683 2453.33 404.755C2427.73 409.057 2401.76 412.366 2375.68 415.245C2375.65 415.245 2375.65 415.249 2375.62 415.254H2375.61ZM1136.85 288.84C1136.95 375.737 1312.49 395.199 1417.09 403.496C1591.85 417.06 1767.74 425.841 1943.78 428.594C2084.74 430.611 2227.73 429.844 2367.2 415.237C2230.52 400.153 2094.31 383.483 1958.21 366.459C1932.93 363.272 1907.67 360.085 1882.39 356.894C1754.3 340.7 1626.21 324.45 1497.52 310.226C1378.01 297.108 1258.34 284.525 1138.58 272.309C1137.61 277.857 1137 283.254 1136.78 288.832C1136.81 288.832 1136.82 288.836 1136.84 288.84H1136.85ZM1134.06 270.966C1137.41 257.217 1142.88 243.872 1148.85 230.498C1158.04 209.875 1176.2 175.717 1124.65 174.463C1096.06 173.739 1067.1 187.176 1044.92 196.955C1007.57 213.432 973.011 232.426 938.463 251.147C967.105 254.077 995.754 256.965 1024.41 259.861C1060.96 263.553 1097.51 267.249 1134.05 270.97L1134.06 270.966Z" fill="url(#paint39_linear_1779_1730)" style=""/>\n<path d="M4698.19 325.848C4698.2 370.546 4673.18 411.903 4627.4 445.837C4614.53 454.879 4600.8 463.147 4586.12 471.007C4478.79 527.312 4333.19 547.215 4197.91 556.232C4141.05 559.853 4082.35 555.992 4025.7 552.772C3923.44 546.962 3821.59 538.282 3719.98 529.075C3658.09 523.43 3596.29 517.41 3534.48 511.39C3441.64 502.344 3348.79 493.365 3255.73 485.236C3178.62 478.559 3101.38 472.531 3024.12 466.528C2972.38 462.507 2920.64 458.466 2868.93 454.256C2845.22 452.328 2821.5 450.43 2797.77 448.54C2709.91 441.518 2622.08 434.336 2534.62 425.454C2505.04 422.406 2475.46 419.316 2445.89 416.18C2294.27 435.106 2136.76 435.62 1982.86 433.347C1803.55 430.459 1624.38 421.383 1446.41 407.322C1365.04 400.726 1264.58 390.959 1203.82 352.167C1169.63 330.34 1160.82 301.208 1168.33 271.652C1166.66 271.471 1164.98 271.294 1163.38 271.105C1100.5 264.235 1037.62 257.402 974.781 250.385C973.915 250.865 972.99 251.349 972.117 251.829C957.43 259.802 942.743 267.775 928.002 275.706C907.003 286.984 885.91 298.186 864.392 309.068C760.661 361.1 642.935 408.249 507.366 413.89C468.45 414.963 430.407 412.593 392.59 406.67C394.001 406.468 394.707 406.367 396.119 406.169C432.404 411.861 468.903 414.197 506.261 413.174C639.5 408.497 758.051 359.53 859.758 308.849C881.276 297.98 902.376 286.773 923.368 275.5C938.129 267.586 952.816 259.617 967.484 251.631C968.536 251.054 969.587 250.486 970.639 249.922C949.274 247.526 927.915 245.127 906.597 242.567C907.782 242.332 908.381 242.214 909.566 241.982C930.372 244.466 951.211 246.819 972.058 249.155C1009.77 228.684 1047.29 207.547 1088.39 189.794C1110.54 180.23 1137.72 169.116 1165.79 170.034C1184.25 170.548 1201.89 174.677 1204.33 187.521C1206.9 200.975 1197.06 215.975 1190.85 228.52C1183.83 242.605 1177.41 256.729 1173.34 271.286C1288.52 283.869 1403.68 296.489 1518.79 309.287C1632.35 321.962 1745.7 335.332 1859.06 348.685C1901.77 353.716 1944.48 358.747 1987.19 363.752C2139.84 381.551 2292.61 398.97 2445.69 415.254C2462.7 413.043 2479.58 410.593 2496.37 407.815C2563.02 396.495 2629.49 384.758 2695.74 372.555C2993.17 317.332 3287.23 252.515 3567.44 168.241C3613.99 154.244 3660.12 139.695 3705.87 124.691C3744.09 112.134 3782.06 99.2859 3819.97 86.3579C3932.81 47.9443 4049.33 4.57598 4181.77 6.9713C4299.35 9.76654 4408.96 40.691 4499.06 87.625C4583.61 132.871 4652.84 192.674 4683.28 260.623C4692.83 281.92 4697.85 303.717 4698.31 325.848H4698.19ZM2449.68 415.7C2478.85 418.79 2508.04 421.842 2537.23 424.847C2624.55 433.722 2712.23 440.878 2799.96 447.883C2823.7 449.777 2847.44 451.676 2871.18 453.612C2922.86 457.826 2974.57 461.855 3026.29 465.875C3103.6 471.887 3180.9 477.919 3258.08 484.6C3351.22 492.72 3444.16 501.717 3537.08 510.776C3598.85 516.796 3660.61 522.816 3722.46 528.452C3823.06 537.566 3923.89 546.108 4025.13 551.9C4081.3 555.117 4139.66 559.145 4196.06 555.563C4330.45 546.6 4474.88 526.731 4581.49 470.809C4596.16 462.97 4609.87 454.728 4622.7 445.694C4693.45 393.346 4707.49 325.726 4678.38 260.69C4648.02 192.8 4578.82 133.052 4494.37 87.8439C4405.42 41.5161 4297.32 10.4906 4181.15 7.72063C4050.79 5.3632 3935.31 48.8957 3824.32 86.6694C3786.38 99.6016 3748.39 112.445 3710.15 125.011C3664.37 140.032 3618.21 154.585 3571.64 168.594C3291.23 252.927 2996.97 317.778 2699.34 373.034C2633.04 385.255 2566.54 396.996 2499.85 408.32C2483.24 411.073 2466.55 413.511 2449.73 415.704C2449.7 415.704 2449.7 415.7 2449.67 415.696L2449.68 415.7ZM1170.26 292.322C1170.42 378.537 1344.67 398.246 1448.51 406.674C1625.92 420.688 1804.51 429.739 1983.25 432.623C2135.63 434.871 2291.49 434.374 2441.63 415.75C2288.88 399.497 2136.44 382.123 1984.12 364.346C1941.37 359.34 1898.64 354.31 1855.91 349.279C1742.58 335.926 1629.25 322.564 1515.73 309.897C1401.5 297.192 1287.21 284.673 1172.92 272.191C1171.42 278.918 1170.5 285.544 1170.26 292.334V292.326V292.322ZM1168.46 270.785C1172.61 256.384 1179.02 242.445 1185.91 228.486C1195.94 208.216 1217.42 172.19 1164.69 170.783C1135.66 169.979 1106.09 184.137 1083.82 194.173C1046.11 211.171 1011.16 230.578 976.086 249.648C1039.4 256.725 1102.76 263.607 1166.11 270.528C1166.92 270.612 1167.72 270.701 1168.52 270.793C1168.49 270.793 1168.48 270.789 1168.46 270.785Z" fill="url(#paint40_linear_1779_1730)" style=""/>\n<path d="M4746.88 311.463C4745.88 361.42 4716.77 407.891 4662.98 444.511C4552.24 520.003 4375.59 543.931 4220.44 554.258C4151.87 558.665 4080.87 553.896 4012.49 550.271C3793.12 538.644 3574.68 518.968 3356.87 499.056C3093.07 474.939 2829.77 448.582 2566.74 421.341C2550.56 419.665 2534.4 417.986 2518.23 416.302C2455 425.546 2390.17 430.37 2325.54 433.536C2186.33 440.352 2046.14 439.047 1906.79 434.664C1763.4 430.156 1620.26 421.938 1477.84 410.488C1396.45 403.748 1294.91 393.687 1235.11 354.032C1201 331.417 1193.79 301.486 1202.56 271.656C1138.99 264.251 1075.45 256.779 1011.98 249.063C975.207 269.088 938.188 288.912 899.985 307.839C792.233 360.59 667.49 410.202 527.613 415.089C487.339 416.222 447.957 413.835 408.809 407.726C410.22 407.524 410.926 407.428 412.337 407.226C449.981 413.077 487.838 415.439 526.561 414.369C665.506 408.589 788.232 360.405 895.405 307.62C933.781 288.6 970.959 268.676 1007.9 248.558C983.762 245.615 959.634 242.656 935.565 239.524C936.83 239.296 937.456 239.183 938.721 238.955C962.237 242.007 985.813 244.904 1009.38 247.783C1011.37 246.705 1013.34 245.628 1015.32 244.558C1051.27 224.979 1086.92 204.764 1125.86 187.538C1148.71 177.426 1176.7 165.542 1205.9 166.334C1224.67 166.902 1242.03 171.305 1243.79 184.381C1245.67 198.332 1234.89 213.626 1227.94 226.49C1220.04 241.245 1212.58 256.005 1207.64 271.29C1532.28 309.089 1857.46 345.052 2182.92 379.938C2294.53 391.902 2406.17 403.706 2517.87 415.342C2526.25 414.075 2534.6 412.744 2542.93 411.343C2900.01 349.915 3254.31 277.049 3588.7 175.936C3646.49 158.462 3703.61 140.128 3760.17 121.109C3797.6 108.497 3834.81 95.6149 3871.97 82.6743C3985.91 43.0062 4104.08 -2.23965 4238.71 0.100945C4357.36 2.8162 4467.8 34.3974 4558.1 82.1817C4642.6 128.135 4711.67 189.281 4737.11 258.716C4743.2 276.148 4746.68 293.585 4747.01 311.442C4746.96 311.451 4746.93 311.455 4746.89 311.463H4746.88ZM2521.69 415.792C2537.57 417.447 2553.45 419.093 2569.33 420.734C2915.82 456.618 3262.74 491.457 3610.83 520.61C3775.42 534.392 3940.96 548.373 4106.91 553.631C4143.89 554.801 4181.54 555.95 4218.47 553.576C4372.75 543.304 4548.11 519.401 4658.21 444.347C4733.2 393.481 4755.52 325.907 4732.09 258.766C4706.65 189.399 4637.72 128.303 4553.27 82.3964C4464.08 35.2141 4355.24 3.54869 4237.95 0.846062C4105.42 -1.46085 3988.26 43.9703 3876.16 82.9942C3839 95.9348 3801.8 108.821 3764.35 121.437C3707.77 140.465 3650.61 158.811 3592.78 176.294C3258.17 277.47 2903.63 350.378 2546.32 411.852C2538.13 413.224 2529.93 414.529 2521.69 415.784V415.792H2521.69ZM1203.54 295.685C1203.19 380.991 1376.79 401.29 1480.01 409.848C1757.31 432.139 2041.8 446.38 2321.14 432.985C2385.85 429.882 2450.76 425.104 2514.07 415.889C2403.6 404.38 2293.16 392.702 2182.76 380.873C1857.21 345.983 1531.92 310.019 1207.18 272.212C1205.12 280.004 1203.56 287.8 1203.53 295.685H1203.54ZM1202.74 270.776C1207.71 255.668 1215.09 241.06 1222.91 226.461C1233.65 206.545 1258.58 168.649 1204.65 167.087C1176.34 166.409 1148.23 179.695 1126.47 189.55C1089.1 206.469 1054.55 225.842 1019.77 244.79C1017.6 245.952 1015.5 247.135 1013.27 248.318C1076.35 255.996 1139.5 263.422 1202.68 270.776H1202.74Z" fill="url(#paint41_linear_1779_1730)" style=""/>\n</g>\n</g>\n<defs>\n<linearGradient id="paint0_linear_1779_1730" x1="-596.991" y1="398.264" x2="3328.71" y2="398.264" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint1_linear_1779_1730" x1="-558.94" y1="401.337" x2="3355.61" y2="401.337" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint2_linear_1779_1730" x1="-520.999" y1="404.429" x2="3382.1" y2="404.429" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint3_linear_1779_1730" x1="-483.122" y1="407.535" x2="3409.76" y2="407.535" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint4_linear_1779_1730" x1="-445.216" y1="410.592" x2="3437.36" y2="410.592" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint5_linear_1779_1730" x1="-407.136" y1="413.629" x2="3465.48" y2="413.629" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint6_linear_1779_1730" x1="-369.37" y1="416.735" x2="3493.49" y2="416.735" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint7_linear_1779_1730" x1="-331.896" y1="419.788" x2="3521.7" y2="419.788" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint8_linear_1779_1730" x1="-294.06" y1="421.855" x2="3550.41" y2="421.855" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint9_linear_1779_1730" x1="-256.513" y1="417.619" x2="3579.3" y2="417.619" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint10_linear_1779_1730" x1="-218.534" y1="413.282" x2="3608.44" y2="413.282" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint11_linear_1779_1730" x1="-181.118" y1="408.96" x2="3638.08" y2="408.96" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint12_linear_1779_1730" x1="-144.167" y1="404.61" x2="3668.11" y2="404.61" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint13_linear_1779_1730" x1="-107.009" y1="400.258" x2="3698.18" y2="400.258" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint14_linear_1779_1730" x1="-70.0247" y1="395.899" x2="3728.62" y2="395.899" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint15_linear_1779_1730" x1="-34.7767" y1="391.536" x2="3759.61" y2="391.536" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint16_linear_1779_1730" x1="1.44208" y1="387.181" x2="3790.69" y2="387.181" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint17_linear_1779_1730" x1="17.8874" y1="382.805" x2="3822.43" y2="382.805" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint18_linear_1779_1730" x1="34.1609" y1="378.429" x2="3854.35" y2="378.429" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint19_linear_1779_1730" x1="50.5457" y1="374.051" x2="3886.84" y2="374.051" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint20_linear_1779_1730" x1="66.6512" y1="369.678" x2="3919.71" y2="369.678" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint21_linear_1779_1730" x1="83.0243" y1="365.29" x2="3953.48" y2="365.29" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint22_linear_1779_1730" x1="99.4736" y1="360.913" x2="3988.2" y2="360.913" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint23_linear_1779_1730" x1="115.534" y1="356.492" x2="4023.15" y2="356.492" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint24_linear_1779_1730" x1="131.788" y1="352.117" x2="4058.46" y2="352.117" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint25_linear_1779_1730" x1="148.157" y1="347.759" x2="4094.2" y2="347.759" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint26_linear_1779_1730" x1="164.579" y1="343.338" x2="4130.18" y2="343.338" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint27_linear_1779_1730" x1="180.698" y1="338.95" x2="4166.54" y2="338.95" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint28_linear_1779_1730" x1="197.32" y1="334.537" x2="4203.62" y2="334.537" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint29_linear_1779_1730" x1="213.363" y1="330.141" x2="4240.4" y2="330.141" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint30_linear_1779_1730" x1="229.743" y1="325.767" x2="4278.06" y2="325.767" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint31_linear_1779_1730" x1="245.958" y1="321.491" x2="4316.14" y2="321.491" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint32_linear_1779_1730" x1="262.412" y1="317.092" x2="4355.45" y2="317.092" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint33_linear_1779_1730" x1="278.503" y1="312.748" x2="4394.4" y2="312.748" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint34_linear_1779_1730" x1="294.962" y1="308.266" x2="4434.82" y2="308.266" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint35_linear_1779_1730" x1="311.044" y1="303.902" x2="4475.45" y2="303.902" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint36_linear_1779_1730" x1="327.404" y1="299.665" x2="4517.85" y2="299.665" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint37_linear_1779_1730" x1="343.591" y1="295.329" x2="4560.78" y2="295.329" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint38_linear_1779_1730" x1="359.863" y1="290.979" x2="4605.5" y2="290.979" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint39_linear_1779_1730" x1="376.209" y1="286.659" x2="4650.94" y2="286.659" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint40_linear_1779_1730" x1="392.599" y1="282.269" x2="4698.33" y2="282.269" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<linearGradient id="paint41_linear_1779_1730" x1="408.818" y1="278.005" x2="4747.02" y2="278.005" gradientUnits="userSpaceOnUse">\n<stop stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.02" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.06" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.11" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.15" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n<stop offset="0.3" stop-color="white" style="stop-color:white;stop-opacity:1;"/>\n<stop offset="0.47" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4977 0.6339 0.7646);stop-opacity:1;"/>\n<stop offset="0.64" stop-color="#6E90BD" style="stop-color:#6E90BD;stop-color:color(display-p3 0.4300 0.5628 0.7399);stop-opacity:1;"/>\n<stop offset="0.79" stop-color="#7FA2C3" style="stop-color:#7FA2C3;stop-color:color(display-p3 0.4980 0.6353 0.7647);stop-opacity:1;"/>\n<stop offset="1" stop-color="#2B435D" style="stop-color:#2B435D;stop-color:color(display-p3 0.1686 0.2627 0.3647);stop-opacity:1;"/>\n</linearGradient>\n<clipPath id="clip0_1779_1730">\n<rect width="4320" height="323" fill="white" style="fill:white;fill-opacity:1;"/>\n</clipPath>\n</defs>\n</svg>\n';

  // src/WaveAnimAlt.ts
  var WaveAnimAlt = class {
    container;
    isAnimating = false;
    waveCtn;
    constructor() {
      this.container = document.querySelector(".bottom-wave-box");
      this.container.innerHTML = "";
      this.container.style.opacity = "1";
      this.waveCtn = document.createElement("div");
      this.waveCtn.style.opacity = "0";
      this.waveCtn.style.width = "100%";
      this.waveCtn.style.position = "relative";
      this.waveCtn.style.top = "5px";
      this.container.append(this.waveCtn);
      const waveDiv = document.createElement("div");
      waveDiv.style.width = "100%";
      waveDiv.innerHTML = wave_default;
      this.waveCtn.append(waveDiv);
      const prevWave = document.createElement("div");
      prevWave.style.width = "100%";
      prevWave.style.height = "100%";
      prevWave.style.scale = "-1 1";
      prevWave.style.position = "absolute";
      prevWave.style.top = "0";
      prevWave.style.left = "-100%";
      prevWave.innerHTML = wave_default;
      this.waveCtn.append(prevWave);
      const prevWave2 = document.createElement("div");
      prevWave2.style.width = "100%";
      prevWave2.style.height = "100%";
      prevWave2.style.position = "absolute";
      prevWave2.style.top = "0";
      prevWave2.style.left = "-200%";
      prevWave2.innerHTML = wave_default;
      this.waveCtn.append(prevWave2);
      const nextWave = document.createElement("div");
      nextWave.style.width = "100%";
      nextWave.style.height = "100%";
      nextWave.style.scale = "-1 1";
      nextWave.style.position = "absolute";
      nextWave.style.top = "0";
      nextWave.style.left = "100%";
      nextWave.innerHTML = wave_default;
      this.waveCtn.append(nextWave);
      const nextWave2 = document.createElement("div");
      nextWave2.style.width = "100%";
      nextWave2.style.height = "100%";
      nextWave2.style.position = "absolute";
      nextWave2.style.top = "0";
      nextWave2.style.left = "200%";
      nextWave2.innerHTML = wave_default;
      this.waveCtn.append(nextWave2);
    }
    scrolling(dir) {
      if (this.isAnimating) {
        return;
      }
      this.isAnimating = true;
      const x = dir === 1 /* RIGHT */ ? "-200vw" : "200vw";
      gsap.to(this.waveCtn, {
        x,
        duration: ScrollSnap.SCROLL_DUR,
        ease: ScrollSnap.SCROLL_EASE_BETWEEN_SECTIONS,
        onComplete: () => {
          gsap.set(this.waveCtn, { x: 0 });
          this.isAnimating = false;
        }
      });
    }
    onPreloaderComplete() {
      gsap.to(this.waveCtn, { opacity: 1, duration: 0.5, ease: "linear" });
    }
  };

  // src/index.js
  var Main = class {
    isMobile;
    scrollSections;
    scrollSnap;
    mobilePinning;
    preloader;
    carousels;
    animations;
    modals;
    mql;
    nav;
    waveAnim;
    waveAnimAlt;
    homepageAnim;
    preloaderComplete = false;
    constructor() {
      this.scrollSections = document.querySelectorAll(".section");
      this.scrollSnap = new ScrollSnap(this.scrollSections);
      this.mobilePinning = new MobilePinning();
      this.preloader = new Preloader();
      this.carousels = new Carousels();
      this.animations = new Sections();
      this.modals = new Modals();
      this.nav = new Nav();
      this.waveAnim = new WaveAnim();
      this.waveAnimAlt = new WaveAnimAlt();
      this.homepageAnim = new HomepageWaveAnim();
      document.body.style.overflow = "hidden";
      this.initBreakpointListener();
      if (!this.isMobile) {
        gsap.set($("[data-animation]").not(".nav"), { visibility: "hidden" });
      }
      window.addEventListener("preloader_complete", this.onPreloaderComplete.bind(this));
      window.addEventListener("go_to_section", this.onScrollToSection.bind(this));
      window.addEventListener("scrolling", this.onScrolling.bind(this));
      window.addEventListener("modal_open", this.onModalOpen.bind(this));
      window.addEventListener("modal_closed", this.onModalClosed.bind(this));
      window.addEventListener("clicked_nav", this.onClickedNav.bind(this));
      this.preloader.start();
      this.animations.init();
      this.nav.deepLink();
    }
    initBreakpointListener() {
      this.mql = window.matchMedia("(min-width: 992px)");
      this.mql.addEventListener("change", this.onChangeBreakpoint.bind(this));
      this.onChangeBreakpoint(this.mql);
    }
    onModalOpen() {
      if (this.isMobile) {
        this.mobilePinning.kill();
      } else {
        this.scrollSnap.paused = true;
      }
    }
    onModalClosed() {
      if (this.isMobile) {
        this.mobilePinning.start();
      } else {
        this.scrollSnap.paused = false;
      }
    }
    onClickedNav(e) {
      const sectionId = e.detail;
      if (!this.isMobile) {
        const section = document.querySelector(`[data-section=${sectionId}]`).querySelectorAll(".section")[0];
        const sectionIdx = [...this.scrollSections].findIndex((s) => s === section);
        this.scrollSnap.gotoIdx(sectionIdx, true);
      }
    }
    onPreloaderComplete() {
      this.preloaderComplete = true;
      document.body.style.overflow = "";
      this.homepageAnim.play();
      this.waveAnim.onPreloaderComplete();
      this.waveAnimAlt.onPreloaderComplete();
      this.onChangeBreakpoint(this.mql);
    }
    onScrollToSection(e) {
      const currentSection = this.scrollSections[e.detail];
      const parentSection = currentSection.closest(".section_part").dataset.section;
      this.nav.currentSection = parentSection;
      if (parentSection === "none") {
        this.homepageAnim.play();
      }
      window.history.replaceState(
        {},
        "",
        `${document.location.origin}#${parentSection === "none" ? "top" : parentSection}`
      );
    }
    onChangeBreakpoint(e) {
      this.isMobile = !e.matches;
      this.preloader.isMobile = this.isMobile;
      this.animations.isMobile = this.isMobile;
      this.nav.isMobile = this.isMobile;
      this.waveAnim.isMobile = this.isMobile;
      if (this.isMobile) {
        gsap.set($("[data-animation]").not(".nav"), { visibility: "visible" });
      }
      if (!this.preloaderComplete) {
        return;
      }
      if (this.isMobile) {
        this.scrollSnap.kill();
        this.mobilePinning.start();
      } else {
        this.mobilePinning.kill();
        this.scrollSnap.start();
      }
    }
    onScrolling(e) {
      this.waveAnimAlt.scrolling(e.detail);
    }
  };
  (function() {
    if (document.readyState !== "loading") {
      init();
    } else {
      document.addEventListener("DOMContentLoaded", init);
    }
    function init() {
      new Main();
    }
  })();
})();
/*! Bundled license information:

three/build/three.core.js:
  (**
   * @license
   * Copyright 2010-2025 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)

three/build/three.module.js:
  (**
   * @license
   * Copyright 2010-2025 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)
*/
//# sourceMappingURL=index.js.map
