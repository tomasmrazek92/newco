{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/ScrollSnap.ts", "../src/snap-test.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// import { gsap } from 'gsap'; // \"Dynamic require of gsap is not supported\"?? Maybe because it's also being included separately via a <script>?\n// import { ScrollToPlugin } from 'gsap/ScrollToPlugin';\n\nenum Dir {\n  LEFT,\n  RIGHT,\n}\n\n/**\n * Controls scroll-snapping of page sections based on mousewheel/trackpad and keypad buttons.\n * When a section is as wide as the viewport, scrolling will trigger a full scroll event over to the prev/next section.\n * If the current section is wider than the viewport, scrolling will smoothly scroll within the bounds of that section.\n *\n * Dispatches the following event on the \"container\" element: 'go_to_section' with the detail property being the index number of the current section.\n *\n * @example\n * window.addEventListener('go_to_section', (e) => {\n *  // e.detail == the index number of the current section\n *  console.log('going to section', e.detail);\n * })\n *\n * Can control which section to animate to externally via the `gotoIdx(targetSectionIdx)` method.\n *\n * @example\n * scrollSnap.gotoIdx(0);\n */\nexport default class ScrollSnap {\n  // #region Properties\n  // ==============================================================\n  // Config\n  static readonly SCROLL_DUR = 0.6; /** Speed at which scroll animation happens (in seconds) */\n  static readonly SCROLL_EASE_BETWEEN_SECTIONS: gsap.EaseString =\n    'power2.out'; /** Easing method of scroll animation from one section to another. From GSAP. */\n  static readonly SCROLL_EASE_WITHIN_SECTION = 0.1; /** The easing strength when scrolling within a long section. */\n  static readonly SCROLL_STRENGTH_MULTIPLIER = 0.6; /** Amount to strengthen or dampen the scrollwheel strength by when scrolling within a section. */\n  static readonly MIN_SCROLL_STRENGTH = 10; /** The minimum strength/speed someone has to scroll in order to trigger the effect. */\n\n  // State\n  private isAnimating = false;\n  private isScrollingWithinSection = false;\n  private currentSectionIdx = 0; /** TODO: in the future we might want to have deep-links to other sections which means we would need to calculate what the actual starting section is. */\n  private prevDir: Dir | null = null;\n  private prevScrollStrength = 0;\n  private targetX = 0;\n\n  // Listeners\n  private onScrollBound = this.onScroll.bind(this);\n  private onMouseWheelBound = this.onMouseWheel.bind(this);\n  private onKeyDownBound = this.onKeyDown.bind(this);\n  private onResizeBound = this.onResize.bind(this);\n  // ==============================================================\n  // #endregion Properties\n\n  // #region Lifecycle\n  // ==============================================================\n  /**\n   *\n   * @param container Container which \"scrolls\". It doesn't actually scroll though. Rather its position gets adjusted.\n   * @param sections The blades within that determine where the stop points are.\n   */\n  constructor(private container: HTMLElement, private sections: NodeListOf<HTMLElement>) {\n    gsap.registerPlugin(ScrollToPlugin);\n  }\n  // ==============================================================\n  // #endregion Lifecycle\n\n  // #region Public methods\n  // ==============================================================\n  public start() {\n    window.addEventListener('scroll', this.onScrollBound);\n    window.addEventListener('wheel', this.onMouseWheelBound, { passive: false });\n    window.addEventListener('keydown', this.onKeyDownBound, { passive: false });\n    window.addEventListener('resize', this.onResizeBound);\n  }\n\n  public kill() {\n    window.removeEventListener('scroll', this.onScrollBound);\n    window.removeEventListener('wheel', this.onMouseWheelBound);\n    window.removeEventListener('keydown', this.onKeyDownBound);\n    window.removeEventListener('resize', this.onResizeBound);\n    gsap.killTweensOf(window);\n  }\n\n  /**\n   * Animate to a target section\n   * @param targetSectionIdx index of `this.sections` to animate to\n   * @param instant Defaults to false. Whether or not you want to ignore the animation and jump straight to the end state.\n   * @param fromScrollEvent Should be ignored/undefined when calling this method externally\n   */\n  public gotoIdx(targetSectionIdx: number, instant = false, fromScrollEvent = false) {\n    if (this.isAnimating) {\n      return;\n    }\n\n    const dir = this.currentSectionIdx < targetSectionIdx ? Dir.RIGHT : Dir.LEFT;\n\n    this.currentSectionIdx = targetSectionIdx;\n    this.isAnimating = !instant;\n    this.isScrollingWithinSection = false;\n\n    const targetSection = this.sections[this.currentSectionIdx];\n\n    this.targetX = targetSection.offsetLeft;\n\n    // If we're scrolling backwards and the target section is wider than the viewport, go to the end of it\n    if (fromScrollEvent && dir === Dir.LEFT && targetSection.offsetWidth > window.innerWidth) {\n      this.targetX = targetSection.offsetLeft + targetSection.offsetWidth - window.innerWidth;\n    }\n\n    gsap.to(window, {\n      scrollTo: { x: this.targetX, y: 0 },\n      duration: instant ? 0 : ScrollSnap.SCROLL_DUR,\n      ease: ScrollSnap.SCROLL_EASE_BETWEEN_SECTIONS,\n      onComplete: () => {\n        this.isAnimating = false;\n      },\n    });\n\n    window.dispatchEvent(new CustomEvent('go_to_section', { detail: targetSectionIdx }));\n  }\n  // ==============================================================\n  // #endregion End Public methods\n\n  // #region Private methods\n  // ==============================================================\n  /**\n   * We're within a section that's wider than the viewport. Smooth the scrolling within it.\n   */\n  private scrollWithinSection(e: WheelEvent) {\n    if (this.isAnimating) {\n      return;\n    }\n\n    const scrollStrength = Math.abs(e.deltaY) > 0 ? e.deltaY : e.deltaX;\n    const dir = scrollStrength > 0 ? Dir.RIGHT : Dir.LEFT;\n\n    // ignore initial momentum\n    if (\n      !this.isScrollingWithinSection &&\n      Math.abs(scrollStrength) < this.prevScrollStrength &&\n      dir === this.prevDir\n    ) {\n      return true;\n    }\n\n    this.targetX += scrollStrength * ScrollSnap.SCROLL_STRENGTH_MULTIPLIER;\n\n    const currentSection = this.sections[this.currentSectionIdx];\n    const minX = currentSection.offsetLeft;\n    const maxX = currentSection.offsetLeft + currentSection.offsetWidth - window.innerWidth;\n    this.targetX = this.clamp(minX, this.targetX, maxX);\n\n    if (!this.isScrollingWithinSection) {\n      this.isScrollingWithinSection = true;\n      this.smoothScrollWithinSection();\n    }\n\n    // Return whether or not we should still consider ourselves \"within\" the section\n    const currentX = window.scrollX;\n    const buffer = 30;\n\n    return (\n      (dir === Dir.LEFT && currentX > minX + buffer) ||\n      (dir === Dir.RIGHT && currentX < maxX - buffer)\n    );\n  }\n\n  /**\n   * Ease between a current value and a target value\n   */\n  private smoothScrollWithinSection() {\n    const currentX = window.scrollX;\n    const deltaX = this.targetX - currentX;\n\n    const EASING = ScrollSnap.SCROLL_EASE_WITHIN_SECTION;\n\n    gsap.set(window, { scrollTo: { x: currentX + deltaX * EASING, y: 0 } });\n\n    if (this.isScrollingWithinSection) {\n      requestAnimationFrame(this.smoothScrollWithinSection.bind(this));\n    }\n  }\n\n  /**\n   * Go left or right. Calculate which section index that should be.\n   * @param dir\n   */\n  private go(dir: Dir) {\n    this.prevDir = dir;\n\n    let targetSectionIdx = this.currentSectionIdx + (dir === Dir.RIGHT ? 1 : -1);\n    targetSectionIdx = this.clamp(0, targetSectionIdx, this.sections.length - 1);\n\n    if (targetSectionIdx !== this.currentSectionIdx) {\n      this.gotoIdx(targetSectionIdx, false, true);\n    }\n  }\n\n  /**\n   * Simple utility to clamp a value between a min and max.\n   * @param min Lowest possible value\n   * @param val Current value\n   * @param max Maximum possible value\n   */\n  private clamp(min: number, val: number, max: number) {\n    return Math.min(Math.max(val, min), max);\n  }\n  // ==============================================================\n  // #endregion End Private methods\n\n  // #region Event Listeners\n  // ==============================================================\n  private onScroll(e: Event) {\n    // TODO: although we override scrolling via the mousewheel and keyboard, there's nothing stopping the user from manually scrolling via the scrollbar\n    // we need to take that into account and recalculate what the current section index is based on which is the most visible one\n  }\n\n  /**\n   * On mouse wheel interaction, figure out which way we're scrolling.\n   */\n  private onMouseWheel(e: WheelEvent) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n\n    const scrollStrength = Math.abs(e.deltaY) > 0 ? e.deltaY : e.deltaX;\n\n    // ignore micro-scrolls. Ratcheting mice sometimes throw a super tiny scroll event in the opposite direction at the end of the scroll.\n    if (Math.abs(scrollStrength) < ScrollSnap.MIN_SCROLL_STRENGTH) {\n      this.prevScrollStrength = 0;\n      return;\n    }\n\n    const currentSection = this.sections[this.currentSectionIdx];\n    if (currentSection.offsetWidth > window.innerWidth) {\n      const withinSectionBounds = this.scrollWithinSection(e);\n      if (withinSectionBounds) {\n        return;\n      }\n    }\n\n    const dir = scrollStrength > 0 ? Dir.RIGHT : Dir.LEFT;\n\n    /*\n    Ignore momentum scrolling. i.e.: after you've scrolled, some mousewheels or trackpads will continue firing a bunch of wheel events.\n    We don't want those to then trigger another scroll event. We want discrete purposeful scrolls only.\n    */\n    if (Math.abs(scrollStrength) > this.prevScrollStrength || dir !== this.prevDir) {\n      this.go(dir);\n    }\n\n    this.prevScrollStrength = Math.abs(scrollStrength);\n  }\n\n  /**\n   * On keydown. So the user can still navigate via keyboard.\n   */\n  private onKeyDown(e: KeyboardEvent) {\n    const tagName = (e.target as HTMLElement).tagName.toLowerCase();\n\n    // Ignore form fields and anything else that would have its own keyboard functionality\n    if (\n      tagName === 'input' ||\n      tagName === 'textarea' ||\n      tagName === 'select' ||\n      (e.target as HTMLElement).isContentEditable\n    ) {\n      return;\n    }\n\n    let dir: Dir;\n\n    if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {\n      dir = Dir.RIGHT;\n    } else if (e.key === 'ArrowUp' || e.key === 'ArrowLeft') {\n      dir = Dir.LEFT;\n    } else {\n      return;\n    }\n\n    const currentSection = this.sections[this.currentSectionIdx];\n    if (currentSection.offsetWidth > window.innerWidth) {\n      const scrollAmt = 300;\n      const deltaY = dir === Dir.RIGHT ? scrollAmt : -scrollAmt;\n      const withinSectionBounds = this.scrollWithinSection(new WheelEvent('wheel', { deltaY }));\n      if (withinSectionBounds) {\n        return;\n      }\n    }\n\n    this.go(dir);\n  }\n\n  /**\n   * Window resize event handler\n   */\n  private onResize() {\n    const targetSection = this.sections[this.currentSectionIdx];\n\n    this.targetX = targetSection.offsetLeft;\n\n    gsap.set(window, {\n      scrollTo: { x: this.targetX, y: 0 },\n    });\n\n    this.isAnimating = false;\n  }\n  // ==============================================================\n  // #endregion End Event Listeners\n}\n", "import ScrollSnap from './ScrollSnap';\n\n(function () {\n  if (document.readyState !== 'loading') {\n    init();\n  } else {\n    document.addEventListener('DOMContentLoaded', init);\n  }\n})();\n\nfunction init() {\n  const scrollContainer = document.querySelector('.page-main');\n  const scrollSnap = new ScrollSnap();\n\n  // Use this to control the active state of the nav buttons\n  scrollContainer.addEventListener('go_to_section', (e) => {\n    // e.detail == the index number of the current section\n    console.log('going to section', e.detail);\n  });\n\n  // to have it go to any section from an external call\n  // scrollSnap.gotoIdx(targetIdx);\n}\n"],
  "mappings": "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",
  "names": []
}
